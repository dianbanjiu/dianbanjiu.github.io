<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on 点半九</title><link>https://www.dianbanjiu.com/tags/git/</link><description>Recent content in Git on 点半九</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 20 Mar 2022 14:38:24 +0800</lastBuildDate><atom:link href="https://www.dianbanjiu.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 以中文展示修改路径</title><link>https://www.dianbanjiu.com/post/git-%E4%BB%A5%E4%B8%AD%E6%96%87%E5%B1%95%E7%A4%BA%E4%BF%AE%E6%94%B9%E8%B7%AF%E5%BE%84/</link><pubDate>Sun, 20 Mar 2022 14:38:24 +0800</pubDate><guid>https://www.dianbanjiu.com/post/git-%E4%BB%A5%E4%B8%AD%E6%96%87%E5%B1%95%E7%A4%BA%E4%BF%AE%E6%94%B9%E8%B7%AF%E5%BE%84/</guid><description>&lt;p>默认情况下，使用 &lt;code>git status&lt;/code> 来查看更改文件时，如果路径中包含有空格或者一些中文字符时，对应的文件路径会用引号括起来，并且其中的中文字符会以反斜杠 &lt;code>\&lt;/code> 进行转义，就像下面这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>On branch blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your branch is up to date with &lt;span style="color:#e6db74">&amp;#39;origin/blog&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Untracked files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to include in what will be committed&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;content/post/git \344\273\245\344\270\255\346\226\207\345\261\225\347\244\272\344\277\256\346\224\271\350\267\257\345\276\204.md&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nothing added to commit but untracked files present &lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add&amp;#34;&lt;/span> to track&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然这种配置在你的文件名中含有换行回车之类字符的时候可能比较有用（这种文件数量应该很少吧😑），但是在修改文件比较多的情况下就很难知道对应的是哪些文件，想要正常打印出这些中文字符的话可以通过下面的配置项来解决&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config core.quotePath false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的设置是仅对单个项目设置，如果需要针对全局所有的项目关闭这个特性，可以添加 &lt;code>--global&lt;/code> 参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global core.quotePath false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数的一些具体说明可以参考此处： &lt;a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath">https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath&lt;/a>&lt;/p></description></item><item><title>What's the Difference Between Git Merge and Git Rebase</title><link>https://www.dianbanjiu.com/post/whats-the-difference-between-git-merge-and-git-rebase/</link><pubDate>Sat, 10 Jul 2021 14:07:01 +0800</pubDate><guid>https://www.dianbanjiu.com/post/whats-the-difference-between-git-merge-and-git-rebase/</guid><description>&lt;p>git merge 与 git rebase 是我们平常协同开发过程中最常见，但是也是最容易让人迷惑的两个合并操作。下面是我对这两种合并方式的理解以及一些使用建议。&lt;/p>
&lt;h2 id="git-merge">git merge&lt;/h2>
&lt;p>git merge 相对来说比较好理解，他会将待 merge 的分支上所有不存在于当前分支的提交按照时间顺序插入到当前分支上，最后再生成一个 &lt;code>Merge branch 'xxx'&lt;/code> 的 commit。&lt;/p>
&lt;p>基础语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># git merge other-branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git checkout master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git merge feature
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 merge 操作的基本图例。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KerogMC.png" alt="git merge">&lt;/p>
&lt;p>merge 操作不会对每个提交节点本身做任何修改，也就是说在提交前后每个节点的提交信息、sha256 等信息都是一致的。&lt;/p>
&lt;p>最后生成的合并节点 M 中一般会包含待提交分支与当前分支的所有差异代码，代码合并过程中的冲突修正也是在 M 节点中。一次 merge 操作最多只需要解决一次代码冲突。&lt;/p>
&lt;h2 id="git-rebase">git rebase&lt;/h2>
&lt;p>rebase 操作会移动当前分支的基点（创建当前分支时基于的节点）为上游分支的最新提交，然后重写当前分支基点后的所有提交。&lt;/p>
&lt;p>基础语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># git rebase upstream branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git checkout feature
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git rebase master feature
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 rebase 的基础图例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/PC8iDcZ.png" alt="git rebase">&lt;/p>
&lt;p>rebase 操作会把 feature 的基点从 C 移到 D，然后重写 C、E，虽然表面上看 C、E 的提交信息没有任何变化，但是这两个点的 sha256 值其实已经不同了，相当于是两个新的提交。&lt;/p>
&lt;p>rebase 过程中如果出现冲突，则需要针对冲突节点进行修改，修改完成后使用 &lt;code>git rebase --continue&lt;/code> 继续 rebase，整个过程中不会产生类似 &lt;code>Merge branch xxx&lt;/code> 的额外提交。&lt;/p>
&lt;p>rebase 与 merge 相比，虽然可以减少一些无用的合并提交，但是因为 rebase 会基于上游分支重写当前分支，所以一般情况下不建议在主分支上进行 rebase 操作。&lt;/p>
&lt;h2 id="使用建议">使用建议&lt;/h2>
&lt;p>因为现在公司的合并检查都是通过 CI 来做的，所以你提的 merge 请求至少不能与主版本发生任何冲突，这样才能通过检查。下面是我在日常工作流中两种合并操作的使用方式。&lt;/p>
&lt;ol>
&lt;li>在非主版本上进行开发时，定期（一般是每次提交后）将主分支的更新 rebase 到当前分支，有冲突及早解决&lt;/li>
&lt;li>在主版本上只使用 merge 操作合并其他分支的代码&lt;/li>
&lt;/ol></description></item><item><title>Git 子模块管理</title><link>https://www.dianbanjiu.com/post/git-%E5%AD%90%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 04 Jan 2021 23:10:33 +0800</pubDate><guid>https://www.dianbanjiu.com/post/git-%E5%AD%90%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/</guid><description>&lt;h2 id="子模块的创建">子模块的创建&lt;/h2>
&lt;p>子模块的创建很简单，通过下面的命令就可以将 &lt;code>xxx&lt;/code> 仓库注册到当前目录的 &lt;code>xxx&lt;/code> 路径下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git submodule add https://github.com/xxx/xxx.git ./xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="子模块的更新">子模块的更新&lt;/h2>
&lt;p>如果需要在 clone 项目时将子模块也 clone 下来，可以使用 &lt;code>--recurse-submodules&lt;/code> 参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone --recurse-submodules https://github.com/xxx/xxx.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 clone 项目的时候忘记使用 &lt;code>--recurse-submodules&lt;/code> 参数，也可以在项目 clone 完成之后依次执行下面的命令来获取子模块。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git submodule --init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git submodule update --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="子模块的删除">子模块的删除&lt;/h2>
&lt;p>相比于子模块的创建和更新，子模块的删除相对比较麻烦一些。首先需要从注册路径删除对应子模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rm -rf ./xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rm -rf .git/modules/xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着需要从 .gitmodules 中删除对应注册项 &lt;br>
然后从 .git/config 中删除对应注册项 &lt;br>
最后使用下面的命令删除缓存&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git rm --cached xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Git 提交多行 Commit 信息</title><link>https://www.dianbanjiu.com/post/git-%E6%8F%90%E4%BA%A4%E5%A4%9A%E8%A1%8C-commit-%E4%BF%A1%E6%81%AF/</link><pubDate>Sun, 19 Jul 2020 22:46:28 +0800</pubDate><guid>https://www.dianbanjiu.com/post/git-%E6%8F%90%E4%BA%A4%E5%A4%9A%E8%A1%8C-commit-%E4%BF%A1%E6%81%AF/</guid><description>&lt;p>git 提交信息 commit 在项目中追踪代码改动原因非常有用，特别是在团队合作中，一个简洁有效的 commit 可以帮助进行 merge 的人快速了解本次代码改动的必要性。为了保证提交信息的可读性，多行 commit 几乎是不可避免的。下面就来说一下如何实现多行 commit。&lt;/p>
&lt;p>我平时的习惯是使用命令行进行 git 的各种操作，命令行进行 commit 的时候使用的命令是 &lt;code>git commit -m messgae&lt;/code>，这里面的 message 就是我们要为本次提交添加的 commit，至于实现多行 commit 其实很简单，就是给提交的 commit 内容加上引号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>位于分支 master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>尚无提交
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>要提交的变更：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> （使用 &lt;span style="color:#e6db74">&amp;#34;git rm --cached &amp;lt;文件&amp;gt;...&amp;#34;&lt;/span> 以取消暂存）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 新文件： readme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;这是项目的第一提交，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">dquote&amp;gt; 进行了项目的初始化，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">dquote&amp;gt; 并添加了 readme 文件。&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>master（根提交） f647981&lt;span style="color:#f92672">]&lt;/span> 这是项目的第一提交， 进行了项目的初始化， 并添加了 readme 文件。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> file changed, &lt;span style="color:#ae81ff">0&lt;/span> insertions&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span> deletions&lt;span style="color:#f92672">(&lt;/span>-&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create mode &lt;span style="color:#ae81ff">100644&lt;/span> readme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit f6479814f196ab818abcc9ed9b33c8aeffc43b5d &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: dianbanjiu &amp;lt;dianbanjiu@gmail.com&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Sun Jul &lt;span style="color:#ae81ff">19&lt;/span> 22:59:07 &lt;span style="color:#ae81ff">2020&lt;/span> +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 这是项目的第一提交，
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 进行了项目的初始化，
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 并添加了 readme 文件。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，在对 commit 信息的开始添加了第一个引号之后，输入一些信息键入回车，git 会自动转到下一行，并且以 &lt;code>dquote&amp;gt;&lt;/code> 表示 git 在继续等你输入 commit 信息，直到检测到第二个引号为止。&lt;/p>
&lt;p>如果的 commit 信息中也包含了英文的半角引号，可以通过 &lt;code>\&lt;/code> 来进行转义。&lt;/p></description></item><item><title>Github 开启两步验证后，git 推送鉴权失败</title><link>https://www.dianbanjiu.com/post/github-%E5%BC%80%E5%90%AF%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81%E5%90%8Egit-%E6%8E%A8%E9%80%81%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</link><pubDate>Thu, 03 Oct 2019 11:05:02 +0800</pubDate><guid>https://www.dianbanjiu.com/post/github-%E5%BC%80%E5%90%AF%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81%E5%90%8Egit-%E6%8E%A8%E9%80%81%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</guid><description>&lt;p>最近开启了 Github 的两步验证，然后在桌面上使用 git 向 Github 推送文件的时候总是出现&lt;code>鉴权失败&lt;/code>的问题，在排除了密码错误的原因之后，觉得应该就是两步验证的锅了。&lt;/p>
&lt;p>下面是解决办法：&lt;/p>
&lt;ol>
&lt;li>打开 Github 的 「&lt;a href="https://github.com/settings/profile">Settings&lt;/a>」&lt;/li>
&lt;li>进入 「&lt;a href="https://github.com/settings/apps">Developer settings&lt;/a>」&lt;/li>
&lt;li>打开 「&lt;a href="https://github.com/settings/tokens">Personal access tokens&lt;/a>」&lt;/li>
&lt;li>点击 「Generate new token」，生成一个新的 token&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>生成 token 之后千万记得把 token 复制并保存好，因为 github 为了安全起见，这个 token 只会出现一次，也就是说如果你以后忘记了这个 token，只能重新创建一个。&lt;/strong>&lt;/p>
&lt;p>push 之前记得先要配置好用户名跟密码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global user.name &lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git config --global user.email &lt;span style="color:#e6db74">&amp;#34;email@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后再 push 的时候将密码替换为上面生成的 &lt;code>access token&lt;/code> 就可以了。&lt;/p>
&lt;hr>
&lt;p>你还可以创建一个 &lt;code>.git-credentials&lt;/code> 文件 (文件名可以任意，这里只是为了表义)，其中的内容（依规则替换掉其中的用户名和密码/access token）：&lt;/p>
&lt;pre tabindex="0">&lt;code>https://{username}:{password}@github.com
&lt;/code>&lt;/pre>&lt;p>在终端输入下面的命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global credential.helper store --file ~/.git-credentials
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>credential&lt;/code> 是用来配置 git 的凭证存储的参数。&lt;br>
&lt;code>--file&lt;/code> 后面指定的是凭证存放的位置。&lt;/p>
&lt;p>这种方式可以避免每次 push 的时候都需要输入密码，但是因为密码是&lt;code>明文&lt;/code>存储在本地，可能不是很安全。&lt;/p>
&lt;hr>
&lt;p>不过貌似这个文件并不是强制的，我在使用 access token push 完之后，直接执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global credential.helper store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在之后的推送中也不再需要输入用户名和密码了。&lt;/p></description></item></channel></rss>