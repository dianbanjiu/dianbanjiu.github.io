<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pagefind on 点半九</title><link>https://www.dianbanjiu.com/tags/pagefind/</link><description>Recent content in Pagefind on 点半九</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 20 Feb 2023 23:25:11 +0800</lastBuildDate><atom:link href="https://www.dianbanjiu.com/tags/pagefind/index.xml" rel="self" type="application/rss+xml"/><item><title>给我的Blog加上搜索功能</title><link>https://www.dianbanjiu.com/post/%E7%BB%99%E6%88%91%E7%9A%84blog%E5%8A%A0%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 20 Feb 2023 23:25:11 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%BB%99%E6%88%91%E7%9A%84blog%E5%8A%A0%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>之前一直想给博客加上搜索功能，但是看了好几个方案都是不再维护的状态，后来在《阮一峰的网络日志》中看到了 &lt;a href="https://pagefind.app/">pagefind&lt;/a> 这个工具，配置比较简单，而且使用上也比较方便。因为我是计划新增一个专门的搜索页面，下面的介绍也是以此为基础来介绍&lt;/p>
&lt;p>1、在 content 目录下新增一个 search 目录，并在 search 目录中新建一个 index.md 的文件，index.md 的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;🥰Find something~🥰&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout: search
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>title 可以根据自己的需要随便修改&lt;/p>
&lt;p>2、在自己主题目录的 layouts/_default 下新增一个 search.html 的页面，页面的主体内容可以复制 layouts/_default/single.html，只需要将其中的 {{.Content}} 替换为下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>window.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, (event) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new PagefindUI({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> element: &amp;#34;#search&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我的 search.html 整个文件全文如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{ define &amp;#34;content&amp;#34; -}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">article&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post bg-white&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- post-header --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">header&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-header&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;post/i18nlist.html&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- Content --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-content&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/pagefind/pagefind-ui.css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/pagefind/pagefind-ui.js&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;DOMContentLoaded&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">event&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PagefindUI&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">element&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;#search&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- end }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pagefind 默认会把创建好的索引等文件放在 _pagefind 目录下，但是如果你的服务是托管在 GitHub page 上，通过域名访问你的博客的时候下划线开头的文件可能无法被获取到，导致搜索功能无法使用，所以我们下面将 pagefind 的输出修改到其他位置&lt;/p>
&lt;p>3、在博客的根目录下创建一个 pagefind.yml 的文件，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">glob&lt;/span>: &lt;span style="color:#ae81ff">post/*/*.{html}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">bundle_dir&lt;/span>: &lt;span style="color:#ae81ff">pagefind&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>source 是指定我们通过 hugo 命令生成的博客静态文件的位置，一般都是在 public 目录&lt;/li>
&lt;li>glob 是指定 pagefind 都需要索引哪些位置的文件。我的博客文章是放在 content/post 目录中，生成到 public 之后对应的目录是在 post 中，在搜索的时候我也只想搜索 post 目录下的内容，所以需要单独指定一下。此处是可选的&lt;/li>
&lt;li>bundle_dir 指定了 pagefind 生成的索引等文件在 public 目录的存放位置，为了避免上面提到的问题，我此处将移动到 public/pagefind 中，如果你想将其修改到 public 下的其他目录中，需要同时修改上面 search.html 文件中 pagefind 的 JS 和 CSS 文件的引入位置&lt;/li>
&lt;/ul>
&lt;p>4、在博客的配置文件中新增一个搜索路由，以我的 config.toml 文件为例，在文件中新增下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;搜索&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>5、运行下面的命令查看效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rm -rf ./public/*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ npx -y pagefind --serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等索引完成之后，打开浏览器访问 http://localhost:1414/search 就可以看到效果了&lt;br>
&lt;img src="https://www.dianbanjiu.com/img/pagefind_search_show.png" alt="">&lt;/p>
&lt;p>6、为了保证之后的可用性，我实际使用的是 pagefind 提供的二进制文件，这些预构建的文件在 GitHub 的 &lt;a href="https://github.com/CloudCannon/pagefind/releases">release 页面&lt;/a> 可以下载到，需要下载带 _extended 的文件，因为它扩展了对中文的索引。二进制文件和 npx 的使用方式类似&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pagefind_extended --serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7、如果你像我一样使用的是 GitHub Action 自动构建博客的，并且也是用的是二进制包的方式进行索引，还需要在 action 的脚本中 deploy 之前加一个 step&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">create search index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">tar -xf pagefind_extended.tar.gz &amp;amp;&amp;amp; chmod u+x pagefind_extended &amp;amp;&amp;amp; ./pagefind_extended &amp;amp;&amp;amp; rm -f pagefind_extended&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在提交文件到 GitHub 的时候推荐提交 pagefind 对应的压缩包，并且是 Linux 系统 x86_64 架构可执行文件的压缩包，这样可以减少一些不必要的上传带宽（压缩后的文件大概 44M，解压出来的有 222M）。为了方便起见，我这里把压缩包重新命名为 pagefind_extended.tar.gz&lt;/p>
&lt;p>提交并构建完成之后清理一下浏览器缓存，重新访问一下博客应该就可以看到搜索按钮和搜索页面了&lt;/p>
&lt;p>最后有一个点需要注意一下，因为 pagefind 是通过分词的方式来进行搜索的，所以搜索功能&lt;strong>只会在命中分词的时候生效&lt;/strong>，比如现在有一个词 &lt;code>碳酸危机&lt;/code>，搜索 &lt;code>碳酸&lt;/code>、&lt;code>危机&lt;/code>或者&lt;code>碳酸 危机&lt;/code> 都可以搜到对应的内容，但是直接搜索 &lt;code>碳酸危机&lt;/code> 会得不到任何搜索结果，这就是分词导致的&lt;/p>
&lt;p>不过这种分词的优势是可以大大减少索引文件的大小，hugo 默认生成的索引文件包含了每篇文章的全文，随着文章的增多生成的索引文件会膨胀的比较快，而 pagefind 这种通过分词生成索引文件的方式，只会在有新的分词的时候或者新的文章的时候（因为需要记录分词对应的文章的一些信息，比如链接）索引文件的大小才会有些微增加，生成的索引文件膨胀的就会慢很多&lt;/p></description></item></channel></rss>