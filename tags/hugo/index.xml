<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 点半九</title><link>https://www.dianbanjiu.com/tags/hugo/</link><description>Recent content in Hugo on 点半九</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 20 Feb 2023 23:25:11 +0800</lastBuildDate><atom:link href="https://www.dianbanjiu.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>给我的Blog加上搜索功能</title><link>https://www.dianbanjiu.com/post/%E7%BB%99%E6%88%91%E7%9A%84blog%E5%8A%A0%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 20 Feb 2023 23:25:11 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%BB%99%E6%88%91%E7%9A%84blog%E5%8A%A0%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>之前一直想给博客加上搜索功能，但是看了好几个方案都是不再维护的状态，后来在《阮一峰的网络日志》中看到了 &lt;a href="https://pagefind.app/">pagefind&lt;/a> 这个工具，配置比较简单，而且使用上也比较方便。因为我是计划新增一个专门的搜索页面，下面的介绍也是以此为基础来介绍&lt;/p>
&lt;p>1、在 content 目录下新增一个 search 目录，并在 search 目录中新建一个 index.md 的文件，index.md 的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;🥰Find something~🥰&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout: search
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>title 可以根据自己的需要随便修改&lt;/p>
&lt;p>2、在自己主题目录的 layouts/_default 下新增一个 search.html 的页面，页面的主体内容可以复制 layouts/_default/single.html，只需要将其中的 {{.Content}} 替换为下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>window.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, (event) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new PagefindUI({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> element: &amp;#34;#search&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我的 search.html 整个文件全文如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{ define &amp;#34;content&amp;#34; -}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">article&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post bg-white&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- post-header --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">header&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-header&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;post/i18nlist.html&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- Content --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-content&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/pagefind/pagefind-ui.css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/pagefind/pagefind-ui.js&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;DOMContentLoaded&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">event&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PagefindUI&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">element&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;#search&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- end }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pagefind 默认会把创建好的索引等文件放在 _pagefind 目录下，但是如果你的服务是托管在 GitHub page 上，通过域名访问你的博客的时候下划线开头的文件可能无法被获取到，导致搜索功能无法使用，所以我们下面将 pagefind 的输出修改到其他位置&lt;/p>
&lt;p>3、在博客的根目录下创建一个 pagefind.yml 的文件，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">glob&lt;/span>: &lt;span style="color:#ae81ff">post/*/*.{html}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">bundle_dir&lt;/span>: &lt;span style="color:#ae81ff">pagefind&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>source 是指定我们通过 hugo 命令生成的博客静态文件的位置，一般都是在 public 目录&lt;/li>
&lt;li>glob 是指定 pagefind 都需要索引哪些位置的文件。我的博客文章是放在 content/post 目录中，生成到 public 之后对应的目录是在 post 中，在搜索的时候我也只想搜索 post 目录下的内容，所以需要单独指定一下。此处是可选的&lt;/li>
&lt;li>bundle_dir 指定了 pagefind 生成的索引等文件在 public 目录的存放位置，为了避免上面提到的问题，我此处将移动到 public/pagefind 中，如果你想将其修改到 public 下的其他目录中，需要同时修改上面 search.html 文件中 pagefind 的 JS 和 CSS 文件的引入位置&lt;/li>
&lt;/ul>
&lt;p>4、在博客的配置文件中新增一个搜索路由，以我的 config.toml 文件为例，在文件中新增下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;搜索&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>5、运行下面的命令查看效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rm -rf ./public/*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ npx -y pagefind --serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等索引完成之后，打开浏览器访问 http://localhost:1414/search 就可以看到效果了&lt;br>
&lt;img src="https://www.dianbanjiu.com/img/pagefind_search_show.png" alt="">&lt;/p>
&lt;p>6、为了保证之后的可用性，我实际使用的是 pagefind 提供的二进制文件，这些预构建的文件在 GitHub 的 &lt;a href="https://github.com/CloudCannon/pagefind/releases">release 页面&lt;/a> 可以下载到，需要下载带 _extended 的文件，因为它扩展了对中文的索引。二进制文件和 npx 的使用方式类似&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pagefind_extended --serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7、如果你像我一样使用的是 GitHub Action 自动构建博客的，并且也是用的是二进制包的方式进行索引，还需要在 action 的脚本中 deploy 之前加一个 step&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">create search index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">tar -xf pagefind_extended.tar.gz &amp;amp;&amp;amp; chmod u+x pagefind_extended &amp;amp;&amp;amp; ./pagefind_extended &amp;amp;&amp;amp; rm -f pagefind_extended&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在提交文件到 GitHub 的时候推荐提交 pagefind 对应的压缩包，并且是 Linux 系统 x86_64 架构可执行文件的压缩包，这样可以减少一些不必要的上传带宽（压缩后的文件大概 44M，解压出来的有 222M）。为了方便起见，我这里把压缩包重新命名为 pagefind_extended.tar.gz&lt;/p>
&lt;p>提交并构建完成之后清理一下浏览器缓存，重新访问一下博客应该就可以看到搜索按钮和搜索页面了&lt;/p>
&lt;p>最后有一个点需要注意一下，因为 pagefind 是通过分词的方式来进行搜索的，所以搜索功能&lt;strong>只会在命中分词的时候生效&lt;/strong>，比如现在有一个词 &lt;code>碳酸危机&lt;/code>，搜索 &lt;code>碳酸&lt;/code>、&lt;code>危机&lt;/code>或者&lt;code>碳酸 危机&lt;/code> 都可以搜到对应的内容，但是直接搜索 &lt;code>碳酸危机&lt;/code> 会得不到任何搜索结果，这就是分词导致的&lt;/p>
&lt;p>不过这种分词的优势是可以大大减少索引文件的大小，hugo 默认生成的索引文件包含了每篇文章的全文，随着文章的增多生成的索引文件会膨胀的比较快，而 pagefind 这种通过分词生成索引文件的方式，只会在有新的分词的时候或者新的文章的时候（因为需要记录分词对应的文章的一些信息，比如链接）索引文件的大小才会有些微增加，生成的索引文件膨胀的就会慢很多&lt;/p></description></item><item><title>把图片存储在hugo项目下</title><link>https://www.dianbanjiu.com/post/%E6%8A%8A%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E5%9C%A8hugo%E9%A1%B9%E7%9B%AE%E4%B8%8B/</link><pubDate>Sun, 04 Dec 2022 02:50:07 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E6%8A%8A%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E5%9C%A8hugo%E9%A1%B9%E7%9B%AE%E4%B8%8B/</guid><description>&lt;p>之前博客的图片一直是放在各种图床上面的，一开始是 imgur，虽然是免费的，但是在国内访问是一个很大的问题，所以后来就迁移到了 sm.ms，迁移完成之后在国内国外网络都可以比较顺畅的访问了&lt;/p>
&lt;p>不过在迁移的过程中发现一个问题，图片在上传到这些图床之后，他们都会使用自己的规则重新生成一个对外的名字，虽然我理解他们这么做的原因，但是这会极大的增加我以后迁移图床的难度。所以我就开始考虑把所有的图片都放在能够自定义文件名的地方，这样不管是在博客中引用还是以后迁移起来都很简单，只需要使用正则统一修改图片的前缀地址即可。目前采用的是直接把所有图片都放到博客的目录下面，跟博客一同编译&lt;/p>
&lt;p>我现在的博客使用的是 hugo，hugo 在 build 站点的时候会把根目录下 static 目录里面的内容直接扔在生成的静态站点的根目录下面，所以可以通过这种方式来引用图片&lt;/p>
&lt;ol>
&lt;li>在 static 目录下面创建 img 目录（static 不存在的话手动创建）&lt;/li>
&lt;li>把图片放在 static/img 下面&lt;/li>
&lt;li>在引用图片的时候使用 /img/picturename.extra 进行引用&lt;/li>
&lt;/ol>
&lt;p>比如我放了一张名为 doge.png 的图片到 static/img 下面，那就可以通过 &lt;code>![](/img/doge.png)&lt;/code> 来引用这张图片&lt;/p>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/doge.png" alt="">&lt;/p>
&lt;p>我现在的域名是配置了 Cloudflare 加速的，把图片也放在博客目录下之后，相当于也顺便给图片也开了加速，可以说是一举两得了😂&lt;/p></description></item><item><title>Github Action 自动修改文章的更新日期</title><link>https://www.dianbanjiu.com/post/github-action-%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E7%9A%84%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F/</link><pubDate>Wed, 08 Jun 2022 00:25:49 +0800</pubDate><guid>https://www.dianbanjiu.com/post/github-action-%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E7%9A%84%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F/</guid><description>&lt;p>我博客写的多是一些偏向于技术或者工具使用方面的文章，随着技术或者工具的更迭，我也需要时不时地更新一下历史文章。在没有使用 action 之前我一直是手动修改文章更新时间，这种方式虽然可行，但是多少有点繁琐。在使用 action 自动部署博客之后，我就想能不能通过 action 自动修改文章的更新时间&lt;/p>
&lt;p>结合官方文档，目前确定了整体的流程，大致需要下面三步&lt;/p>
&lt;h2 id="1修改-archetypesdefaultmd">1、修改 archetypes/default.md&lt;/h2>
&lt;p>&lt;strong>archetypes/default.md&lt;/strong> 是博客文章的默认模板，当你使用 &lt;code>hugo new post&lt;/code> 创建文章的时候，hugo 会把这个模板内容填充到你新建的文章中。你需要在其中新增下面一行，当你创建新文章的时候，默认会把当前日期填充为文章的更新日期&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>lastmod: {{ .Date }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当你设置了第二步之后，这里实际展示的数据会根据第二步的设置进行替换&lt;/p>
&lt;h2 id="2修改-configtomlyamljson">2、修改 config.toml/yaml/json&lt;/h2>
&lt;p>修改博客的配置文件，在其中新增下面两行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">frontmatter&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lastmod&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;:git&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;lastmod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;:fileModTime&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>:git&lt;/code>: 以文件的提交时间作为更新时间&lt;/li>
&lt;li>&lt;code>lastmod&lt;/code>: 以文章里面的 lastmod 字段作为更新时间&lt;/li>
&lt;li>&lt;code>:fileModTime&lt;/code>: 以文件的修改时间作为更新时间&lt;/li>
&lt;/ul>
&lt;p>你可以根据自己的需要设置/组合这些参数，这几个参数的生效顺序就是根据他们在数组中的顺序决定的&lt;/p>
&lt;p>如果你像我一样使用文章 git 提交的时间作为文章更新时间的话，还需要在博客的配置文件中新增下面一行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">enableGitInfo&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于这部分更多的详细配置，你可以参考延伸阅读&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="3修改-action-配置文件可选">3、修改 action 配置文件（可选）&lt;/h2>
&lt;p>如果你想以文章的 git 提交时间作为文章的更新时间的话，你还需要修改一下 action 的配置文件。下面是我的 action 的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Publish Blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Disable quotePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git config --global core.quotePath false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --gc --minify --cleanDestinationDir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACTIONS_DEPLOY_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_BRANCH&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_DIR&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意上面的 &lt;code>Checkout&lt;/code> 和 &lt;code>Disable quotePath&lt;/code> 阶段&lt;/p>
&lt;p>其中 &lt;code>Checkout&lt;/code> 阶段需要有下面两行，在这里 &lt;strong>fetch-depth&lt;/strong> 的默认值是 1，也就是说它默认只会拉取分支最近的一次 commit，这可能会导致一些文章的 &lt;code>GitInfo&lt;/code> 变量无法获取到。设置为 0 代表拉取所有分支的所有提交&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，当文件名中包含中文的时候，git 会使用引号把文件名括起来，但是这会导致 action 中无法读取 &lt;code>:GitInfo&lt;/code> 变量，所以这里需要有 &lt;code>Disable quotePath&lt;/code> 阶段&lt;/p>
&lt;p>通过上面这些操作之后，你可以尝试修改一篇历史文章，并提交到 GitHub 上，待 action 成功运行完成之后，你应该就可以看到效果了&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>hugo 日期配置官方文档: &lt;a href="https://gohugo.io/getting-started/configuration/#configure-dates">https://gohugo.io/getting-started/configuration/#configure-dates&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>在 Github Pages 上部署 Hugo</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo/</link><pubDate>Thu, 07 Jan 2021 00:33:09 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo/</guid><description>&lt;p>其实在 github pages（以下简称 pages）上部署 hugo 的过程很简单，如何保证这些文件的迁移才是有点麻烦的事，不过最关键的问题其实在于你是否有足够的精力写下去。&lt;/p>
&lt;h2 id="初阶">初阶&lt;/h2>
&lt;h3 id="需要准备的一些东西">需要准备的一些东西&lt;/h3>
&lt;ul>
&lt;li>github 帐号&lt;/li>
&lt;li>hugo&lt;/li>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;h3 id="开始">开始&lt;/h3>
&lt;p>git 跟 hugo 这两个软件包应该在很多 Linux 发行版中都可以找到，可以直接使用系统对应的包管理进行安装即可。&lt;br>
安装完之后可以使用下面的命令进行确认&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用下面的命令创建站点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo new site mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Congratulations! Your new Hugo site is created in /home/xxx/demo/mysite.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Just a few more steps and you&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>re ready to go:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1. Download a theme into the same-named folder.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Choose a theme from https://themes.gohugo.io/ or
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create your own with the &lt;span style="color:#e6db74">&amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34;&lt;/span> command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. Perhaps you want to add some content. You can add single files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with &lt;span style="color:#e6db74">&amp;#34;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. Start the built-in live server via &lt;span style="color:#e6db74">&amp;#34;hugo server&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Visit https://gohugo.io/ &lt;span style="color:#66d9ef">for&lt;/span> quickstart guide and full documentation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入命令后基本上立刻就可以看到输出的 “congratulation &amp;hellip;”，这说明创建成功了。&lt;/p>
&lt;p>刚创建好的站点一般包含下面几个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── archetypes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── default.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── content
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── layouts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── themes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong> 如果没有指明操作路径，默认就是在 mysite 下。&lt;/p>
&lt;p>接下来去 &lt;a href="https://themes.gohugo.io/">hugo 主题站&lt;/a> 挑一个自己喜欢的主题，然后将其下载到 themes 目录中。下面以 hugo-theme-jane 为例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/xianmin/hugo-theme-jane themes/jane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 jane 目录下有一些已经比较完善的配置文件，像是 jane/exampleSite 下的 config.toml 以及 jane/archetypes/default.md，前者是用来配置站点的环境的，后者则是编写的文章的模板文件，一般这些文件里都会有比较详细的说明，根据它的说明进行修改就可以了。&lt;/p>
&lt;p>修改完成之后，就可以创建一篇文章来测试一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo new post/helloWorld.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这条命令将会在 mysite/content/post 下创建 helloWorld.md 这个文件，向这个文件里随便加点内容。然后使用下面的命令来预览一下效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开浏览器，输入 http://localhost:1313 就可以看到博客日后的样式了。&lt;/p>
&lt;p>如果预览之后觉得满意，就可以使用下面的命令将站点部署至 pages（请将下面的 Name 修改为你的 github 用户名），在开始之前，先在 github 上创建一个名为 Name.github.io 的 repo&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git remote add origin https://github.com/Name/Name.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;create blog site&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器输入 Name.github.io 就可以查看部署好的站点。&lt;/p>
&lt;h3 id="备份">备份&lt;/h3>
&lt;p>这样 hugo 站点基本就算是部署完成了，不过这些文件都是 hugo 编译好的一些静态文件，为了避免更换系统之后无法更新博客，你需要将 mysite 站点下除了 public 之外的目录都进行一个备份（之所以不备份 public 目录，是因为在执行 &lt;code>hugo&lt;/code> 命令之后都会重新生成 public 目录）。&lt;/p>
&lt;p>可以在 github 创建一个新的 repo 来存放这些文件。假设这个 repo 名为 Blog&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git submodule add https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;public/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;backup blog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的第二步使用 submodule 参数是因为 themes/jane 目录本身也是一个使用 git 进行版本控制的目录。而 public 虽然也是一个使用 git 进行版本控制的目录，但是因为它已经被添加到 .gitignore 文件当中，所以是不会被 git 索引的。&lt;/p>
&lt;p>如果你换了系统之类的，先将 Blog 这个 repo 克隆到本地，然后再将主题克隆一遍就可以像之前那样继续你的写作了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/Name/Blog.git &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd Blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进阶">进阶&lt;/h2>
&lt;p>初阶里面你需要写完文章之后手动构建一下，这种方式显然不够优雅，下面一起来康康怎么让构建的过程完全自动化。&lt;/p>
&lt;p>为了这个自动化的过程，你需要将网站的源码和 public 下面的内容放在 dianbanjiu.github.io 仓库的不同分支，不过要保证主分支必须放的是 public 里面的内容。我这里的分支对应关系是 master 分支存放 public，blog 分支存放源码，其中 master 为主分支。&lt;/p>
&lt;p>这个自动化的过程需要结合 github action 来完成。&lt;/p>
&lt;p>首先我们先来配置一下 action。&lt;/p>
&lt;ol>
&lt;li>去 dianbanjiu.github.io 仓库的 &lt;code>Settings-&amp;gt;Deploy keys&lt;/code> 添加一个新的 deploy key，这个 key 用你的 ssh 公钥即可，记得勾选 &lt;code>Allow write access&lt;/code>。&lt;/li>
&lt;li>在 &lt;code>Settings-&amp;gt;Secrets&lt;/code> 下添加一个新的 Secrets，这里填写你的 ssh 密钥，名字为了与之后的脚本对应就设置为 &lt;code>ACTIONS_DEPLOY_KEY&lt;/code>。&lt;/li>
&lt;li>在源码对应的分支下根目录下创建一个 &lt;code>.github&lt;/code> 的目录，在 &lt;code>.github&lt;/code> 下创建一个叫做 &lt;code>workflows&lt;/code> 的目录，&lt;code>workflows&lt;/code> 目录下创建一个 &lt;code>public.yml&lt;/code> 的文件。简单来说就是 github action 会从分支根目录下寻找 .github/workflows 目录，这个目录下存放的就是你的一些 action，如果你有多个任务可以创建多个 action，不过这里就不多说了。&lt;/li>
&lt;/ol>
&lt;p>public.yml 文件的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Publish Blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Disable quotePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git config --global core.quotePath false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --gc --minify --cleanDestinationDir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACTIONS_DEPLOY_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_BRANCH&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_DIR&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只介绍其中几个比较关键的点：&lt;/p>
&lt;ol>
&lt;li>branches 下指定的分支是你网站源码所在的分支，如果指定错误这个 action 就无法运行&lt;/li>
&lt;li>&lt;code>ACTIONS_DEPLOY_KEY&lt;/code> 的值对应于你之前在 &lt;code>Settings-&amp;gt;Secrets&lt;/code> 下添加的 &lt;code>Secrets&lt;/code>，确保两者一致即可&lt;/li>
&lt;li>&lt;code>PUBLISH_BRANCH&lt;/code> 对应于你的主分支&lt;/li>
&lt;li>&lt;code>PUBLISH_DIR&lt;/code> 对应于执行 hugo 命令后生成文件的位置，一般默认就是 &lt;code>./public&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>做完这些之后再将内容推送到 blog 分支的时候，action 就会自动执行构建过程，然后将构建好的博客内容推送到 master 分支&lt;/p>
&lt;h2 id="延伸阅读">延伸阅读&lt;/h2>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程&lt;/a>&lt;/p></description></item><item><title>在Hugo博客中添加一个新的页面</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8hugo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E9%A1%B5%E9%9D%A2/</link><pubDate>Thu, 11 Jun 2020 23:18:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8hugo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E9%A1%B5%E9%9D%A2/</guid><description>&lt;p>这里说的页面不是指 hugo 利用 markdown 文件生成的页面，而是我们自己手动创建的 html 页面。&lt;/p>
&lt;p>这个过程其实并不复杂，但是你需要有一些前端开发的经验，起码的 HTML、CSS、JavaScript 基础你需要了解一些，其次不太推荐使用类似 Vue 这样的 JS 框架，因为 hugo 的页面使用了大量的 golang 模板语法，就是你在主题文件中看到的 &lt;code>{{}}&lt;/code> 语法，而 Vue 中也有到这个语法，这可能会在无意中给你的开发造成障碍，而且后期再看或者修改这些代码的时候也很有可能会混乱。&lt;/p>
&lt;p>屁话说得有点多了，下面正式开始。&lt;/p>
&lt;h3 id="todo">TODO&lt;/h3>
&lt;p>首先在根目录下的 &lt;code>static&lt;/code> 下创建一个目录，目录名是你的页面名。比如我想通过 &lt;a href="https://www.dianbanjiu.com/just-talk">https://www.dianbanjiu.com/just-talk&lt;/a> 来访问这个页面，那目录名就需要命名为 &lt;code>just-talk&lt;/code>，下面我就以这个名字为例。&lt;/p>
&lt;p>在 just-talk 下创建 index.html 文件，并复制 public 目录下 404.html 里面的内容到 just-talk/index.html 中，接着你就可以根据自己的需求修改 just-talk/index.html 文件。&lt;/p>
&lt;p>创建 just-talk 还有另外一种途径，首先在 content 目录下创建 just-talk.md 文件，文件表头部分的填充内容与其他的文章类似，然后使用 &lt;code>hugo&lt;/code> 命令生成博客内容，这时候打开 public 目录，你可以看到出现了一个 just-talk 目录，将这个目录移动到 static 目录下，并将之前的 just-talk.md 文件删掉，之后修改 just-talk/index.html 里面的内容为你需要的即可。&lt;/p>
&lt;p>通过 &lt;code>hugo&lt;/code> 命令可以将 static 下的内容原封不动的复制到 public 目录，所以在你修改完 just-talk/index.html 之后，就可以直接使用 &lt;code>hugo&lt;/code> 生成页面。&lt;/p>
&lt;p>如果你需要将该页面添加到导航栏，可以参照配置文件中其他导航项的结构，将其添加进去即可，比如我的 toml 设置方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;一言&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;just-talk&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;just-talk&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以使用 &lt;code>hugo server -D&lt;/code> 预览一下效果。&lt;/p>
&lt;h3 id="little-tips">Little Tips&lt;/h3>
&lt;ol>
&lt;li>当你使用第二种方式创建完 just-talk 目录之后一定要删除 just-talk.md 文件，否则你即便修改了 just-talk/index.html 文件，修改结果也不会同步到你的博客中，因为 hugo 首先获取的是 just-talk.md 中的内容，只有在这个文件不存在时，才会使用 static 中的内容。&lt;/li>
&lt;li>public 目录中的内容只会修改，而不会删除。比如你之前创建了一篇名为 hello.md 的文章，使用 &lt;code>hugo&lt;/code> 命令生成博客内容后，即便你手动删除了 hello.md，并再次使用 &lt;code>hugo&lt;/code> 指令生成博客内容，你会发现你博客中依然会存在 hello 这么一篇文章。如果你想彻底删除它，除了删除 hello.md 外，还需要手动将 public 中对应的文件删除掉才行。所以建议可以先整个删除 public 目录，然后再使用 &lt;code>hugo&lt;/code> 命令生成博客内容。&lt;/li>
&lt;/ol>
&lt;h3 id="something-others">Something others&lt;/h3>
&lt;p>&lt;a href="https://golang.org/pkg/html/template/#hdr-Contexts">golang template&lt;/a>&lt;br>
&lt;a href="https://cn.vuejs.org/v2/guide/syntax.html">Vue 模板语法&lt;/a>&lt;br>
&lt;a href="https://www.runoob.com/">前端教程&lt;/a>&lt;/p></description></item><item><title>Hugo 创建多级菜单</title><link>https://www.dianbanjiu.com/post/hugo-%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95/</link><pubDate>Sat, 21 Dec 2019 15:05:02 +0800</pubDate><guid>https://www.dianbanjiu.com/post/hugo-%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95/</guid><description>&lt;p>hugo 的多级多级菜单相较于单级菜单，仅仅是多了一个 &lt;code>parent&lt;/code> 参数。&lt;/p>
&lt;p>下面是一个单级菜单的样式配置：&lt;br>
&lt;em>注：我使用的是 toml 格式的配置文件，其他类型的根据自己需求修改就可以了。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;主页&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;标签&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/tags/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这样可以创建一个最简单的单级菜单，显示效果就是我博客上现在显示的样子。&lt;/p>
&lt;p>下面是创建多级菜单的一个实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;多级菜单&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;多级菜单&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;菜单1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;多级菜单&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;菜单2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就可以创建一个两层菜单了，显示效果如下图所示。如果需要更多级，只需要在下面按照上面的规则继续添加即可。其中的 &lt;code>weight&lt;/code> 参数是可选的，它可以调整各个菜单在菜单栏中的相对顺序，数值越小的菜单越靠前。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I0y54MM.png" alt="多级菜单">&lt;/p>
&lt;p>需要注意的是，次级菜单的名称中必须有一些标识序号的选项，比如数字或者加减号。否则可能只会显示配置文件当中创建的最后一个次级菜单。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I0y54MM.png" alt="有数字标识1">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/bIUCMSr.png" alt="有数字标识2">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/x6hWT8q.png" alt="有加减号">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/05hBRKE.png" alt="无标识">&lt;/p></description></item></channel></rss>