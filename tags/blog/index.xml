<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on 点半九</title><link>https://www.dianbanjiu.com/tags/blog/</link><description>Recent content in Blog on 点半九</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 07 Jan 2021 00:33:09 +0800</lastBuildDate><atom:link href="https://www.dianbanjiu.com/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Github Pages 上部署 Hugo</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo/</link><pubDate>Thu, 07 Jan 2021 00:33:09 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo/</guid><description>&lt;p>其实在 github pages（以下简称 pages）上部署 hugo 的过程很简单，如何保证这些文件的迁移才是有点麻烦的事，不过最关键的问题其实在于你是否有足够的精力写下去。&lt;/p>
&lt;h2 id="初阶">初阶&lt;/h2>
&lt;h3 id="需要准备的一些东西">需要准备的一些东西&lt;/h3>
&lt;ul>
&lt;li>github 帐号&lt;/li>
&lt;li>hugo&lt;/li>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;h3 id="开始">开始&lt;/h3>
&lt;p>git 跟 hugo 这两个软件包应该在很多 Linux 发行版中都可以找到，可以直接使用系统对应的包管理进行安装即可。&lt;br>
安装完之后可以使用下面的命令进行确认&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用下面的命令创建站点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo new site mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Congratulations! Your new Hugo site is created in /home/xxx/demo/mysite.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Just a few more steps and you&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>re ready to go:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1. Download a theme into the same-named folder.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Choose a theme from https://themes.gohugo.io/ or
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create your own with the &lt;span style="color:#e6db74">&amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34;&lt;/span> command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. Perhaps you want to add some content. You can add single files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with &lt;span style="color:#e6db74">&amp;#34;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. Start the built-in live server via &lt;span style="color:#e6db74">&amp;#34;hugo server&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Visit https://gohugo.io/ &lt;span style="color:#66d9ef">for&lt;/span> quickstart guide and full documentation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入命令后基本上立刻就可以看到输出的 “congratulation &amp;hellip;”，这说明创建成功了。&lt;/p>
&lt;p>刚创建好的站点一般包含下面几个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── archetypes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── default.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── content
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── layouts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── themes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong> 如果没有指明操作路径，默认就是在 mysite 下。&lt;/p>
&lt;p>接下来去 &lt;a href="https://themes.gohugo.io/">hugo 主题站&lt;/a> 挑一个自己喜欢的主题，然后将其下载到 themes 目录中。下面以 hugo-theme-jane 为例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/xianmin/hugo-theme-jane themes/jane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 jane 目录下有一些已经比较完善的配置文件，像是 jane/exampleSite 下的 config.toml 以及 jane/archetypes/default.md，前者是用来配置站点的环境的，后者则是编写的文章的模板文件，一般这些文件里都会有比较详细的说明，根据它的说明进行修改就可以了。&lt;/p>
&lt;p>修改完成之后，就可以创建一篇文章来测试一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo new post/helloWorld.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这条命令将会在 mysite/content/post 下创建 helloWorld.md 这个文件，向这个文件里随便加点内容。然后使用下面的命令来预览一下效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开浏览器，输入 http://localhost:1313 就可以看到博客日后的样式了。&lt;/p>
&lt;p>如果预览之后觉得满意，就可以使用下面的命令将站点部署至 pages（请将下面的 Name 修改为你的 github 用户名），在开始之前，先在 github 上创建一个名为 Name.github.io 的 repo&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git remote add origin https://github.com/Name/Name.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;create blog site&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器输入 Name.github.io 就可以查看部署好的站点。&lt;/p>
&lt;h3 id="备份">备份&lt;/h3>
&lt;p>这样 hugo 站点基本就算是部署完成了，不过这些文件都是 hugo 编译好的一些静态文件，为了避免更换系统之后无法更新博客，你需要将 mysite 站点下除了 public 之外的目录都进行一个备份（之所以不备份 public 目录，是因为在执行 &lt;code>hugo&lt;/code> 命令之后都会重新生成 public 目录）。&lt;/p>
&lt;p>可以在 github 创建一个新的 repo 来存放这些文件。假设这个 repo 名为 Blog&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git submodule add https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;public/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;backup blog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的第二步使用 submodule 参数是因为 themes/jane 目录本身也是一个使用 git 进行版本控制的目录。而 public 虽然也是一个使用 git 进行版本控制的目录，但是因为它已经被添加到 .gitignore 文件当中，所以是不会被 git 索引的。&lt;/p>
&lt;p>如果你换了系统之类的，先将 Blog 这个 repo 克隆到本地，然后再将主题克隆一遍就可以像之前那样继续你的写作了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/Name/Blog.git &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd Blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进阶">进阶&lt;/h2>
&lt;p>初阶里面你需要写完文章之后手动构建一下，这种方式显然不够优雅，下面一起来康康怎么让构建的过程完全自动化。&lt;/p>
&lt;p>为了这个自动化的过程，你需要将网站的源码和 public 下面的内容放在 dianbanjiu.github.io 仓库的不同分支，不过要保证主分支必须放的是 public 里面的内容。我这里的分支对应关系是 master 分支存放 public，blog 分支存放源码，其中 master 为主分支。&lt;/p>
&lt;p>这个自动化的过程需要结合 github action 来完成。&lt;/p>
&lt;p>首先我们先来配置一下 action。&lt;/p>
&lt;ol>
&lt;li>去 dianbanjiu.github.io 仓库的 &lt;code>Settings-&amp;gt;Deploy keys&lt;/code> 添加一个新的 deploy key，这个 key 用你的 ssh 公钥即可，记得勾选 &lt;code>Allow write access&lt;/code>。&lt;/li>
&lt;li>在 &lt;code>Settings-&amp;gt;Secrets&lt;/code> 下添加一个新的 Secrets，这里填写你的 ssh 密钥，名字为了与之后的脚本对应就设置为 &lt;code>ACTIONS_DEPLOY_KEY&lt;/code>。&lt;/li>
&lt;li>在源码对应的分支下根目录下创建一个 &lt;code>.github&lt;/code> 的目录，在 &lt;code>.github&lt;/code> 下创建一个叫做 &lt;code>workflows&lt;/code> 的目录，&lt;code>workflows&lt;/code> 目录下创建一个 &lt;code>public.yml&lt;/code> 的文件。简单来说就是 github action 会从分支根目录下寻找 .github/workflows 目录，这个目录下存放的就是你的一些 action，如果你有多个任务可以创建多个 action，不过这里就不多说了。&lt;/li>
&lt;/ol>
&lt;p>public.yml 文件的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Publish Blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Disable quotePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git config --global core.quotePath false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --gc --minify --cleanDestinationDir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACTIONS_DEPLOY_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_BRANCH&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_DIR&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只介绍其中几个比较关键的点：&lt;/p>
&lt;ol>
&lt;li>branches 下指定的分支是你网站源码所在的分支，如果指定错误这个 action 就无法运行&lt;/li>
&lt;li>&lt;code>ACTIONS_DEPLOY_KEY&lt;/code> 的值对应于你之前在 &lt;code>Settings-&amp;gt;Secrets&lt;/code> 下添加的 &lt;code>Secrets&lt;/code>，确保两者一致即可&lt;/li>
&lt;li>&lt;code>PUBLISH_BRANCH&lt;/code> 对应于你的主分支&lt;/li>
&lt;li>&lt;code>PUBLISH_DIR&lt;/code> 对应于执行 hugo 命令后生成文件的位置，一般默认就是 &lt;code>./public&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>做完这些之后再将内容推送到 blog 分支的时候，action 就会自动执行构建过程，然后将构建好的博客内容推送到 master 分支&lt;/p>
&lt;h2 id="延伸阅读">延伸阅读&lt;/h2>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程&lt;/a>&lt;/p></description></item></channel></rss>