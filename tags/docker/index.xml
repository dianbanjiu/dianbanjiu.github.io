<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 点半九</title><link>https://www.dianbanjiu.com/tags/docker/</link><description>Recent content in Docker on 点半九</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 04 Jan 2022 20:31:56 +0800</lastBuildDate><atom:link href="https://www.dianbanjiu.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Gitlab Ci 构建 Docker 镜像</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-gitlab-ci-%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 04 Jan 2022 20:31:56 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-gitlab-ci-%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>注意：下面示例的 gitlab-runner 是直接装在物理机器上的，并且对应的镜像仓库使用的是 http 协议&lt;/p>
&lt;p>1、首先在安装 gitlab runner 的机器上安装 docker&lt;/p>
&lt;p>2、创建 &lt;code>/etc/docker/daemon.json&lt;/code>，内容如下&lt;br>
如果你的 gitlab 是使用的 HTTPS 协议，可以跳过这一步&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;insecure-registries&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;registry_addr&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;0.0.0.0&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3、重启 docker&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>systemctl restart docker.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4、为项目注册 gitlab-runner，其中执行者选择 &lt;code>docker&lt;/code>&lt;/p>
&lt;p>5、修改项目对应 gitlab-runner 的配置文件，默认情况为 &lt;code>/etc/gitlab-runner/config.toml&lt;/code>，在项目对应 runner 的 &lt;code>volumes&lt;/code> 后新增 &lt;code>&amp;quot;/var/run/docker.sock:/var/run/docker.sock&amp;quot;&lt;/code>的映射&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">runners&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://gitlab.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> = &lt;span style="color:#a6e22e">TOKEN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">executor&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">docker&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tls_verify&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;docker:20.10.12-dind&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">privileged&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disable_cache&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">volumes&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;/cache&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">s3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">gcs&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>6、更新 &lt;code>.gitlab-ci.yml&lt;/code>，大体内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker_build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">job_docker_build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">docker_build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker:20.10.12-dind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker login -u $REGISTRY_USER -p $REGISTER_PASSWORD $REGISTRY_ADDR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker build -t $REGISTRY_ADDR/test/hello:latest .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker push $REGISTRY_ADDR/test/hello:latest&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 &lt;code>$REGISTRY_USER&lt;/code>、 &lt;code>$REGISTER_PASSWORD&lt;/code>、 &lt;code>$REGISTRY_ADDR&lt;/code> 是定义在对应仓库的环境变量，分别代表镜像仓库的用户名、密码以及镜像仓库的地址。其中地址是不包含协议部分的，一般为： &lt;code>my.registry.com&lt;/code>&lt;/p>
&lt;p>待 gitlab-runner 的流水线执行完成之后，你应该就可以在镜像仓库看到刚刚构建好的镜像了&lt;/p></description></item><item><title>利用 Swagger UI 生成漂亮的接口文档</title><link>https://www.dianbanjiu.com/post/%E5%88%A9%E7%94%A8-swagger-ui-%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link><pubDate>Sun, 08 Aug 2021 13:56:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%88%A9%E7%94%A8-swagger-ui-%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid><description>&lt;p>最近在跟前端进行对接的时候，规定了后端每个接口都必须要写接口文档，并且必须生成对应的 .json/.yaml 文件，这样他们就可以通过接口文件直接生成对应的 ts 文件，能够准确的进行接口参数的对接。这一部分现在我已经通过 Gitlab CI + 文件服务器的方式实现了。&lt;/p>
&lt;p>但是作为后端，有时候想看看现在有什么接口，接口里有什么参数，之前只能通过看代码，现在有了接口文件，那当然是要搞个花里胡哨的东西来展示一下了。既然要看 Swagger 文档，最简单且有效的工具当然就是 Swagger 官方提供的 Swagger UI 了。&lt;/p>
&lt;p>下面就来看看怎么来整一个 Swagger UI 玩玩。&lt;/p>
&lt;h2 id="安装">&lt;strong>安装&lt;/strong>&lt;/h2>
&lt;p>我们下面使用 Docker 来安装 Swagger UI。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker pull swaggerapi/swaggerui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动">&lt;strong>启动&lt;/strong>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run -d -p 80:8080 -v ~/swagger:/usr/share/nginx/html/swagger --name swagger-ui swaggerapi/swagger-ui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>d&lt;/code> 会让该容器以守护进程的形式在后台运行&lt;/li>
&lt;li>&lt;code>p&lt;/code> 映射容器的 8080 端口到本机的 80 端口&lt;/li>
&lt;li>&lt;code>v&lt;/code> 挂载本机的 &lt;code>~/swagger&lt;/code> 目录到容器的 &lt;code>/usr/share/nginx/html/swagger&lt;/code>&lt;/li>
&lt;li>&lt;code>-name&lt;/code> 设定该容器的名字，方便以后通过名字对容器进行一些操作&lt;/li>
&lt;/ul>
&lt;p>启动完成之后，你就可以将已有的 swagger 文档（.yaml、.json 文件）放到 &lt;code>~/swagger&lt;/code> 目录下（假设该目录下已经有了一个名为 swagger.json 的文件），打开浏览器，访问 &lt;code>http://ip&lt;/code> 页面，在搜索框输入 &lt;code>swagger/swagger.json&lt;/code> 就可以查看你的接口文档了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rR7fnLm.png" alt="https://i.imgur.com/rR7fnLm.png">&lt;/p>
&lt;h2 id="说明">&lt;strong>说明&lt;/strong>&lt;/h2>
&lt;p>下面是 Swagger UI 容器中 nginx 的配置文件，在容器中的 &lt;code>/etc/nginx/nginx.conf&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>worker_processes 1;
events {
worker_connections 1024;
}
http {
include mime.types;
default_type application/octet-stream;
sendfile on;
keepalive_timeout 65;
gzip on;
gzip_static on;
gzip_disable &amp;#34;msie6&amp;#34;;
gzip_vary on;
gzip_types text/plain text/css application/javascript;
map $request_method $access_control_max_age {
OPTIONS 1728000; # 20 days
}
server_tokens off; # Hide Nginx version
server {
listen 8080;
server_name localhost;
index index.html index.htm;
location / {
absolute_redirect off;
alias /usr/share/nginx/html/;
expires 1d;
location ~* \.(?:json|yml|yaml)$ {
#SWAGGER_ROOT
expires -1;
include cors.conf;
}
include cors.conf;
}
}
}
&lt;/code>&lt;/pre>&lt;p>Swagger UI 的容器中启动了一个 nginx 服务，通过 nginx 来指定你需要访问的接口文档，默认情况下，该容器中 nginx 监听的是 8080 端口。&lt;/p>
&lt;p>可以看到，当你访问 http://ip:80/ 时，它默认访问的是 &lt;code>/usr/share/nginx/html/index.html&lt;/code> ，当你在搜索框中输入一些文档名时，它会直接在 &lt;code>/usr/share/nginx/html/&lt;/code> 下找，找到了就会展示出来，找不到就会直接报错。所以上面才需要将本机存放接口文档的目录挂载到 &lt;code>/usr/share/nginx/html/&lt;/code> 下。&lt;/p>
&lt;p>当然，无论是端口还是文档的存放位置，你都是可以通过修改镜像/容器的方式来更改。&lt;/p></description></item><item><title>Gitlab Runner 运行报错（1）</title><link>https://www.dianbanjiu.com/post/gitlab-runner-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%991/</link><pubDate>Mon, 28 Jun 2021 21:42:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/gitlab-runner-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%991/</guid><description>&lt;blockquote>
&lt;p>今天在《也谈钱》的公众号看到一个很有意思的观点：&lt;/p>
&lt;p>你所有的工作都包含两部分：你可以带走的和带不走的，如果你只注意自己带不走的部分，那你就是在为老板工作，注定会很累，如果你将注意力放在你可以提炼带走的部分，那你就是在为自己工作&lt;/p>&lt;/blockquote>
&lt;h2 id="问题描述及解决方案">问题描述及解决方案&lt;/h2>
&lt;p>今天在给新项目添加了 Runner 之后，出现了打包失败的情况，下面是基本的情况以及解决方案。&lt;/p>
&lt;p>项目情况：项目使用 &lt;code>gitlab-runner register&lt;/code> 添加的 Runner，执行者为 Docker，使用的是自定义的 node 镜像，镜像名称为 &lt;code>node:v12&lt;/code>。&lt;/p>
&lt;p>在将代码提交到 gitlab 之后，自动触发 CI，但是 CI 提示下面的报错：&lt;/p>
&lt;pre tabindex="0">&lt;code>Running with gitlab-runner 13.0.0 (c127439c)
on xxx ddd T8Hqqyzz
Preparing the &amp;#34;docker&amp;#34; executor
00:07
Using Docker executor with image node:v12 ...
Pulling docker image node:v12 ...
ERROR: Job failed: Error response from daemon: manifest for node:v12 not found: manifest unknown: manifest unknown (docker.go:198:3s)
&lt;/code>&lt;/pre>&lt;p>可以看到，上面的报错是出现在拉取 Docker 镜像的过程中，提示 Docker 找不到名为 &lt;code>node:v12&lt;/code> 的镜像。但是我在运行 Runner 的机器上已经构建好了 node:v12 的镜像，为什么还是会拉取失败呢？&lt;/p>
&lt;p>其实是因为 Gitlab Runner 的 Docker 执行者默认是直接从 Docker Hub 拉取你指定的镜像，即使你本地已经有了需要的镜像，所以当它在 Docker Hub 找不到 &lt;code>node:v12&lt;/code> 的镜像时，就会出现上面的报错。&lt;/p>
&lt;p>要解决这个问题也很简单，就是在 gitlab runner 的配置文件中添加 &lt;code>pull_policy = &amp;quot;if-not-present&amp;quot;&lt;/code> 的参数，添加方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">runners&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;runner test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;http://www.gitlab.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;T9hppyxxbwN_PZNen1_o&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">executor&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">custom_build_dir&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">s3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">gcs&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">docker&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tls_verify&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;node:v12&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">privileged&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disable_entrypoint_overwrite&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">oom_kill_disable&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disable_cache&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">volumes&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;/cache&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 在下面设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pull_policy&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;if-not-present&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">shm_size&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关于-pull_policy-参数">关于 &lt;code>pull_policy&lt;/code> 参数&lt;/h2>
&lt;p>&lt;code>pull_policy&lt;/code> 参数是用来指定当你使用 Docker/Docker machine 作为执行者时镜像的拉取策略。该参数共有三个可选项，你可以设置零个或者多个选项作为该参数的值。&lt;/p>
&lt;ul>
&lt;li>never：这个选项意味着仅使用本地的 Docker 镜像，任何你需要的镜像都必须先手动拉取到本地，否则在运行 CI 的时候就会出现下面的报错&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Pulling docker image node:latest ...
ERROR: Build failed: Error: image local_image:latest not found
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>if-not-present：这个选项会先在本地检查是否有指定的镜像，没有的话会在 Docker Hub 拉取。如果你想避免从 Docker Hub 拉取镜像的时间，又有使用自定义镜像的需求，可以使用该选项。&lt;/li>
&lt;li>always：&lt;code>pull_policy&lt;/code> 的默认值，总是从 Docker Hub 拉取镜像。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>参数的设置方式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不设置：在不添加 &lt;code>pull_policy&lt;/code> 字段的情况下，&lt;code>pull_policy&lt;/code> 默认为 always。&lt;/li>
&lt;li>单值设置： &lt;code>pull_policy = &amp;quot;if-not-present&amp;quot;&lt;/code>。&lt;/li>
&lt;li>多值设置： &lt;code>pull_policy = [&amp;quot;always&amp;quot;, &amp;quot;if-not-present&amp;quot;]&lt;/code>（暂未遇到过具体的使用场景）。&lt;/li>
&lt;/ul></description></item></channel></rss>