<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 点半九</title><link>https://www.dianbanjiu.com/post/</link><description>Recent content in Posts on 点半九</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 12 Jun 2025 21:33:04 +0800</lastBuildDate><atom:link href="https://www.dianbanjiu.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows硬件监控工具——TrafficMonitor</title><link>https://www.dianbanjiu.com/post/windows%E7%A1%AC%E4%BB%B6%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7trafficmonitor/</link><pubDate>Thu, 12 Jun 2025 21:33:04 +0800</pubDate><guid>https://www.dianbanjiu.com/post/windows%E7%A1%AC%E4%BB%B6%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7trafficmonitor/</guid><description>&lt;p>平时在 Windows 下看电脑资源占用情况的时候，经常需要打开任务管理器切来切去，感觉有点麻烦。最近在 V2EX 和 Reddit 的 desktop 社区找灵感的时候，发现了 &lt;a href="https://github.com/zhongyang219/TrafficMonitor">TrafficMonitor&lt;/a> 这个工具&lt;/p>
&lt;ul>
&lt;li>它可以在悬浮窗和任务栏展示当前系统资源的占用情况&lt;/li>
&lt;li>内置了网卡、CPU、显卡、内存和硬盘的监控&lt;/li>
&lt;li>悬浮窗支持换肤&lt;/li>
&lt;li>支持通过插件扩展更多功能&lt;/li>
&lt;/ul>
&lt;p>因为平时不喜欢使用悬浮窗，所以现在仅启用了任务栏模式，展示了上传下载、CPU、内存使用率，显卡使用率和显卡温度。显示效果是这样子的&lt;br>
&lt;img src="https://www.dianbanjiu.com/img/trafficmonitor-on-taskbar.png" alt="实际效果">&lt;/p>
&lt;h3 id="关于安装">关于安装&lt;/h3>
&lt;p>可以选择直接从项目的 &lt;a href="https://github.com/zhongyang219/TrafficMonitor/releases/latest">Github release&lt;/a> 进行下载&lt;br>
也可以选择通过包管理器，比如 scoop 进行安装（scoop install trafficmonitor）&lt;/p>
&lt;h3 id="关于如何启用">关于如何启用&lt;/h3>
&lt;p>打开软件之后，默认是以主窗口，也就是悬浮窗的方式进行展示的，如果需要启用任务栏模式，需要在右下角的任务图标中，在 TrafficMonitor 的图标上点击右键，并选中 “&lt;strong>显示任务栏窗口&lt;/strong>”&lt;/p>
&lt;h3 id="关于如何启用显卡监控">关于如何启用显卡监控&lt;/h3>
&lt;p>默认情况下工具只会显示网速、CPU、内存，如果需要添加显卡的支持，需要在工具的 &lt;strong>设置（或者叫选项）-&amp;gt;常规设置-&amp;gt;硬件监控&lt;/strong>中启用更多的监控选项&lt;br>
&lt;img src="https://www.dianbanjiu.com/img/trafficmonitor-options.png" alt="启用更多硬件设置">&lt;/p></description></item><item><title>Windows开机启动脚本</title><link>https://www.dianbanjiu.com/post/windows%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</link><pubDate>Sun, 07 Jul 2024 13:32:04 +0800</pubDate><guid>https://www.dianbanjiu.com/post/windows%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</guid><description>&lt;p>目前手上有一台主力设备是 Windows，每次开机都需要手动启动一些服务，虽然之前也有写过一个脚本用来一键启动，但是还是有点麻烦，所以研究了一下如何在开机时自启动&lt;/p>
&lt;p>我的脚本是通过 PowerShell 写的，所以先将自己的脚本封装到一个 .ps1 结尾的文件中。接着&lt;strong>将文件的打开方式设置为 PowerShell&lt;/strong>&lt;br>
注意：如果你之前有设置过 ps1 文件为其他的打开方式，比如记事本，那在下面的操作完成，电脑重启之后，默认就会通过记事本打开脚本，而不是直接运行。&lt;/p>
&lt;p>具体操作，在文件上右键，选择打开方式，找到并选择 pwsh.exe，比如我是通过 scoop 安装的 PowerShell，对应的可执行文件的位置是在 &lt;code>$HOME\scoop\shims\pwsh.exe&lt;/code>&lt;/p>
&lt;p>将脚本放在 &lt;code>$HOME\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code> 下即可&lt;/p>
&lt;p>这个自启操作也适用于其他非脚本的应用程序，不过操作更简单，直接创建一个应用的快捷方式，然后将快捷方式放到 &lt;code>$HOME\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code> 下即可&lt;/p>
&lt;p>下面是一个关于脚本的示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-pwsh" data-lang="pwsh">&lt;span style="display:flex;">&lt;span>$ErrorActionPreference=&lt;span style="color:#e6db74">&amp;#39;SilentlyContinue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get-Process -Name hello | Stop-Process
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Start-Process -WindowStyle Hidden -FilePath hello &lt;span style="color:#e6db74">&amp;#34;-c &lt;/span>$HOME&lt;span style="color:#e6db74">/hello/conf.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>ErrorActionPreference&lt;/code> 变量是设置脚本如何响应非终止错误，SilentlyContine 代表不显示错误并在不会中断的情况下继续执行，其他可选参数可自行参考pwsh文档&lt;/li>
&lt;li>&lt;code>Get-Process -Name hello | Stop-Process&lt;/code> 尝试获取名字为 hello 的进程，并通过管道传递给 Stop-Process 进程结束它&lt;/li>
&lt;li>&lt;code>Start-Process&lt;/code> 用来启动一个新的进程
&lt;ul>
&lt;li>&lt;code>WindowStyle Hidden&lt;/code> 隐藏窗口执行，即作为一个后台进程启动。默认情况下会以一个终端窗口启动执行脚本，执行完成之后也不会自动关闭窗口&lt;/li>
&lt;li>&lt;code>FilePath&lt;/code> 可以指定可执行文件的路径，如果此命令在环境变量中，可以省略前面的路径信息，直接指定命令名称即可&lt;/li>
&lt;li>如果命令本身还有一些其他的启动参数，可以跟在最后，如果是带空格的参数，可以用双引号括起来，否则脚本会将其识别为 Start-Process 的参数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Windows配置nginx</title><link>https://www.dianbanjiu.com/post/windows%E9%85%8D%E7%BD%AEnginx/</link><pubDate>Thu, 13 Jun 2024 00:45:35 +0800</pubDate><guid>https://www.dianbanjiu.com/post/windows%E9%85%8D%E7%BD%AEnginx/</guid><description>&lt;p>1、安装 nginx&lt;br>
我是通过 scoop 安装的 nginx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>scoop update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scoop install nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2、测试 nginx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>nginx -p &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$env&lt;span style="color:#e6db74">:NGINX_HOME&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令执行成功之后，在浏览器输入 http://127.0.0.1:80 就可以看到 nginx 的输出信息了&lt;/p>
&lt;p>3、以后台进程的方式启动 nginx&lt;br>
通过上面的命令启动 nginx 后可以发现，nginx 进程会占用当前的终端，可以通过 pwsh 的命令将 nginx 作为后台进程启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>start -WindowStyle Hidden nginx -ArgumentList &lt;span style="color:#e6db74">&amp;#34;-p &lt;/span>$env&lt;span style="color:#e6db74">:NGINX_HOME&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为是通过 scoop 安装的，对应的配置文件也是位于 scoop 的目录下，所以启动 nginx 的时候也需要通过&lt;code>-p&lt;/code>指定配置对应的目录&lt;/p>
&lt;p>nginx 的配置目录默认位于 &lt;code>$HOME\scoop\persist\nginx&lt;/code>，如果需要增加新的 server 配置，也需要配置在这个目录下&lt;/p></description></item><item><title>搭建memos</title><link>https://www.dianbanjiu.com/post/%E6%90%AD%E5%BB%BAmemos/</link><pubDate>Thu, 22 Feb 2024 00:36:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E6%90%AD%E5%BB%BAmemos/</guid><description>&lt;p>最近看到了一个比较有意思的服务 Memos，支持自己部署，所以我也来搞了一个玩玩，下面是大概的流程&lt;/p>
&lt;h2 id="1安装-docker">1、安装 docker&lt;/h2>
&lt;p>我服务器使用的是 Centos8，如果你使用的是其他发行版可以参考 &lt;a href="https://docs.docker.com/engine/install/">Docker 官方的说明文档&lt;/a>&lt;/p>
&lt;p>首先卸载已经安装的旧 docker&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo yum remove docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-client &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-client-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-common &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-latest-logrotate &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-logrotate &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> docker-engine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 yum-utils 包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo yum install -y yum-utils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加 docker 软件源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装最新版的 docker&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo yum install docker-ce
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 docker，并将它设置为开机自启&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl start docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl enable docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>确认 docker 启动成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo docker info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2安装-memos">2、安装 Memos&lt;/h2>
&lt;p>官网提供了 docker 和 docker-compose 的部署方式，因为只有一个服务，所以我选择直接使用 docker 部署&lt;/p>
&lt;p>&lt;a href="https://www.usememos.com/docs/install/self-hosting">官方文档链接&lt;/a>&lt;/p>
&lt;p>先创建一个目录用来存放 Memos 的数据文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir /opt/memos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 Memos&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -d &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --init &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --name memos &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --publish 5230:5230 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --volume /opt/memos/:/var/opt/memos &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> neosmemo/memos:stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面命令执行完之后 Memos 就跑起来了，可以使用 http://ip:5230 来测试一下&lt;/p>
&lt;h2 id="3添加域名解析">3、添加域名解析&lt;/h2>
&lt;p>添加一条 A 记录，如 memos.dianbanjiu.com 解析到自己服务器的公网 IP 上&lt;/p>
&lt;ol>
&lt;li>在 cloudflare 选择自己的站点&lt;/li>
&lt;li>在侧边栏选择 DNS-&amp;gt;记录&lt;/li>
&lt;li>选择添加记录按钮，添加一条 A 记录（类型选择 A，名称输入 memos，IPV4 地址填自己的服务器公网 IP）&lt;/li>
&lt;/ol>
&lt;p>后续我会把服务改为 https 访问，而我的域名是托管在 cloudflare 上的，所以可以直接用 cloudflare 生成一份 15 年有效期的证书&lt;/p>
&lt;ol>
&lt;li>在 cloudflare 选择自己的站点&lt;/li>
&lt;li>在侧边栏选择 SSL/TLS-&amp;gt;源服务器&lt;/li>
&lt;li>点击创建证书按钮，根据提示创建即可。推荐生成 pem 格式的私钥&lt;/li>
&lt;/ol>
&lt;p>将证书保存为 dianbanjiu.com.pem，将私钥保存为 dianbanjiu.com.key&lt;/p>
&lt;p>将生成的两个文件上传至服务器的 /etc/nginx/cert 下&lt;/p>
&lt;h2 id="4安装-nginx">4、安装 nginx&lt;/h2>
&lt;p>官方软件源里的 nginx 版本可能比较老，可以选择安装 nginx 软件源，以安装最新的 nginx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rpm -ivh http://nginx.org/packages/centos/8/x86_64/RPMS/nginx-1.24.0-1.el8.ngx.x86_64.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的命令会直接安装好 1.24.0 版本的 nginx，这也是当前最新版本&lt;/p>
&lt;p>启动 nginx 并设置开机自启&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl start nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl enable nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器直接访问 http://ip 应该就可以看到 nginx 的输出了&lt;/p>
&lt;p>新增 Memos 的 nginx 配置，在 /etc/nginx/conf.d 中新增一个 memos.dianbanjiu.com.conf 文件。文件内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">443&lt;/span> &lt;span style="color:#e6db74">ssl&lt;/span> &lt;span style="color:#e6db74">http2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">memos.dianbanjiu.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ssl_certificate&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/cert/dianbanjiu.com.pem&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ssl_certificate_key&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/cert/dianbanjiu.com.key&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ssl_prefer_server_ciphers&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">access_log&lt;/span> &lt;span style="color:#e6db74">/var/log/nginx/memos.access.log&lt;/span> &lt;span style="color:#e6db74">main&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">location&lt;/span> &lt;span style="color:#e6db74">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_pass&lt;/span> &lt;span style="color:#e6db74">http://127.0.0.1:5230&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">Host&lt;/span> $host;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Real-IP&lt;/span> $remote_addr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_set_header&lt;/span> &lt;span style="color:#e6db74">X-Forwarded-For&lt;/span> $proxy_add_x_forwarded_for;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">memos.dianbanjiu.com&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rewrite&lt;/span> &lt;span style="color:#e6db74">^/(.*)&lt;/span>$ &lt;span style="color:#e6db74">https://memos.dianbanjiu.com/&lt;/span>$1 &lt;span style="color:#e6db74">permanent&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新加载 nginx 配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>nginx -t &lt;span style="color:#75715e">#检查配置文件是否有误&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nginx -s reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接通过浏览器访问 &lt;a href="https://memos.dianbanjiu.com">https://memos.dianbanjiu.com&lt;/a> 确认服务是否安装成功&lt;/p>
&lt;p>如果你是在国内服务器上搭建的 Memos，服务在短暂能访问之后就出现再也无法访问的情况，有可能是因为域名未备案导致被服务商直接拦截了，这种情况下要么去备案并自己修改页面在最下面加上备案信息，要么就只能通过 ip 访问。&lt;/p></description></item><item><title>在vscode中通过文件的形式管理接口</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8vscode%E4%B8%AD%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E7%9A%84%E5%BD%A2%E5%BC%8F%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3/</link><pubDate>Sat, 02 Dec 2023 19:06:33 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8vscode%E4%B8%AD%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E7%9A%84%E5%BD%A2%E5%BC%8F%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>我之前一直使用 postman 来管理接口，postman 功能强大，容易上手，但是随着版本的更新，postman 逐渐发展为了一个在线服务，虽然能够让不同机器间切换时也能有一个统一的体验，但是因为网络原因，特别是在公司的网络策略面前，纯在线服务经常会出现接口无法从服务器上拉取下来的情况。所以我转而开始寻找一些对本地服务有更好支持的接口管理工具，在尝试过多个工具之后，最终选择了 httpyac，目前还在初期的磨合阶段，不过 httpyac 已经基本能满足我一个开发人员对于接口管理&amp;amp;测试方面的所有基础需求了&lt;/p>
&lt;p>httpyac 支持 vscode 插件(扩展商店搜索 &lt;code>anweber.vscode-httpyac&lt;/code> 安装即可)，通过 .http/.rest 的形式来管理接口文件，这也就意味着你可以把接口文件随项目一起进行版本管理，或者将所有的接口汇总在一个仓库统一管理，也可以选择自己喜欢&amp;amp;可用的云服务进行托管，这样就不会出现 postman 那种拉不到接口的情况出现了&lt;/p>
&lt;p>下面是 httpyac 的一些简单的使用示例，也是我在日常使用中最主要的几个点&lt;/p>
&lt;h2 id="发起请求">发起请求&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">### 获取用户信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">GET&lt;/span> https://www.dianbanjiu.com/user/info?name=John &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>### 新增用户
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>POST https://www.dianbanjiu.com/user HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Type: application/json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;age&amp;#34;: 30,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;phone&amp;#34;: &amp;#34;12345678901&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以通过在每行的开头通过 &lt;code>#&lt;/code> 或者 &lt;code>//&lt;/code> 来添加单行注释，也支持通过 &lt;code>/* */&lt;/code> 来添加多行注释&lt;/p>
&lt;h2 id="定义变量">定义变量&lt;/h2>
&lt;p>httpyac 支持多种定义变量的形式&lt;/p>
&lt;ol>
&lt;li>在接口文件内定义变量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">@host=https://www.dianbanjiu.com
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">@user=John
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">@pass=123456
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>在项目根目录下通过 .env.xx 定义环境文件，xx 为环境名&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>// .env.dev
host=https://www.dianbanjiu.com
user=John
pass=123456
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>在 .vscode/settings.json 中定义环境变量，其中 &lt;code>$share&lt;/code> 是所有环境的共享变量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;httpyac.environmentVariables&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;$shared&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;dev&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;host&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://www.dianbanjiu.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;pass&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;prd&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;host&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://www.dianbanjiu.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;pass&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义好变量之后，在接口文件中通过双大括号即可引用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">GET {{host}}/user/info?name={{name}}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我一般是第1、3结合使用。这里有一个语法糖，如果你定义了 host 变量，在写接口的时候可以忽略前置的域名，直接写路由，如果你在环境变量中域名使用的是其他名字，也可以在接口文件中重新赋值 host 变量来使用这个语法糖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"># 环境文件中定义了 dian-api=https://www.dianbanjiu.com
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">@host={{dian-api}}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">GET /user/info?name={{name}}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="脚本命令">脚本命令&lt;/h2>
&lt;p>httpyac 支持在接口文件中自定义脚本，可以实现类似 postman 的脚本功能，这也是我之所以选择 httpyac 的最主要原因&lt;/p>
&lt;p>比如很多接口都需要进行签名，你可以在脚本中使用 nodejs 的 crypto 包来完成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">{{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> //pre request script
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const crypto = require(&amp;#39;crypto&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const date = new Date();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const signatureBase64 = crypto.createHmac(&amp;#39;sha256&amp;#39;, &amp;#39;secret&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> .update(`${request.method}\u2028${request.url}\u2028${date.getTime()}`).digest(&amp;#34;base64&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> exports.authDate = date.toUTCString();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> exports.authentcation = `Basic ${signatureBase64}`;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">GET&lt;/span> https://www.dianbanjiu.com/user/info?name={{name}} &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">{{authDate}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">{{authentcation}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你的接口需要统一设置请求头也可以通过脚本实现，&lt;code>{{+&lt;/code> 开头的脚本会在所有请求之前执行，请求的具体执行流程可以参照下图&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">{{+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> //pre request script
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const crypto = require(&amp;#39;crypto&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const date = new Date();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const signatureBase64 = crypto.createHmac(&amp;#39;sha256&amp;#39;, &amp;#39;secret&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> .update(`${request.method}\u2028${request.url}\u2028${date.getTime()}`).digest(&amp;#34;base64&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> request.headers.authDate = date.toUTCString();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> request.headers.authentcation = `Basic ${signatureBase64}`;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">GET&lt;/span> https://www.dianbanjiu.com/user/info?name={{name}} &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://httpyac.github.io/assets/scripting.8a515e08.svg" alt="httpyac接口执行流程">&lt;/p>
&lt;p>一些需要把整个请求体都作为加密字段的接口，也可以通过脚本实现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">{{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const crypto = require(&amp;#39;crypto&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const date = new Date();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> const signatureBase64 = crypto.createHmac(&amp;#39;sha256&amp;#39;, &amp;#39;secret&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> .update(request.body).digest(&amp;#34;base64&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> exports.authDate = date.toUTCString();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010"> exports.authentcation = `Basic ${signatureBase64}`;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">GET&lt;/span> https://www.dianbanjiu.com/user/info?name={{name}}&amp;amp;sign={{authentcation}}&amp;amp;time={{authDate}} &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>目前还有一个不大不小的痛点，就是 httpyac 尚不支持导入 curl 或者 postman 导出的文件来转换为 .http/.rest 文件，需要自己一个个接口再从 postman 换过来也是一个不小的工作量&lt;/p>
&lt;p>至此我在 postman 中会用的 99% 的功能 httpyac 都提供了，此外 httpyac 也提供了断言、hook、debug 等一些其他的高级功能，但是我都未使用过，这里就不多说明了，具体的说明可以参照 &lt;a href="https://httpyac.github.io/">httpyac官网&lt;/a> 了解。还有一些语法糖官网其实也没有说明的很清楚，可能需要去 &lt;a href="https://github.com/AnWeber/vscode-httpyac">httpyac代码仓库的issue&lt;/a> 自行搜索了&lt;/p></description></item><item><title>Vscode中一些好用的小tips</title><link>https://www.dianbanjiu.com/post/vscode%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8Ftips/</link><pubDate>Thu, 23 Nov 2023 17:07:40 +0800</pubDate><guid>https://www.dianbanjiu.com/post/vscode%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8Ftips/</guid><description>&lt;p>vscode 目前是我的主力编辑器，日常的一些文字记录/开发都是通过他来完成的。此文会记录一些能够帮助我更舒服使用 vscode 的内容，可能会包含插件、设置、快捷方式等各方面，后续会根据使用情况逐渐进行补全&lt;/p>
&lt;p>&lt;strong>1、补全注释中的方法名&lt;/strong>&lt;br>
go 的注释风格是以方法名开头的，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Hello 打印欢迎信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Hello&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是每次手动拼写每个函数名也还是挺麻烦的，最近发现可以先在函数上面打出 &lt;code>//&lt;/code>，然后按下 &lt;code>ctrl+space&lt;/code>，补全提示的第一个就是当前的方法名&lt;/p>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/vscode%E8%A1%A5%E5%85%A8%E6%96%B9%E6%B3%95%E5%90%8D.gif" alt="vscode补全方法名">&lt;/p>
&lt;p>&lt;code>ctrl+space&lt;/code> 是 vscode 默认的 &lt;code>触发建议&lt;/code> 的快捷键&lt;/p>
&lt;p>&lt;strong>2、补全结构体的tag&lt;/strong>&lt;br>
写 go 的结构体时，经常需要给结构体加上 tag，目前 vscode-go 是按照固定格式直接一次性给你生成好，但是有时候我想要的并不是模板中设定的，这时候推荐安装 &lt;code>maxnatchanon.go-struct-tag-autogen&lt;/code> 扩展，你可以先提前设定好你可能用到的 tag 以及样式，比如我的设置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;editor.quickSuggestions&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;other&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;on&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comments&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;off&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;strings&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;on&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;goStructTagAutogen.tagSuggestion&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;json&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cases&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;camel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;snake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;uppersnake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pascal&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;none&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;omitempty&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;form&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cases&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;camel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;snake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;uppersnake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pascal&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;none&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;omitempty&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;bson&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cases&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;snake&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;omitempty&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;binding&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;required&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在写完结构体的一个字段之后，如果我想生成名为 form 的 tag，在字段的最后输入 `f 就能看到一个推荐的补全列表，在其中选择需要的即可&lt;/p>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/vscode%E8%A1%A5%E5%85%A8%E7%BB%93%E6%9E%84%E4%BD%93tag.gif" alt="vscode补全结构体tag">&lt;/p></description></item><item><title>十一太湖骑行</title><link>https://www.dianbanjiu.com/post/%E5%8D%81%E4%B8%80%E5%A4%AA%E6%B9%96%E9%AA%91%E8%A1%8C/</link><pubDate>Tue, 21 Nov 2023 11:02:41 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%8D%81%E4%B8%80%E5%A4%AA%E6%B9%96%E9%AA%91%E8%A1%8C/</guid><description>&lt;p>2023 年的国庆节完成了为期三天的上海到苏州的环太湖骑行 &lt;del>，为什么现在才发出来，当然不是因为太懒了&lt;/del>&lt;/p>
&lt;p>好消息是，虽然屁股很痛，但是最终我还是成功完成了这趟骑行&lt;/p>
&lt;p>坏消息是，屁股真的很痛，这场骑行还是有不少可以学习的东西的&lt;/p>
&lt;p>这趟为期三天，骑行里程 457 公里（167+170+120），是我迄今为止最长最久的一次骑行。不过因为我太懒了，很多东西都没有提前准备好，不过也算是为下次的骑行积攒了一些小小的经验&lt;/p>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/%E9%AA%91%E8%A1%8C%E7%9A%84%E5%8D%81%E5%AD%97%E8%B7%AF%E5%8F%A3.jpeg" alt="">&lt;/p>
&lt;ol>
&lt;li>自行车：这趟旅程我骑的是一辆山地车，理论上骑什么车都不影响这段行程，但是这一路上公路车是真的快啊 &lt;del>流下了羡慕的泪水&lt;/del>。骑行之前最好检查一下车辆状况，提前上好链条油、给车胎补足气，有必要的话也可以找附近的车店做个保养&lt;/li>
&lt;li>头盔：虽然长途骑行速度不是一般不会很快，但是毕竟全程都在马路边上，头盔一定要带好&lt;/li>
&lt;li>手套：如果有再来一次的机会，我可能不会再戴手套了，当然可能是我的姿势或者选的手套有问题，这一路上手套给我手的压迫着实不小，所以第二还是第三天我就直接不戴手套了&lt;/li>
&lt;li>魔术头巾*2：在旅程中主要是用来遮阳、吸汗的&lt;/li>
&lt;li>速干短袖+冰袖/长袖*2：如果是穿短袖的话最好再带上冰袖，不然胳膊真的可能会晒得惨不忍睹，我这次是带了一件短袖一件长袖，短袖是迪卡侬的徒步短袖，长袖是一件比较轻薄的骑行长袖，每晚都会把当天的衣服洗一下，如果第二天还没干就穿上另外一件&lt;/li>
&lt;li>骑行裤/速干裤+骑行内裤（+腿套）+防晒：我这次骑行就是只穿了速干裤，第一天一共骑了160公里左右，从80公里之后+后面的两天屁股一直很痛，痛到没有一个姿势能好好坐在坐垫上，骑行裤/骑行短裤可以有效帮你缓解这种情况（也可以上稍微软一点但是透气的坐垫）&lt;/li>
&lt;li>内裤/袜子*n+穿一双鞋：如果选择骑行裤/骑行内裤，普通内裤就可以不带了。袜子就懒得洗了，直接带了三双&lt;/li>
&lt;li>骑行背包/尾包：如果是选择背包的话，最好是选择专门的骑行/运动背包，有专门背负系统的那种，不然背部很容易积热积汗，我就是背了普通背包，结果一路上背上都是汗，每次把包拿下来取东西再背回去的时候背上都会巨冷，而且不知道是不是屁股太痛了所以我倒是没感觉肩膀有压迫的痛感。如果是选择骑行尾包的话相对就会轻松很多了，但是我因为下单太晚了，出发的时候还没发货&lt;/li>
&lt;li>手机+身份证+充电宝+充电器+充电线：如果选择全程住店的话，身份证一定不要忘了。充电宝的话容量不用很大，因为基本都在骑行用手机的情况比较少，晚上到酒店了直接用充电器充电，所以充电宝其实都不太需要拿出来，选一个自己手上有的小一点轻一点的应应急就足够了，我带了一个一万毫安时的，结果三天用下去不到10%的电&lt;/li>
&lt;li>补胎工具+便携工具+二氧化碳气瓶+内胎：路上有点意外状况可以应应急，爆胎之类的可以直接换上备用内胎，晚上或者回家之后再把爆掉的胎补好，当然我没带，我对自己的山地车很有信心，虽然他最后还是被扎了（sad）&lt;/li>
&lt;li>码表+前车灯+尾灯：如果会骑行到比较晚的话一定要带上前后车灯，而且我因为没啥计划性，天天都在骑夜路🥹。码表我是单纯用来看导航的&lt;/li>
&lt;li>一点小零食+盐丸+能量胶*n：高强度的骑行需要及时补充能量和电解质，不然很容易出现抽筋无力的情况，如果有运动饮料的话，盐丸可以忽略（我是喝了一路的能量饮料，矿泉水只有在吃东西跟没运动饮料的时候才喝）。但是能量胶一定要多带几条，不然饿着肚子骑行还是很痛苦的，虽然路上有比较多的补给点，但是不能确保每次肚子饿的时候都能遇到卖吃的的地方&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/%E7%8E%AF%E6%B9%96%E8%87%AA%E8%A1%8C%E8%BD%A6%E9%81%93.jpeg" alt="">&lt;/p>
&lt;p>上面就是我这次骑行过程中用到的一些装备，如果你跟我一样不是一个喜欢做计划的人，也至少在前一天规划好第二天的骑行路线，而且路程中水和能量补给一定要带充足，其中从苏州到湖州的一段国道基本没有什么补给点，当时喝的跟吃的也不够了，在最后的最后好不容易遇到了一个加油站才又活了过来&lt;/p>
&lt;p>如果你骑行开始就规划好了自己的落脚点可以提前预约好住的地方，如果像我一样规划好路线然后能骑到哪算哪的话也要提前两到三小时确定并预约好要入住的地方&lt;/p>
&lt;p>骑行中不要跟他们竞速，毕竟又不是比赛，我也不是只有一天的行程，保存好自己的体力，向着目标前进吧&lt;/p>
&lt;p>这一路上虽然有痛苦，但是也有美景，还有一些有趣的人&lt;/p>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/%E5%A4%AA%E6%B9%96%E4%B8%8A%E7%9A%84%E8%93%9D%E5%A4%A9.jpeg" alt="">&lt;/p>
&lt;p>enjoy&lt;/p></description></item><item><title>Arch Linux更新后没有声音</title><link>https://www.dianbanjiu.com/post/arch-linux%E6%9B%B4%E6%96%B0%E5%90%8E%E6%B2%A1%E6%9C%89%E5%A3%B0%E9%9F%B3/</link><pubDate>Sun, 29 Oct 2023 12:41:20 +0800</pubDate><guid>https://www.dianbanjiu.com/post/arch-linux%E6%9B%B4%E6%96%B0%E5%90%8E%E6%B2%A1%E6%9C%89%E5%A3%B0%E9%9F%B3/</guid><description>&lt;p>在昨晚 &lt;code>pacman -Syu&lt;/code> 之后，今天早上突然发现电脑无法播放声音了&lt;/p>
&lt;p>我目前使用的音频方案是 pulseaudio+pulseaudio-bluetooth，修改各种配置无果之后，尝试换了一个新的方案 pipewire-pulse+wireplumber&lt;/p>
&lt;p>首先把电脑声音调整到一个稍小一点的音量，然后 &lt;code>pacman -S pipewire-pulse wireplumber&lt;/code> &lt;br>
安装过程中会提示需要移除 pulseaudio+pulseaudio-bluetooth，安装完成之后，声音立刻就开始播放了&lt;/p></description></item><item><title>苹方字体</title><link>https://www.dianbanjiu.com/post/%E8%8B%B9%E6%96%B9%E5%AD%97%E4%BD%93/</link><pubDate>Thu, 20 Jul 2023 05:44:59 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E8%8B%B9%E6%96%B9%E5%AD%97%E4%BD%93/</guid><description>&lt;p>最近在 Linux 笔记本上安装了苹方SC的字体，感觉整个字体都锐利了不少，看起来也更舒服了&lt;/p>
&lt;p>如果你也想试试效果，可以在 &lt;a href="https://github.com/prchann/fonts/blob/main/PingFang%20SC/PingFang%20SC.ttc">github&lt;/a> 下载 ttc 字体文件进行安装&lt;/p>
&lt;p>KDE 桌面可以在 &lt;code>设置-&amp;gt;外观-&amp;gt;字体管理&lt;/code> 处选择 &lt;code>从文件安装&lt;/code>&lt;br>
安装完成之后，在 &lt;code>设置-&amp;gt;外观-&amp;gt;字体&lt;/code> 处启用 &lt;code>PingFang SC&lt;/code> 即可&lt;/p></description></item><item><title>在非Apple的系统上安装苹果字体</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8%E9%9D%9Eapple%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%E8%8B%B9%E6%9E%9C%E5%AD%97%E4%BD%93/</link><pubDate>Fri, 24 Feb 2023 23:43:48 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8%E9%9D%9Eapple%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%E8%8B%B9%E6%9E%9C%E5%AD%97%E4%BD%93/</guid><description>&lt;p>这里主要说的是苹果的 SF 字体，在 Linux 上或者 Windows 上的安装流程大同小异&lt;/p>
&lt;p>首先需要准备解压工具，我这里用到的是 &lt;a href="https://www.7-zip.org/">7-Zip&lt;/a>，Windows 和 Linux 都可以使用自己的包管理器从源里面安装，当然也可以点击前面的链接去官网下载安装包进行安装，具体的安装步骤这里就不赘述了，下面默认你已经安装好了 7-Zip&lt;/p>
&lt;p>&lt;em>为了方便起见，我下面统一使用了命令行的方式进行解压，如果你用的是 7-Zip 的图形界面进行下面的解压操作也是完全没有任何问题的，只是解压出来的文件位置可能会有一点区别&lt;/em>&lt;/p>
&lt;p>接着需要在&lt;a href="https://developer.apple.com/fonts/">苹果开发者&lt;/a>平台下载字体，下载无需登录开发者账号，此处我以 SF Pro 为例&lt;/p>
&lt;p>点击 SF Pro 下面的 &lt;code>Download SF Pro&lt;/code>，下载完成之后你会得到一个名为 &lt;code>SF-Pro.dmg&lt;/code> 的文件，dmg 是苹果的一种打包方式，既然能打包就能解包，7-Zip 刚好就可以做到这件事情&lt;/p>
&lt;p>打开终端（Terminal/CMD），使用下面的命令解压这个文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Windows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7z e .&lt;span style="color:#ae81ff">\S&lt;/span>F-Pro.dmg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7z e ./SF-Pro.dmg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压完成之后你应该会得到下面这几个文件&lt;/p>
&lt;ul>
&lt;li>.HFS+ Private Directory Data_&lt;/li>
&lt;li>[HFS+ Private Data]&lt;/li>
&lt;li>SFProFonts&lt;/li>
&lt;li>.background.png&lt;/li>
&lt;li>.DS_Store&lt;/li>
&lt;li>SF Pro Fonts.pkg&lt;/li>
&lt;/ul>
&lt;p>接着继续解压 &lt;code>SF Pro Fonts.pkg&lt;/code> 这个文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Windows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7z e &lt;span style="color:#e6db74">&amp;#39;.\SF Pro Fonts.pkg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7z e &lt;span style="color:#e6db74">&amp;#39;./SF Pro Fonts.pkg&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压完成之后，在当前目录会多出一个叫做 &lt;code>Payload~&lt;/code> 的文件，继续解压这个文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Windows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7z e .&lt;span style="color:#ae81ff">\P&lt;/span>ayload~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Linux &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7z e ./Payload~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解压完成之后你会在当前目录下看到一堆 .otf 或者 .ttf 结尾的字体文件&lt;/p>
&lt;p>Windows 用户可以用文件管理器打开这些字体所在的目录，选中你想安装的字体，点击右键，在右键菜单中选择安装即可。或者也可以打开 设置-&amp;gt;个性化-&amp;gt;字体，把想要安装的字体拖到 &lt;code>拖放以安装&lt;/code> 的框中即可&lt;/p>
&lt;p>Linux 用户&lt;/p>
&lt;ul>
&lt;li>如果是给自己当前用户安装，可以创建 &lt;code>~/.local/share/fonts/&lt;/code> 目录&lt;/li>
&lt;li>如果是给系统上所有用户安装，需要创建 &lt;code>/usr/local/share/fonts&lt;/code> 目录&lt;/li>
&lt;/ul>
&lt;p>在创建好的 fonts 目录下新增 otf 和 ttf 两个文件夹，分别把想要安装的 ttf 字体和 otf 字体复制到对应的目录中，最后使用 &lt;code>fc-cache&lt;/code> 命令刷新一下字体即可&lt;/p></description></item><item><title>给我的Blog加上搜索功能</title><link>https://www.dianbanjiu.com/post/%E7%BB%99%E6%88%91%E7%9A%84blog%E5%8A%A0%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 20 Feb 2023 23:25:11 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%BB%99%E6%88%91%E7%9A%84blog%E5%8A%A0%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>之前一直想给博客加上搜索功能，但是看了好几个方案都是不再维护的状态，后来在《阮一峰的网络日志》中看到了 &lt;a href="https://pagefind.app/">pagefind&lt;/a> 这个工具，配置比较简单，而且使用上也比较方便。因为我是计划新增一个专门的搜索页面，下面的介绍也是以此为基础来介绍&lt;/p>
&lt;p>1、在 content 目录下新增一个 search 目录，并在 search 目录中新建一个 index.md 的文件，index.md 的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;🥰Find something~🥰&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout: search
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>title 可以根据自己的需要随便修改&lt;/p>
&lt;p>2、在自己主题目录的 layouts/_default 下新增一个 search.html 的页面，页面的主体内容可以复制 layouts/_default/single.html，只需要将其中的 {{.Content}} 替换为下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>window.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, (event) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new PagefindUI({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> element: &amp;#34;#search&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我的 search.html 整个文件全文如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{ define &amp;#34;content&amp;#34; -}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">article&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post bg-white&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- post-header --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">header&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-header&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-title&amp;#34;&lt;/span>&amp;gt;{{ .Title }}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;post/i18nlist.html&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- Content --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;post-content&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/pagefind/pagefind-ui.css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/pagefind/pagefind-ui.js&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;DOMContentLoaded&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">event&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">PagefindUI&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">element&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;#search&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{- end }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>pagefind 默认会把创建好的索引等文件放在 _pagefind 目录下，但是如果你的服务是托管在 GitHub page 上，通过域名访问你的博客的时候下划线开头的文件可能无法被获取到，导致搜索功能无法使用，所以我们下面将 pagefind 的输出修改到其他位置&lt;/p>
&lt;p>3、在博客的根目录下创建一个 pagefind.yml 的文件，文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">glob&lt;/span>: &lt;span style="color:#ae81ff">post/*/*.{html}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">bundle_dir&lt;/span>: &lt;span style="color:#ae81ff">pagefind&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>source 是指定我们通过 hugo 命令生成的博客静态文件的位置，一般都是在 public 目录&lt;/li>
&lt;li>glob 是指定 pagefind 都需要索引哪些位置的文件。我的博客文章是放在 content/post 目录中，生成到 public 之后对应的目录是在 post 中，在搜索的时候我也只想搜索 post 目录下的内容，所以需要单独指定一下。此处是可选的&lt;/li>
&lt;li>bundle_dir 指定了 pagefind 生成的索引等文件在 public 目录的存放位置，为了避免上面提到的问题，我此处将移动到 public/pagefind 中，如果你想将其修改到 public 下的其他目录中，需要同时修改上面 search.html 文件中 pagefind 的 JS 和 CSS 文件的引入位置&lt;/li>
&lt;/ul>
&lt;p>4、在博客的配置文件中新增一个搜索路由，以我的 config.toml 文件为例，在文件中新增下面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;搜索&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>5、运行下面的命令查看效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rm -rf ./public/*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ npx -y pagefind --serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等索引完成之后，打开浏览器访问 http://localhost:1414/search 就可以看到效果了&lt;br>
&lt;img src="https://www.dianbanjiu.com/img/pagefind_search_show.png" alt="">&lt;/p>
&lt;p>6、为了保证之后的可用性，我实际使用的是 pagefind 提供的二进制文件，这些预构建的文件在 GitHub 的 &lt;a href="https://github.com/CloudCannon/pagefind/releases">release 页面&lt;/a> 可以下载到，需要下载带 _extended 的文件，因为它扩展了对中文的索引。二进制文件和 npx 的使用方式类似&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pagefind_extended --serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7、如果你像我一样使用的是 GitHub Action 自动构建博客的，并且也是用的是二进制包的方式进行索引，还需要在 action 的脚本中 deploy 之前加一个 step&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">create search index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">tar -xf pagefind_extended.tar.gz &amp;amp;&amp;amp; chmod u+x pagefind_extended &amp;amp;&amp;amp; ./pagefind_extended &amp;amp;&amp;amp; rm -f pagefind_extended&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在提交文件到 GitHub 的时候推荐提交 pagefind 对应的压缩包，并且是 Linux 系统 x86_64 架构可执行文件的压缩包，这样可以减少一些不必要的上传带宽（压缩后的文件大概 44M，解压出来的有 222M）。为了方便起见，我这里把压缩包重新命名为 pagefind_extended.tar.gz&lt;/p>
&lt;p>提交并构建完成之后清理一下浏览器缓存，重新访问一下博客应该就可以看到搜索按钮和搜索页面了&lt;/p>
&lt;p>最后有一个点需要注意一下，因为 pagefind 是通过分词的方式来进行搜索的，所以搜索功能&lt;strong>只会在命中分词的时候生效&lt;/strong>，比如现在有一个词 &lt;code>碳酸危机&lt;/code>，搜索 &lt;code>碳酸&lt;/code>、&lt;code>危机&lt;/code>或者&lt;code>碳酸 危机&lt;/code> 都可以搜到对应的内容，但是直接搜索 &lt;code>碳酸危机&lt;/code> 会得不到任何搜索结果，这就是分词导致的&lt;/p>
&lt;p>不过这种分词的优势是可以大大减少索引文件的大小，hugo 默认生成的索引文件包含了每篇文章的全文，随着文章的增多生成的索引文件会膨胀的比较快，而 pagefind 这种通过分词生成索引文件的方式，只会在有新的分词的时候或者新的文章的时候（因为需要记录分词对应的文章的一些信息，比如链接）索引文件的大小才会有些微增加，生成的索引文件膨胀的就会慢很多&lt;/p></description></item><item><title>把图片存储在hugo项目下</title><link>https://www.dianbanjiu.com/post/%E6%8A%8A%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E5%9C%A8hugo%E9%A1%B9%E7%9B%AE%E4%B8%8B/</link><pubDate>Sun, 04 Dec 2022 02:50:07 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E6%8A%8A%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E5%9C%A8hugo%E9%A1%B9%E7%9B%AE%E4%B8%8B/</guid><description>&lt;p>之前博客的图片一直是放在各种图床上面的，一开始是 imgur，虽然是免费的，但是在国内访问是一个很大的问题，所以后来就迁移到了 sm.ms，迁移完成之后在国内国外网络都可以比较顺畅的访问了&lt;/p>
&lt;p>不过在迁移的过程中发现一个问题，图片在上传到这些图床之后，他们都会使用自己的规则重新生成一个对外的名字，虽然我理解他们这么做的原因，但是这会极大的增加我以后迁移图床的难度。所以我就开始考虑把所有的图片都放在能够自定义文件名的地方，这样不管是在博客中引用还是以后迁移起来都很简单，只需要使用正则统一修改图片的前缀地址即可。目前采用的是直接把所有图片都放到博客的目录下面，跟博客一同编译&lt;/p>
&lt;p>我现在的博客使用的是 hugo，hugo 在 build 站点的时候会把根目录下 static 目录里面的内容直接扔在生成的静态站点的根目录下面，所以可以通过这种方式来引用图片&lt;/p>
&lt;ol>
&lt;li>在 static 目录下面创建 img 目录（static 不存在的话手动创建）&lt;/li>
&lt;li>把图片放在 static/img 下面&lt;/li>
&lt;li>在引用图片的时候使用 /img/picturename.extra 进行引用&lt;/li>
&lt;/ol>
&lt;p>比如我放了一张名为 doge.png 的图片到 static/img 下面，那就可以通过 &lt;code>![](/img/doge.png)&lt;/code> 来引用这张图片&lt;/p>
&lt;p>&lt;img src="https://www.dianbanjiu.com/img/doge.png" alt="">&lt;/p>
&lt;p>我现在的域名是配置了 Cloudflare 加速的，把图片也放在博客目录下之后，相当于也顺便给图片也开了加速，可以说是一举两得了😂&lt;/p></description></item><item><title>同一目录下多 main 文件的 Debug 方法</title><link>https://www.dianbanjiu.com/post/%E5%90%8C%E4%B8%80%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%A4%9A-main-%E6%96%87%E4%BB%B6%E7%9A%84-debug-%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 29 Oct 2022 14:30:45 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%90%8C%E4%B8%80%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%A4%9A-main-%E6%96%87%E4%BB%B6%E7%9A%84-debug-%E6%96%B9%E6%B3%95/</guid><description>&lt;p>现在有一个项目包含如下文件&lt;/p>
&lt;ul>
&lt;li>go.mod&lt;/li>
&lt;li>main.go&lt;/li>
&lt;li>demo.go&lt;/li>
&lt;/ul>
&lt;p>main.go 文件内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Id&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello foo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">demo&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>demo.go 文件内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;data&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Id&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;id&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">demo&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接在项目目录下执行 &lt;code>go run main.go&lt;/code> 或者使用 VSCode、Goland 等进行编译可能会出现异常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>./main.go:4:7: undefined: Node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./main.go:9:2: undefined: demo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在终端运行/编译的时候将 &lt;code>go run main.go&lt;/code> 修改为 &lt;code>go run .&lt;/code>（&lt;code>.&lt;/code> 是 main 包所在的路径，需要根据项目情况进行修改）程序即可正常运行&lt;/p>
&lt;p>在 VSCode 中可以通过如下配置来避免此问题&lt;br>
1、打开 VSCode 的&lt;code>运行和调试窗口&lt;/code>（快捷键 &lt;code>Ctrl+Shift+D&lt;/code>）&lt;br>
2、点击 &lt;code>创建 launch.json 文件&lt;/code>&lt;br>
3、选择 &lt;code>Go：Launch Package&lt;/code>&lt;br>
4、上一步会创建并打开 .vscode/launch.json 文件，文件内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 使用 IntelliSense 了解相关属性。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 悬停以查看现有属性的描述。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.2.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;configurations&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Launch Package&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;request&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;launch&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;mode&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;auto&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;program&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${fileDirname}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改其中 &lt;code>program&lt;/code> 字段的值为 &lt;code>&amp;quot;${workspaceFolder}&amp;quot;&lt;/code>，这时再按下 F5 就会发现程序正常运行了&lt;/p>
&lt;p>&lt;code>workspaceFolder&lt;/code> 表示当前工作区的根目录，单项目一般指项目的根目录。如果 main 包在其他目录下，将 program 的值改为对应的路径即可。比如我的 main 包在项目的 &lt;code>cmd/single/&lt;/code> 下，program 的值就需要改为 &lt;code>&amp;quot;${workspaceFolder}/cmd/single&amp;quot;&lt;/code>&lt;/p>
&lt;p>简而言之就是运行/编译项目的时候需要指定 main 包所在的目录，而非指定 main 方法所属的文件。在编译 go 程序的时候单纯指定 main 方法所在的文件，同目录下其他 main 包里的内容是不会被检索和编译的&lt;/p></description></item><item><title>移除默认的 Win+` 快捷键</title><link>https://www.dianbanjiu.com/post/%E7%A7%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E7%9A%84-win+-%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Sat, 17 Sep 2022 02:00:26 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%A7%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E7%9A%84-win+-%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>&lt;p>在 Windows 上安装 &lt;code>终端&lt;/code> 之后，&lt;strong>Win+`&lt;/strong> 快捷键会以聚焦模式打开终端（下拉式终端的样子）。这个快捷键可以通过下面的方式来移除&lt;/p>
&lt;ol>
&lt;li>打开终端的设置界面，点击左下角的 &lt;strong>打开 JSON 文件&lt;/strong>&lt;br>
&lt;img src="https://s2.loli.net/2022/09/17/b2GDLoEchN4wknK.png" alt="terminal_setting_interface.png">&lt;/li>
&lt;li>在 &lt;code>actions&lt;/code> 数组中新增下面的内容&lt;br>
&lt;img src="https://s2.loli.net/2022/09/17/k3luvNfP5pa2rjx.png" alt="terminal_setting_file.png">&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;command&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;keys&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;win+`&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后重启 &lt;code>终端&lt;/code> 即可&lt;/p></description></item><item><title>碳酸危机</title><link>https://www.dianbanjiu.com/post/%E7%A2%B3%E9%85%B8%E5%8D%B1%E6%9C%BA/</link><pubDate>Sun, 14 Aug 2022 16:40:42 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%A2%B3%E9%85%B8%E5%8D%B1%E6%9C%BA/</guid><description>&lt;p>&lt;img src="https://s2.loli.net/2022/08/14/evkbZNw5WoJ9QDY.jpg" alt="soda.jpg">&lt;/p>
&lt;p>这周在 steam 上发现了一个游戏 ——《碳酸危机》。之前有在 B 站看到过创作者关于这个游戏的一些创作经历 &lt;a href="https://www.bilibili.com/video/BV1eb4y117gs?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=829ba13cbab36c9aad002a9e97b8b575">我的7年游戏开发之路&lt;/a>，当时就比较感兴趣了，不过当时我正沉迷于老头环的交界地，就一直没入手，直到这个周末闲来无事，又恰巧赶上游戏打折，就入手了一份&lt;/p>
&lt;blockquote>
&lt;p>主角作为一个来历不明，却身负强大的科技装备，帮助人们夺回被外星生物抢走的有糖可乐的故事 &lt;del>（拒绝无糖可乐🤣）&lt;/del>&lt;/p>&lt;/blockquote>
&lt;p>游戏整体难度不高，主线流程的游玩时间也不长，我花了五个小时左右打完了普通难度&lt;br>
游戏的每个关卡都有自己的一些特色，不会让人觉得乏味。不知道是不是普通难度的原因，这个游戏对于我这种菜手玩家有比较大的容错空间（来自在老头环中受虐太多的菜手玩家的感叹），并没有太多苦痛的感觉&lt;br>
如果你在 BOSS 战不能一次性通过，你就会发现每次进去之后 BOSS 的攻击方式都会略有不同，这样一来虽然不能完全背板，但也确实提升了一些可玩性&lt;br>
主线剧情通关之后，你可以带着当前的资源继续游玩。游戏还提供了速通模式，速通模式下你完全不可以攻击，就是跑，一路 run 到底&lt;/p>
&lt;p>整体来说，这个游戏还是值得一玩的 ⭐⭐⭐⭐&lt;/p>
&lt;p>最后小声哔哔一句：总感觉主角像是一只武装齐全的小香肠🌚&lt;/p></description></item><item><title>在 Go 代码中检查是否实现了某个接口</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8-go-%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E6%9F%90%E4%B8%AA%E6%8E%A5%E5%8F%A3/</link><pubDate>Tue, 09 Aug 2022 00:25:33 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8-go-%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%9E%E7%8E%B0%E4%BA%86%E6%9F%90%E4%B8%AA%E6%8E%A5%E5%8F%A3/</guid><description>&lt;p>go 里面想要实现一个接口，只需要实现这个接口中的 所有方法即可。这种方式看起来很简洁，但是却不利于后期的维护。因为没有显式的指明实现的接口，一旦对接口做了修改，其他所有已经实现了该接口的类型都会失效。最近在 goframe 的终端工具 gf 的源码中看到了检查一个类型是否实现某个接口的方法，简单有效&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#a6e22e">NewT&lt;/span> = &lt;span style="color:#a6e22e">T&lt;/span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过变量赋值，但忽略变量本身的方式来检查类型是否匹配，如果 &lt;code>NewT&lt;/code> 类型实现了 &lt;code>T&lt;/code> 接口的所有方法，赋值成功，否则编译阶段就会报错，IDE 也会及时的提醒你赋值有问题&lt;/p></description></item><item><title>Go 多版本安装</title><link>https://www.dianbanjiu.com/post/go-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 15 Jun 2022 11:23:21 +0800</pubDate><guid>https://www.dianbanjiu.com/post/go-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</guid><description>&lt;p>工作中做 go 开发的时候，经常会遇到本地比打包机的 go 版本新的情况，而有些特性或者功能又只包含在新版本当中，导致时有打包失败的情况发生。比如，经常会出现的一个问题就是 ioutil 这个包在 1.16 之后已经被废弃了，其中的一些方法也转移到了其他的包中，我脑海中一直有这个印象，所以就下意识地避免使用 ioutil 这个包，但是因为打包机使用的是 1.15 版本，所以我下意识的避免反而造成了打包失败。在这种情况下，最好的方式就是将本地项目的开发环境切换到 1.15。好在官方&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>也提供了安装多版本的方式&lt;/p>
&lt;p>首先本地需要先安装好一个版本的 go，最好是最新的版本。安装完成之后将 GOPROXY 配置为国内的代理，加速之后的下载速度。我常用的配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go env -w GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着安装 go1.15&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go install golang.org/dl/go1.15@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go1.15 download
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成之后可以通过下面的命令测试一下是否安装成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>~/go/bin/go1.15 version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了方便起见，你可以给 go1.15 的可执行文件起个别名，或者将 &lt;code>~/go/bin&lt;/code> 添加到环境 PATH 当中，可以简化需要输入的命令&lt;/p>
&lt;p>go 默认会把其他版本的源码放置在 &lt;code>~/sdk/&lt;/code> 下，所以上面下载的 1.15 版本的 GOROOT 就是 &lt;code>~/sdk/go1.15&lt;/code>&lt;/p>
&lt;p>你可以通过 &lt;code>go1.15 env&lt;/code> 查看 1.15 版本对应的环境变量&lt;/p>
&lt;p>如果你想卸载 go1.15，只需要从 &lt;code>$GOPATH/bin&lt;/code> 把 go1.15 删掉，然后把 &lt;code>$HOME/sdk/go1.15&lt;/code> 删掉即可&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://go.dev/doc/manage-install">https://go.dev/doc/manage-install&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Github Action 自动修改文章的更新日期</title><link>https://www.dianbanjiu.com/post/github-action-%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E7%9A%84%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F/</link><pubDate>Wed, 08 Jun 2022 00:25:49 +0800</pubDate><guid>https://www.dianbanjiu.com/post/github-action-%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E7%9A%84%E6%9B%B4%E6%96%B0%E6%97%A5%E6%9C%9F/</guid><description>&lt;p>我博客写的多是一些偏向于技术或者工具使用方面的文章，随着技术或者工具的更迭，我也需要时不时地更新一下历史文章。在没有使用 action 之前我一直是手动修改文章更新时间，这种方式虽然可行，但是多少有点繁琐。在使用 action 自动部署博客之后，我就想能不能通过 action 自动修改文章的更新时间&lt;/p>
&lt;p>结合官方文档，目前确定了整体的流程，大致需要下面三步&lt;/p>
&lt;h2 id="1修改-archetypesdefaultmd">1、修改 archetypes/default.md&lt;/h2>
&lt;p>&lt;strong>archetypes/default.md&lt;/strong> 是博客文章的默认模板，当你使用 &lt;code>hugo new post&lt;/code> 创建文章的时候，hugo 会把这个模板内容填充到你新建的文章中。你需要在其中新增下面一行，当你创建新文章的时候，默认会把当前日期填充为文章的更新日期&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>lastmod: {{ .Date }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当你设置了第二步之后，这里实际展示的数据会根据第二步的设置进行替换&lt;/p>
&lt;h2 id="2修改-configtomlyamljson">2、修改 config.toml/yaml/json&lt;/h2>
&lt;p>修改博客的配置文件，在其中新增下面两行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">frontmatter&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lastmod&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;:git&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;lastmod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;:fileModTime&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>:git&lt;/code>: 以文件的提交时间作为更新时间&lt;/li>
&lt;li>&lt;code>lastmod&lt;/code>: 以文章里面的 lastmod 字段作为更新时间&lt;/li>
&lt;li>&lt;code>:fileModTime&lt;/code>: 以文件的修改时间作为更新时间&lt;/li>
&lt;/ul>
&lt;p>你可以根据自己的需要设置/组合这些参数，这几个参数的生效顺序就是根据他们在数组中的顺序决定的&lt;/p>
&lt;p>如果你像我一样使用文章 git 提交的时间作为文章更新时间的话，还需要在博客的配置文件中新增下面一行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">enableGitInfo&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于这部分更多的详细配置，你可以参考延伸阅读&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="3修改-action-配置文件可选">3、修改 action 配置文件（可选）&lt;/h2>
&lt;p>如果你想以文章的 git 提交时间作为文章的更新时间的话，你还需要修改一下 action 的配置文件。下面是我的 action 的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Publish Blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Disable quotePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git config --global core.quotePath false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --gc --minify --cleanDestinationDir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACTIONS_DEPLOY_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_BRANCH&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_DIR&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意上面的 &lt;code>Checkout&lt;/code> 和 &lt;code>Disable quotePath&lt;/code> 阶段&lt;/p>
&lt;p>其中 &lt;code>Checkout&lt;/code> 阶段需要有下面两行，在这里 &lt;strong>fetch-depth&lt;/strong> 的默认值是 1，也就是说它默认只会拉取分支最近的一次 commit，这可能会导致一些文章的 &lt;code>GitInfo&lt;/code> 变量无法获取到。设置为 0 代表拉取所有分支的所有提交&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，当文件名中包含中文的时候，git 会使用引号把文件名括起来，但是这会导致 action 中无法读取 &lt;code>:GitInfo&lt;/code> 变量，所以这里需要有 &lt;code>Disable quotePath&lt;/code> 阶段&lt;/p>
&lt;p>通过上面这些操作之后，你可以尝试修改一篇历史文章，并提交到 GitHub 上，待 action 成功运行完成之后，你应该就可以看到效果了&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>hugo 日期配置官方文档: &lt;a href="https://gohugo.io/getting-started/configuration/#configure-dates">https://gohugo.io/getting-started/configuration/#configure-dates&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>VSCode 自动补全 Python 的函数括号</title><link>https://www.dianbanjiu.com/post/vscode-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8-python-%E7%9A%84%E5%87%BD%E6%95%B0%E6%8B%AC%E5%8F%B7/</link><pubDate>Thu, 21 Apr 2022 11:19:41 +0800</pubDate><guid>https://www.dianbanjiu.com/post/vscode-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8-python-%E7%9A%84%E5%87%BD%E6%95%B0%E6%8B%AC%E5%8F%B7/</guid><description>&lt;p>目前 VSCode 对 Python 的支持已经相当好了，比如各种提示、补全、跳转、调试都是完全没有任何问题的&lt;/p>
&lt;p>在 VSCode 中写 Python 的话，我一般会安装两个插件&lt;/p>
&lt;ul>
&lt;li>Python：提供对 Python 开发的支持&lt;/li>
&lt;li>Pylance：提供对 Python 一些智能补全方面的增强&lt;/li>
&lt;/ul>
&lt;p>不过在 VSCode 下写 Python 有一个比较蛋疼的点，就是补全函数的时候仅会补全函数名，而不会自动补全后面的括号&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 输入&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 期待补全为&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 实际补全效果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过好在 Pylance 插件其实是支持通过配置项来开启该功能的。在设置中搜索 &lt;code>python.analysis.completefunctionparens&lt;/code> 并启用即可&lt;/p></description></item><item><title>Windows 包管理器 —— Scoop</title><link>https://www.dianbanjiu.com/post/windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8--scoop/</link><pubDate>Thu, 21 Apr 2022 00:08:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8--scoop/</guid><description>&lt;p>我很喜欢 Linux 软件的安装方式，如果一个软件存在于软件源中，只需一行命令就可以安装好这个软件，而且大多数时候也不用担心下到什么流氓程序。所以当我有了一台 Windows 的电脑之后，我也尝试去寻找 Windows 下是否也有类似的工具，最终，我找到了 Scoop&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>官网地址： &lt;a href="https://scoop.sh/">https://scoop.sh/&lt;/a>&lt;/p>
&lt;p>首先确保系统已经安装好下面两个程序：&lt;/p>
&lt;ol>
&lt;li>PowerShell 的版本 &amp;gt;= 5&lt;/li>
&lt;li>.NET Framework 的版本 &amp;gt;=4.5&lt;/li>
&lt;/ol>
&lt;p>通过管理员身份启动一个终端窗口，依次执行下面的命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Set-ExecutionPolicy RemoteSigned -scope CurrentUser
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iwr -useb get.scoop.sh | iex
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;ul>
&lt;li>查看帮助信息&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop help
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查看某个子命令的帮助信息，如 update&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop help update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查询软件包，如 aria2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop search aria2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>查看某一个软件包的主页，如 aria2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop home aria2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装软件包，如 aria2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop install aria2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>更新某个软件包，如 aria2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop update aria2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>更新软件源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>更新所有已安装的软件包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop update -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>展示软件包状态以及可更新的软件包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>清除历史包缓存&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop cache rm *
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>移除历史旧版本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop cleanup *
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>启用 extras 软件源&lt;/li>
&lt;/ul>
&lt;p>主软件源中包含的软件比较有限，可以通过下面的命令来启用 extras 软件源。main 和 extras 软件源都是由 scoop 官方维护的，由其他用户维护的软件源可以通过类似的方式进行添加，只需要把 extras 替换为对应软件源的链接即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop bucket add extras
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>移除某个软件源，如 extras&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop bucket rm extras
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进阶操作">进阶操作&lt;/h2>
&lt;ul>
&lt;li>设置代理&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop config proxy &lt;span style="color:#ae81ff">127.0&lt;/span>.0.&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">8889&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>通过 aria2c 启用多线程下载&lt;/li>
&lt;/ul>
&lt;p>aria2 安装之后，Scoop 默认就会启用 aria2 的多线程下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop install aria2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启用 aria2 之后，scoop 默认会打印一些警告信息，虽然很有道理，但是我选择关闭提示&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1pJJ51V.png" alt="https://i.imgur.com/1pJJ51V.png">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop config aria2-warning-enabled false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>关闭 aria2 多线程下载&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>scoop config aria2-enabled false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;h3 id="在更新下载程序包的时候出现类似-invoke-webrequest--无法连接到远程服务器-的报错">在更新/下载程序包的时候出现类似 &lt;code>Invoke-WebRequest : 无法连接到远程服务器&lt;/code> 的报错&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/psX044t.png" alt="https://i.imgur.com/psX044t.png">&lt;/p>
&lt;p>这很有可能是 scoop 对一些系统目录没有访问权限，而这些程序包的安装又需要对一些系统目录进行操作，这个时候可以 &lt;code>管理员身份&lt;/code> 运行终端，然后重新执行安装/更新命令&lt;/p>
&lt;h3 id="scoop-安装程序失败之后在-status-命令里面会一直输出错误信息">scoop 安装程序失败之后，在 status 命令里面会一直输出错误信息&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>PS &amp;gt; scoop status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scoop is up to date.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Installed Version Latest Version Missing Dependencies Info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---- ----------------- -------------- -------------------- ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>snipaste Install failedManifest removed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过 uninstall 这个软件包来移除这个提示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>PS &amp;gt; scoop uninstall snipaste
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR &lt;span style="color:#e6db74">&amp;#39;snipaste&amp;#39;&lt;/span> isn&lt;span style="color:#e6db74">&amp;#39;t installed correctly.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Removing older version (1.16.2).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>snipaste&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> was uninstalled.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS &amp;gt; scoop status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scoop is up to date.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Everything is ok!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Linux 访问 Windows 共享目录</title><link>https://www.dianbanjiu.com/post/linux-%E8%AE%BF%E9%97%AE-windows-%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</link><pubDate>Thu, 14 Apr 2022 16:36:33 +0800</pubDate><guid>https://www.dianbanjiu.com/post/linux-%E8%AE%BF%E9%97%AE-windows-%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</guid><description>&lt;p>因为工作需要，需要在电脑上安装一个 VPN 程序，但是官方并没有提供 Linux 版本，通过 wine 虽然能安装成功，但是界面总是显示不出来。实在不想折腾了，就直接装了一个 Windows 的虚拟机，有一些需要编辑的文件就通过共享的方式在宿主机上进行编辑&lt;/p>
&lt;p>Linux 上 samba 的安装以及 Windows 文件共享的设置倒是一帆风顺，没出现什么问题，不过在 Linux 下获取 Windows 共享目录的时候却出现了异常&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 正常打印出了 users 目录下的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ smbclient -c &lt;span style="color:#e6db74">&amp;#34;dir&amp;#34;&lt;/span> //ip/users -U user%passwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. DR &lt;span style="color:#ae81ff">0&lt;/span> Wed Apr &lt;span style="color:#ae81ff">13&lt;/span> 17:52:49 &lt;span style="color:#ae81ff">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.. DR &lt;span style="color:#ae81ff">0&lt;/span> Wed Apr &lt;span style="color:#ae81ff">13&lt;/span> 17:52:49 &lt;span style="color:#ae81ff">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Default DHR &lt;span style="color:#ae81ff">0&lt;/span> Wed Apr &lt;span style="color:#ae81ff">13&lt;/span> 17:52:49 &lt;span style="color:#ae81ff">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 继续打印用户目录下的内容时出现异常&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ smbclient -c &lt;span style="color:#e6db74">&amp;#34;dir&amp;#34;&lt;/span> //ip/users/test -U user%passwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tree connect failed: NT_STATUS_BAD_NETWORK_NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过一番冲浪之后大概确定原因是 Windows 使用的 samba 版本是 v1，而 Linux 下的 samba 版本是 v4，v4 并不直接向下兼容，&lt;code>smbclient&lt;/code> 又不支持指定 samba 版本，不指定 samba 版本就无法直接打印出共享目录中的文件，死循环&lt;/p>
&lt;p>不过通过 mount 使用 cifs 格式挂载共享目录的时候是可以指定 samba 版本的，修改命令，通过下面的方式可以将共享目录挂载到本地&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo mount -t cifs -o username&lt;span style="color:#f92672">=&lt;/span>windows_user,password&lt;span style="color:#f92672">=&lt;/span>windows_user_password,vers&lt;span style="color:#f92672">=&lt;/span>1.0,gid&lt;span style="color:#f92672">=&lt;/span>$GID,uid&lt;span style="color:#f92672">=&lt;/span>$UID //ip/共享路径 /home/test/samba_mount_path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>这里注意把 windows_user、windows_user_password、ip、共享路径修改为 Windows 对应的信息，/home/test/samba_mount_path 是在 Linux 下的挂载点&lt;/li>
&lt;li>vers=1.0 指定的是 samba 的协议版本&lt;/li>
&lt;/ul>
&lt;p>因为一般情况下都是由 root 用户来进行 mount 操作的，挂载到本地的目录所属用户及用户组也是 root，对其中的文件进行操作时需要添加 sudo 前缀命令，为了让普通用户能直接操作，此处需要指定 gid=$GID,uid=$UID 两个参数，分别代表当前用户所属用户组的 ID 和当前用户的 ID&lt;/p></description></item><item><title>Arch Linux 安装微信</title><link>https://www.dianbanjiu.com/post/arch-linux-%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1/</link><pubDate>Sat, 09 Apr 2022 12:57:54 +0800</pubDate><guid>https://www.dianbanjiu.com/post/arch-linux-%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1/</guid><description>&lt;p>AUR 中提供了多个微信的安装包，具体的可以参考 &lt;a href="https://wiki.archlinux.org/title/WeChat_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">微信的 Wiki 页&lt;/a>，我使用的是 &lt;a href="https://aur.archlinux.org/packages/com.qq.weixin.deepin">com.qq.weixin.deepin&lt;/a>，版本是 3.2.1.154&lt;/p>
&lt;p>安装比较简单，直接通过 AUR 的包管理器安装即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ yay com.qq.weixin.deepin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了让微信用起来更舒服，在安装完成之后还有一些需要调整的地方&lt;/p>
&lt;p>&lt;strong>1、方块字&lt;/strong>&lt;/p>
&lt;p>当你打开微信之后，有可能会发现微信输入框的中文字全都是方块字，这一般是因为你的系统缺少了一些字体导致的，此处推荐安装微软雅黑（msyh）或者宋体（simsun）&lt;/p>
&lt;p>如果从包管理器中没有找到这两个字体包，可以直接把 Windows &lt;code>C:\Windows\Fonts&lt;/code> 下面的所有字体 copy 到 Arch Linux 的 &lt;code>/usr/share/fonts/&lt;/code> 下，然后执行 &lt;code>fc-cache -vf&lt;/code> 刷新字体缓存&lt;/p>
&lt;p>&lt;strong>2、高分屏&lt;/strong>&lt;/p>
&lt;p>微信默认的 DPI 是 96dpi，在 1080p 下刚刚好，但是在一些高分屏上就会显得有点小，作者在 AUR 的评论中是通过执行 &lt;code>WINEPREFIX=~/.deepinwine/Deepin-WeChat deepin-wine6-stable winecfg&lt;/code> 命令，然后在 &lt;code>显示&lt;/code> 标签中调整 DPI，我尝试了一下，程序重启之后 DPI 又会恢复到默认的 96dpi&lt;/p>
&lt;p>我现在是通过在 &lt;code>/etc/environment&lt;/code> 中新增一行 &lt;code>DEEPIN_WINE_SCALE=1.25&lt;/code> 解决的，因为我的显示器是 2k 的，所以此处设置的缩放是 1.25（&lt;strong>注意：需要重启一次系统才能使配置文件的修改生效&lt;/strong>）&lt;/p></description></item><item><title>Linux 安装后</title><link>https://www.dianbanjiu.com/post/linux-%E5%AE%89%E8%A3%85%E5%90%8E/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.dianbanjiu.com/post/linux-%E5%AE%89%E8%A3%85%E5%90%8E/</guid><description>&lt;p>之前因为好奇心，在自己的笔记本上重装了 N 多次系统，虽然基本上都是局限在 Linux 的各种发行版之间，不过最近两三年基本上算是稳定下来，只尝试过 Manjaro 和 Arch Linux，最近两年的话就只有在使用 Arch Linux 了。下面记录一下我在重装系统之后会安装的一些软件以及基本都会做的一些简单配置，来帮助我更好的使用这台电脑&lt;/p>
&lt;h2 id="配置源">配置源&lt;/h2>
&lt;p>为了保证后续软件安装的速度，在连接网络后的第一件事就是先配置国内的软件源&lt;/p>
&lt;p>1、编辑 &lt;code>/etc/pacman.d/mirrorlist&lt;/code>，搜索 &lt;code>China&lt;/code> 字段，将清华、中科大的镜像源移动到文件的开头&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Server &lt;span style="color:#f92672">=&lt;/span> https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server &lt;span style="color:#f92672">=&lt;/span> https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2、archlinuxcn 软件源提供了很多非官方源的常用软件包，在 &lt;code>/etc/pacman.conf&lt;/code> 的最后添加如下的内容以启用 archlinuxcn 源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[archlinuxcn]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加完成之后需要安装 &lt;code>archlinuxcn-keyring&lt;/code> 来导入一些 archlinuxcn 对应的密钥&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -Syyu archlinuxcn-keyring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="软件安装">软件安装&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>软件&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>chromium&lt;/td>
&lt;td>浏览器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tmux&lt;/td>
&lt;td>终端复用工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>git&lt;/td>
&lt;td>版本管理工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>visual-studio-code-bin&lt;/td>
&lt;td>文本编辑器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tree&lt;/td>
&lt;td>树形目录查看&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>goland gland-jre&lt;/td>
&lt;td>go IDE，继承自 IDEA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>spotify&lt;/td>
&lt;td>流音乐媒体&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>keepassxc&lt;/td>
&lt;td>密码管理工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jdk11-openjdk&lt;/td>
&lt;td>jdk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>java11-openjfx&lt;/td>
&lt;td>goland 的 markdown 预览依赖此程序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>docker&lt;/td>
&lt;td>容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>obs-studio&lt;/td>
&lt;td>录屏&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>flameshot&lt;/td>
&lt;td>截图工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>yay&lt;/td>
&lt;td>aur 包安管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go&lt;/td>
&lt;td>go 语言开发环境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fcitx5 fcitx5-im fcitx5-chinese-addons&lt;/td>
&lt;td>fcitx5 输入法框架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>telegram-desktop&lt;/td>
&lt;td>IM 工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hugo&lt;/td>
&lt;td>hugo 博客命令行工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nodejs npm&lt;/td>
&lt;td>nodejs 开发环境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>plasma-browser-integration&lt;/td>
&lt;td>plasma 桌面的浏览器集成插件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>translate-shell&lt;/td>
&lt;td>终端翻译工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>postman-bin&lt;/td>
&lt;td>api 测试工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ark&lt;/td>
&lt;td>KDE 官方的压缩文件查看器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unzip unrar p7zip&lt;/td>
&lt;td>几种常用的压缩格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gnome-keyring&lt;/td>
&lt;td>钥匙串管理，vscode 连接 github 需要使用到&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>peek&lt;/td>
&lt;td>linux 下一个非常简单的 gif 录制工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>numix-circle-icon-theme-git&lt;/td>
&lt;td>图标包&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>一行命令安装上面所有应用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -S git zsh vim tmux visual-studio-code-bin tree goland goland-jre spotify keepassxc jdk11-openjdk java11-openjfx docker obs-studio flameshot yay go fcitx5 fcitx5-im fcitx5-chinese-addons telegram-desktop hugo nodejs npm plasma-browser-integration translate-shell postman-bin ark unarchiver unzip unrar p7zip gnome-keyring peek numix-circle-icon-theme-git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="环境配置">环境配置&lt;/h2>
&lt;h3 id="磁盘自动挂载">磁盘自动挂载&lt;/h3>
&lt;p>如果想要将一些其他的磁盘在系统开机时自动挂载，可以先通过 &lt;code>blkid&lt;/code> 命令找到磁盘对应的 UUID，接着在 &lt;code>/etc/fstab&lt;/code> 的末尾按照下面的格式新增一行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>UUID=disk_uuid /path/to/mount disk_format defaults 0 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>disk_uuid&lt;/code> 就是上面通过 &lt;code>blkid&lt;/code> 命令找到的磁盘的 uuid&lt;/li>
&lt;li>&lt;code>/path/to/mount&lt;/code> 是你想要将磁盘挂载到的目录&lt;/li>
&lt;li>&lt;code>disk_format&lt;/code> 是磁盘的文件系统格式，比如 NTFS、EXT4、FAT32 等等&lt;/li>
&lt;li>后面的 &lt;code>defaults 0 0&lt;/code> 如非，必要保持不变即可，其及具体含义可以参照 &lt;a href="https://wiki.archlinux.org/title/fstab">Arch Linux Wiki 关于 fstab 的介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="zsh-配置">zsh 配置&lt;/h3>
&lt;p>oh-my-zsh 提供了一套开箱即用的 zsh 配置，并且有很多额外的主题和插件可供选用，可以通过下面的命令来安装 oh-my-zsh 以及 zsh-autosuggestions、zsh-syntax-highlighting 两个插件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sh -c &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span style="color:#e6db74">${&lt;/span>ZSH_CUSTOM&lt;span style="color:#66d9ef">:-&lt;/span>~/.oh-my-zsh/custom&lt;span style="color:#e6db74">}&lt;/span>/plugins/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span style="color:#e6db74">${&lt;/span>ZSH_CUSTOM&lt;span style="color:#66d9ef">:-&lt;/span>~/.oh-my-zsh/custom&lt;span style="color:#e6db74">}&lt;/span>/plugins/zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果提示 &lt;code>443 拒绝连接&lt;/code> 的话，可以直接访问 &lt;a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh">ohmyzsh github 仓库&lt;/a>，然后将该文件的内容复制到 install.sh 文件中，使用 &lt;code>bash install.sh&lt;/code> 命令来安装 oh-my-zsh&lt;/p>
&lt;p>安装完成之后编辑 &lt;code>~/.zshrc&lt;/code>，修改 plugins 字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zshrc" data-lang="zshrc">&lt;span style="display:flex;">&lt;span>plugins&lt;span style="color:#f92672">=(&lt;/span>git zsh-autosuggestions zsh-syntax-highlighting extract&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>extract&lt;/code> 插件可以简化命令行解压时复杂的参数，只需 &lt;code>x 压缩包&lt;/code>，即可将压缩包解压到当前目录下。&lt;/p>
&lt;p>一般情况下 &lt;code>zsh-autosuggestions&lt;/code>会将一些待补全的内容以较浅的颜色进行展示，但是异常情况下可能直接以普通文本的形式展示出来，这可能是因为终端的颜色编码配置不正确，需要在 .zshrc 中添加 &lt;code>export TERM=xterm-256color&lt;/code>&lt;/p>
&lt;h3 id="配置-docker">配置 docker&lt;/h3>
&lt;p>使用下面的命令将当前用户添加到 docker 组中，之后就可以通过当前用户身份直接使用 docker。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo usermod -aG docker $USERNAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编辑 &lt;code>/etc/docker/daemon.json&lt;/code>，添加国内镜像源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#f92672">&amp;#34;registry-mirrors&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;https://reg-mirror.qiniu.com/&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>阿里也提供了 docker 镜像源服务，但是需要使用个人帐号获取对应的链接，&lt;a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">点此获取&lt;/a>&lt;/p>
&lt;h3 id="go-开发配置">go 开发配置&lt;/h3>
&lt;p>安装 go 依赖自动导入工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go get -u golang.org/x/tools/cmd/goimports
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 go 的依赖下载代理&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># go env -w GO111MODULE=on #新版本的 GO 默认开启此功能，可不添加此行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go env -w GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="输入法配置">输入法配置&lt;/h3>
&lt;p>/etc/environment 开头添加以下内容，可以避免 fcitx5 的一些问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>GTK_IM_MODULE=fcitx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QT_IM_MODULE=fcitx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>XMODIFIERS=@im=fcitx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INPUT_METHOD=fcitx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SDL_IM_MODULE=fcitx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GLFW_IM_MODULE=ibus
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="deepin-tim-配置">deepin-tim 配置&lt;/h3>
&lt;p>安装 deepin 版 tim 之后需要在设置的开机自启动里添加 &lt;code>/usr/lib/gsd-xsettings&lt;/code> 的自启动脚本。&lt;/p>
&lt;p>调整 tim 的 DPI&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd /opt/deepinwine/tools &lt;span style="color:#75715e"># TIM 的安装目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./SetDpi.sh &lt;span style="color:#ae81ff">126&lt;/span> Deepin-TIM &lt;span style="color:#75715e"># 调整 TIM 的 DPI&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="蓝牙配置">蓝牙配置&lt;/h3>
&lt;p>开机启动蓝牙服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl enable bluetooth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着编辑 &lt;code>/etc/bluetooth/main.conf&lt;/code>，找到 &lt;code>AutoEnable&lt;/code> 字段，取消前面的注释，并将对应的值修改为 &lt;code>true&lt;/code> 就可以在电脑启动的同时开启蓝牙，这样在登录界面就可以直接连接到你的蓝牙外设了&lt;/p>
&lt;h3 id="jetbrains-配置">Jetbrains 配置&lt;/h3>
&lt;p>Jetbrains 系列的软件在 Linux 下默认的字体显示非常辣眼睛，需要同时安装对应的 &lt;code>-jre&lt;/code> 支持才行。如 Goland 就需要安装 &lt;code>goland-jre&lt;/code>&lt;/p>
&lt;p>如果有在 goland 中预览 markdown 文件的需要，还需要安装 &lt;code>java11-openjfx&lt;/code>&lt;/p>
&lt;h3 id="界面美化">界面美化&lt;/h3>
&lt;p>KDE 当前的默认桌面其实已经挺不错的了，此处仅推荐一套图标包 &lt;a href="https://github.com/numixproject/numix-icon-theme-circle">numix-circle-icon-theme&lt;/a>&lt;/p></description></item><item><title>Git 以中文展示修改路径</title><link>https://www.dianbanjiu.com/post/git-%E4%BB%A5%E4%B8%AD%E6%96%87%E5%B1%95%E7%A4%BA%E4%BF%AE%E6%94%B9%E8%B7%AF%E5%BE%84/</link><pubDate>Sun, 20 Mar 2022 14:38:24 +0800</pubDate><guid>https://www.dianbanjiu.com/post/git-%E4%BB%A5%E4%B8%AD%E6%96%87%E5%B1%95%E7%A4%BA%E4%BF%AE%E6%94%B9%E8%B7%AF%E5%BE%84/</guid><description>&lt;p>默认情况下，使用 &lt;code>git status&lt;/code> 来查看更改文件时，如果路径中包含有空格或者一些中文字符时，对应的文件路径会用引号括起来，并且其中的中文字符会以反斜杠 &lt;code>\&lt;/code> 进行转义，就像下面这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>On branch blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your branch is up to date with &lt;span style="color:#e6db74">&amp;#39;origin/blog&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Untracked files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to include in what will be committed&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;content/post/git \344\273\245\344\270\255\346\226\207\345\261\225\347\244\272\344\277\256\346\224\271\350\267\257\345\276\204.md&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nothing added to commit but untracked files present &lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add&amp;#34;&lt;/span> to track&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然这种配置在你的文件名中含有换行回车之类字符的时候可能比较有用（这种文件数量应该很少吧😑），但是在修改文件比较多的情况下就很难知道对应的是哪些文件，想要正常打印出这些中文字符的话可以通过下面的配置项来解决&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config core.quotePath false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的设置是仅对单个项目设置，如果需要针对全局所有的项目关闭这个特性，可以添加 &lt;code>--global&lt;/code> 参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global core.quotePath false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数的一些具体说明可以参考此处： &lt;a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath">https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath&lt;/a>&lt;/p></description></item><item><title>使用 Rclone 挂载 OneDrive</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-rclone-%E6%8C%82%E8%BD%BD-onedrive/</link><pubDate>Wed, 16 Mar 2022 11:47:59 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-rclone-%E6%8C%82%E8%BD%BD-onedrive/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;p>因为 OneDrive 没有提供官方的 Linux 客户端，所以为了方便起见，我选择直接通过 rclone 将 OneDrive 挂载到本地，这样就可以在本地直接对 OneDrive 的文件进行管理&lt;/p>
&lt;p>首先需要安装 &lt;code>rclone&lt;/code> 程序本体，我使用的是 Arch Linux，可以直接通过 pacman 进行安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo pacman -S rclone
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>接着就可以使用 &lt;code>rclone&lt;/code>开始配置自己的 OneDrive 了，下面是我实际配置过程的输出&lt;/p>
&lt;p>开始之前，先说几个需要注意的地方：&lt;/p>
&lt;ol>
&lt;li>类似下面的这种选择，可以选择输入前面的序号，如 1，也可以选择输入后面的文字，如 fichier&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>1 / 1Fichier
\ &amp;#34;fichier&amp;#34;
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>在选择 &lt;code>region&lt;/code> 地区的时候，一定确定好自己要挂载的 OneDrive 是哪个版本的，如果你使用的是世纪互联版本的 OneDrive 那就选择 &lt;code>cn&lt;/code>，否则一般选择 &lt;code>global&lt;/code> 就可以， &lt;code>us&lt;/code> 是美国政府版（应该没人真的是这个吧）&lt;/li>
&lt;li>在 &lt;code>Use auto config?&lt;/code> 阶段，如果你选择了 &lt;code>Y&lt;/code> ，rclone 会打开一个浏览器页面，需要你登录并授权 OneDrive 的访问权限。有些教程可能会让你使用 &lt;code>rclone authorize&lt;/code> 来单独获取 OneDrive 的 token 及授权，不过两者其实区别不大，唯一的区别就是自动配置模式下可以自动帮你获取到 token，而后者需要你使用另一个命令获取 token，在配置 OneDrive 的时候手动粘贴进去&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rclone config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current remotes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">====&lt;/span> &lt;span style="color:#f92672">====&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e&lt;span style="color:#f92672">)&lt;/span> Edit existing remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n&lt;span style="color:#f92672">)&lt;/span> New remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#f92672">)&lt;/span> Delete remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">)&lt;/span> Rename remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c&lt;span style="color:#f92672">)&lt;/span> Copy remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#f92672">)&lt;/span> Set configuration password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q&lt;span style="color:#f92672">)&lt;/span> Quit config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e/n/d/r/c/s/q&amp;gt; n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name&amp;gt; testDrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Option Storage.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type of storage to configure.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter a string value. Press Enter &lt;span style="color:#66d9ef">for&lt;/span> the default &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Choose a number from below, or type in your own value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> / 1Fichier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;fichier&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> / Alias &lt;span style="color:#66d9ef">for&lt;/span> an existing remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;alias&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> / Amazon Drive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;amazon cloud drive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, SeaweedFS, and Tencent COS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;s3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5&lt;/span> / Backblaze B2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;b2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span> / Better checksums &lt;span style="color:#66d9ef">for&lt;/span> other remotes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;hasher&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7&lt;/span> / Box
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;box&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">8&lt;/span> / Cache a remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;cache&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">9&lt;/span> / Citrix Sharefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;sharefile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> / Compress a remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;compress&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">11&lt;/span> / Dropbox
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;dropbox&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> / Encrypt/Decrypt a remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;crypt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> / Enterprise File Fabric
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;filefabric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">14&lt;/span> / FTP Connection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;ftp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">15&lt;/span> / Google Cloud Storage &lt;span style="color:#f92672">(&lt;/span>this is not Google Drive&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;google cloud storage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">16&lt;/span> / Google Drive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;drive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">17&lt;/span> / Google Photos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;google photos&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">18&lt;/span> / Hadoop distributed file system
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;hdfs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">19&lt;/span> / Hubic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;hubic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">20&lt;/span> / In memory object storage system.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;memory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">21&lt;/span> / Jottacloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;jottacloud&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">22&lt;/span> / Koofr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;koofr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">23&lt;/span> / Local Disk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">24&lt;/span> / Mail.ru Cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;mailru&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">25&lt;/span> / Mega
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;mega&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">26&lt;/span> / Microsoft Azure Blob Storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;azureblob&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">27&lt;/span> / Microsoft OneDrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;onedrive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">28&lt;/span> / OpenDrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;opendrive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">29&lt;/span> / OpenStack Swift &lt;span style="color:#f92672">(&lt;/span>Rackspace Cloud Files, Memset Memstore, OVH&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;swift&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">30&lt;/span> / Pcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;pcloud&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">31&lt;/span> / Put.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;putio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">32&lt;/span> / QingCloud Object Storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;qingstor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">33&lt;/span> / SSH/SFTP Connection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;sftp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">34&lt;/span> / Sia Decentralized Cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;sia&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">35&lt;/span> / Sugarsync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;sugarsync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">36&lt;/span> / Tardigrade Decentralized Cloud Storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;tardigrade&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">37&lt;/span> / Transparently chunk/split large files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;chunker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">38&lt;/span> / Union merges the contents of several upstream fs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;union&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">39&lt;/span> / Uptobox
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;uptobox&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">40&lt;/span> / Webdav
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;webdav&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">41&lt;/span> / Yandex Disk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;yandex&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">42&lt;/span> / Zoho
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;zoho&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">43&lt;/span> / http Connection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">44&lt;/span> / premiumize.me
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;premiumizeme&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">45&lt;/span> / seafile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;seafile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Storage&amp;gt; onedrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Option client_id.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OAuth Client Id.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Leave blank normally.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter a string value. Press Enter &lt;span style="color:#66d9ef">for&lt;/span> the default &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client_id&amp;gt; &lt;span style="color:#f92672">{&lt;/span>直接回车就可以&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Option client_secret.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OAuth Client Secret.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Leave blank normally.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter a string value. Press Enter &lt;span style="color:#66d9ef">for&lt;/span> the default &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client_secret&amp;gt; &lt;span style="color:#f92672">{&lt;/span>直接回车就可以&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Option region.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Choose national cloud region &lt;span style="color:#66d9ef">for&lt;/span> OneDrive.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter a string value. Press Enter &lt;span style="color:#66d9ef">for&lt;/span> the default &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;global&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Choose a number from below, or type in your own value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> / Microsoft Cloud Global
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;global&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> / Microsoft Cloud &lt;span style="color:#66d9ef">for&lt;/span> US Government
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;us&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> / Microsoft Cloud Germany
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;de&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> / Azure and Office &lt;span style="color:#ae81ff">365&lt;/span> operated by 21Vianet in China
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;cn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>region&amp;gt; global
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Edit advanced config?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y&lt;span style="color:#f92672">)&lt;/span> Yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n&lt;span style="color:#f92672">)&lt;/span> No &lt;span style="color:#f92672">(&lt;/span>default&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y/n&amp;gt; n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use auto config?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Say Y &lt;span style="color:#66d9ef">if&lt;/span> not sure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Say N &lt;span style="color:#66d9ef">if&lt;/span> you are working on a remote or headless machine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y&lt;span style="color:#f92672">)&lt;/span> Yes &lt;span style="color:#f92672">(&lt;/span>default&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n&lt;span style="color:#f92672">)&lt;/span> No
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y/n&amp;gt; y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/16 10:04:50 NOTICE: If your browser doesn&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t open automatically go to the following link: http://127.0.0.1:53682/auth?state&lt;span style="color:#f92672">=&lt;/span>qkwpEntUvXPewzviZQXNOHA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/16 10:04:50 NOTICE: Log in and authorize rclone &lt;span style="color:#66d9ef">for&lt;/span> access
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/16 10:04:50 NOTICE: Waiting &lt;span style="color:#66d9ef">for&lt;/span> code...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022/03/16 10:06:03 NOTICE: Got code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Option config_type.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type of connection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter a string value. Press Enter &lt;span style="color:#66d9ef">for&lt;/span> the default &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;onedrive&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Choose a number from below, or type in an existing value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> / OneDrive Personal or Business
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;onedrive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> / Root Sharepoint site
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;sharepoint&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> / Sharepoint site name or URL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> | E.g. mysite or https://contoso.sharepoint.com/sites/mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;url&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> / Search &lt;span style="color:#66d9ef">for&lt;/span> a Sharepoint site
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;search&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5&lt;/span> / Type in driveID &lt;span style="color:#f92672">(&lt;/span>advanced&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;driveid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span> / Type in SiteID &lt;span style="color:#f92672">(&lt;/span>advanced&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;siteid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> / Sharepoint server-relative path &lt;span style="color:#f92672">(&lt;/span>advanced&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7&lt;/span> | E.g. /teams/hr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#e6db74">&amp;#34;path&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config_type&amp;gt; &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Drive OK?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Found drive &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span> of type &lt;span style="color:#e6db74">&amp;#34;personal&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>URL: https://onedrive.live.com/?cid&lt;span style="color:#f92672">=&lt;/span>j2sy7l2us75j92
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y&lt;span style="color:#f92672">)&lt;/span> Yes &lt;span style="color:#f92672">(&lt;/span>default&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n&lt;span style="color:#f92672">)&lt;/span> No
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y/n&amp;gt; y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>testDrive&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type &lt;span style="color:#f92672">=&lt;/span> onedrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>这里就不展示了&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drive_id &lt;span style="color:#f92672">=&lt;/span> js7y3isjy29hj725
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drive_type &lt;span style="color:#f92672">=&lt;/span> personal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y&lt;span style="color:#f92672">)&lt;/span> Yes this is OK &lt;span style="color:#f92672">(&lt;/span>default&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e&lt;span style="color:#f92672">)&lt;/span> Edit this remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#f92672">)&lt;/span> Delete this remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y/e/d&amp;gt; y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current remotes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">====&lt;/span> &lt;span style="color:#f92672">====&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>testDrive onedrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e&lt;span style="color:#f92672">)&lt;/span> Edit existing remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n&lt;span style="color:#f92672">)&lt;/span> New remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#f92672">)&lt;/span> Delete remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">)&lt;/span> Rename remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c&lt;span style="color:#f92672">)&lt;/span> Copy remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#f92672">)&lt;/span> Set configuration password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q&lt;span style="color:#f92672">)&lt;/span> Quit config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e/n/d/r/c/s/q&amp;gt; q
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试挂载卸载">测试&amp;amp;&amp;amp;挂载&amp;amp;&amp;amp;卸载&lt;/h2>
&lt;h3 id="测试">测试&lt;/h3>
&lt;p>接着你可以使用下面的命令列出自己 OneDrive 中的所有一级目录，测试一下是否配置成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rclone lsd testDrive:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="挂载">挂载&lt;/h3>
&lt;p>如果你只想在需要的时候手动挂载 OneDrive，可以使用下面的命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rclone mount testDrive:/ /path/to/mount --allow-non-empty --vfs-cache-mode full --daemon
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>testDrive&lt;/code> 是上面在配置 OneDrive 时指定的 name&lt;/li>
&lt;li>&lt;code>testDrive:&lt;/code> 后面跟着的是你想要挂载到本地的 OneDrive 中的目录或者文件，这里的 &lt;code>/&lt;/code> 代表 OneDrive 中的所有内容&lt;/li>
&lt;li>&lt;code>/path/to/mount&lt;/code> 是指定你将 OneDrive 挂载到本地的位置。此目录需要提前创建并赋予足够的读写权限&lt;/li>
&lt;li>&lt;code>--allow-non-empty&lt;/code> 允许将 OneDrive 挂载到一个非空目录中，该参数&lt;strong>可不指定&lt;/strong>&lt;/li>
&lt;li>&lt;code>--vfs-cache-mode full&lt;/code> 缓存模式，我这里指定的是 &lt;code>full&lt;/code>，默认是 &lt;code>off&lt;/code> 。这里一共支持 4 种模式，我这里就简单说一下这两种的区别
&lt;ul>
&lt;li>&lt;code>full&lt;/code> 模式下所有对远程文件的读写都会缓存到磁盘中&lt;/li>
&lt;li>&lt;code>off&lt;/code> 模式下所有对远程文件的读写都不会缓存到磁盘中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>rclone 的挂载命令是一个前台服务，如果你关闭了当前的会话，那挂载进程也会退出。&lt;code>--daemon&lt;/code> 参数可以将 rclone 的挂载命令作为一个后台服务，这样即使你关闭了当前会话，挂载进程也不会退出&lt;/li>
&lt;/ul>
&lt;h3 id="卸载">卸载&lt;/h3>
&lt;p>使用 rclone 挂载的云盘的卸载和普通磁盘的卸载方式一样，可以直接使用 &lt;code>umount&lt;/code> 来完成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>umount testDrive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开机自启动">开机自启动&lt;/h2>
&lt;p>当然，如果想要避免每次开机都要手动挂载一次，也可以选择创建开机自启脚本&lt;/p>
&lt;p>在 &lt;code>~/.config/autostart&lt;/code> 目录下创建一个以 &lt;code>.desktop&lt;/code> 结尾的文件，该文件的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Desktop Entry&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type&lt;span style="color:#f92672">=&lt;/span>Application
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NoDisplay&lt;span style="color:#f92672">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Terminal&lt;span style="color:#f92672">=&lt;/span>false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name&lt;span style="color:#f92672">=&lt;/span>dianDrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Exec&lt;span style="color:#f92672">=&lt;/span>/usr/bin/rclone mount testDrive:/ /path/to/mount --allow-non-empty --vfs-cache-mode full --daemon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Icon&lt;span style="color:#f92672">=&lt;/span>onedrive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Comment&lt;span style="color:#f92672">=&lt;/span>Auto mount OneDrive to local.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Categories&lt;span style="color:#f92672">=&lt;/span>Network;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Arch Linux 无法配对蓝牙耳机</title><link>https://www.dianbanjiu.com/post/arch-linux-%E6%97%A0%E6%B3%95%E9%85%8D%E5%AF%B9%E8%93%9D%E7%89%99%E8%80%B3%E6%9C%BA/</link><pubDate>Fri, 25 Feb 2022 13:42:06 +0800</pubDate><guid>https://www.dianbanjiu.com/post/arch-linux-%E6%97%A0%E6%B3%95%E9%85%8D%E5%AF%B9%E8%93%9D%E7%89%99%E8%80%B3%E6%9C%BA/</guid><description>&lt;p>最近在尝试使用这台装了 Arch Linux 的笔记本连接蓝牙耳机的时候，发现总是无法成功配对&lt;/p>
&lt;p>因为蓝牙键盘是可以正常连接的，判断蓝牙驱动应该是正常的，所以大概率是缺少某些蓝牙音频驱动。然后查看蓝牙的日志发现如下报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl status bluetooth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...src/service.c:btd_service_connect&lt;span style="color:#f92672">()&lt;/span> a2dp-sink profile connect failed &lt;span style="color:#66d9ef">for&lt;/span> B8:D5:0B:D0:06:B0: Protocol not available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然在 Arch Linux Wiki 的 &lt;a href="https://wiki.archlinux.org/title/Bluetooth_headset_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">Bluetooth_headset&lt;/a> 章节提示说已经默认支持 A2DP profile，但是看上面的日志应该是没有安装成功。&lt;/p>
&lt;p>安装 &lt;code>pulseaudio-bluetooth&lt;/code> 之后再尝试配对蓝牙耳机，发现可以正常连接并且正常当作电脑扬声器了。&lt;/p></description></item><item><title>使用 Gitlab Ci 构建 Docker 镜像</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-gitlab-ci-%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 04 Jan 2022 20:31:56 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-gitlab-ci-%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F/</guid><description>&lt;p>注意：下面示例的 gitlab-runner 是直接装在物理机器上的，并且对应的镜像仓库使用的是 http 协议&lt;/p>
&lt;p>1、首先在安装 gitlab runner 的机器上安装 docker&lt;/p>
&lt;p>2、创建 &lt;code>/etc/docker/daemon.json&lt;/code>，内容如下&lt;br>
如果你的 gitlab 是使用的 HTTPS 协议，可以跳过这一步&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;insecure-registries&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;registry_addr&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;0.0.0.0&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3、重启 docker&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>systemctl restart docker.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4、为项目注册 gitlab-runner，其中执行者选择 &lt;code>docker&lt;/code>&lt;/p>
&lt;p>5、修改项目对应 gitlab-runner 的配置文件，默认情况为 &lt;code>/etc/gitlab-runner/config.toml&lt;/code>，在项目对应 runner 的 &lt;code>volumes&lt;/code> 后新增 &lt;code>&amp;quot;/var/run/docker.sock:/var/run/docker.sock&amp;quot;&lt;/code>的映射&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">runners&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://gitlab.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> = &lt;span style="color:#a6e22e">TOKEN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">executor&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">docker&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tls_verify&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;docker:20.10.12-dind&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">privileged&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disable_cache&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">volumes&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;/cache&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">s3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">gcs&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>6、更新 &lt;code>.gitlab-ci.yml&lt;/code>，大体内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker_build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">job_docker_build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">docker_build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker:20.10.12-dind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker login -u $REGISTRY_USER -p $REGISTER_PASSWORD $REGISTRY_ADDR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker build -t $REGISTRY_ADDR/test/hello:latest .&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker push $REGISTRY_ADDR/test/hello:latest&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的 &lt;code>$REGISTRY_USER&lt;/code>、 &lt;code>$REGISTER_PASSWORD&lt;/code>、 &lt;code>$REGISTRY_ADDR&lt;/code> 是定义在对应仓库的环境变量，分别代表镜像仓库的用户名、密码以及镜像仓库的地址。其中地址是不包含协议部分的，一般为： &lt;code>my.registry.com&lt;/code>&lt;/p>
&lt;p>待 gitlab-runner 的流水线执行完成之后，你应该就可以在镜像仓库看到刚刚构建好的镜像了&lt;/p></description></item><item><title>关于 Windows10 无法加载硬盘</title><link>https://www.dianbanjiu.com/post/%E5%85%B3%E4%BA%8E-windows10-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%A1%AC%E7%9B%98/</link><pubDate>Sat, 06 Nov 2021 13:38:04 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%85%B3%E4%BA%8E-windows10-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%A1%AC%E7%9B%98/</guid><description>&lt;p>今天装好 Windows 之后，发现我的 WD Passport Ultra 硬盘无法被系统正常加载。最初的报错忘记截图了，但是在设备管理器中可以看到磁盘的驱动状态是有问题的。&lt;br>
&lt;img src="https://i.imgur.com/BXgY2LS.png" alt="">
我的硬盘是 NTFS 格式的，虽然是在 Linux 下做的格式化，但是理论上 Windows 是可以识别的，而且我把硬盘接到手机上，手机是可以正常读取的。&lt;/p>
&lt;p>我去网上查了一下，说的最多的方案就是在设备管理器中，先删除该设备的驱动，然后重新插入硬盘就可以了。我尝试了一下，还是一样无法识别。&lt;/p>
&lt;p>我注意到在设备管理器中，除了没被挂载之外，磁盘其他的信息及状态都是正常的。后来想到 Windows 下面一般是根据盘符，比如 C、D 盘来区分磁盘的，既然它没被自动挂载，那我就手动给个盘符好了。&lt;/p>
&lt;p>然后，啊，然后它就好了😲，就可以正常被 Windows 挂载了。&lt;/p>
&lt;p>具体做法：&lt;/p>
&lt;ol>
&lt;li>打开资源管理器，在【&lt;strong>此电脑&lt;/strong>】上右键，选择【&lt;strong>管理&lt;/strong>】&lt;/li>
&lt;li>在打开的【&lt;strong>计算机管理&lt;/strong>】左侧选择【&lt;strong>磁盘管理&lt;/strong>】&lt;/li>
&lt;li>找到你之前无法被自动挂载的磁盘，在磁盘上面右键选择【&lt;strong>更改驱动器号和路径&lt;/strong>】&lt;/li>
&lt;li>给这个磁盘添加一个盘符就可以了&lt;/li>
&lt;/ol>
&lt;p>需要注意的是，这个时候如果你再回到设备管理器中，你会惊奇的发现，磁盘的驱动状态还是异常的😂，不过问题不大，你这时候再重新插拔磁盘，磁盘应该已经可以被自动挂载了。&lt;/p></description></item><item><title>如何在 Linux 下制作 Windows 启动器</title><link>https://www.dianbanjiu.com/post/%E5%A6%82%E4%BD%95%E5%9C%A8-linux-%E4%B8%8B%E5%88%B6%E4%BD%9C-windows-%E5%90%AF%E5%8A%A8%E5%99%A8/</link><pubDate>Sat, 06 Nov 2021 12:24:27 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%A6%82%E4%BD%95%E5%9C%A8-linux-%E4%B8%8B%E5%88%B6%E4%BD%9C-windows-%E5%90%AF%E5%8A%A8%E5%99%A8/</guid><description>&lt;p>在 Linux 下制作 Windows 启动盘，有三种常用的方式：dd、WoeUSB、Ventoy。&lt;/p>
&lt;h2 id="woeusb">WoeUSB&lt;/h2>
&lt;p>WoeUSB 可以使用 &lt;code>pip3 install WoeUsb-ng&lt;/code> 进行安装。&lt;/p>
&lt;p>WoeUSB 我以前用的时候还可以，但是这次也不知道为什么，虽然可以正常写入镜像，但是做的启动盘始终不能进入 Windows 引导界面，换了好几个版本的 Windows10 镜像都是一样的。&lt;/p>
&lt;h2 id="ventoy">Ventoy&lt;/h2>
&lt;p>Ventoy 的话，用起来比较简单，首先去 &lt;a href="https://www.ventoy.net/en/download.html">Ventoy 官方下载页面&lt;/a> 下载压缩包，解压后在终端执行 &lt;code>sudo bash /path/to/VentoyWeb.sh&lt;/code> 启动服务，接着访问启动信息中展示的本地端口，像我这里就是 24680 端口。在页面上选择你用来做启动盘的设备，然后点击安装即可。
&lt;img src="https://i.imgur.com/cH5zfZ3.png" alt="">&lt;br>
&lt;img src="https://i.imgur.com/F0b0m9S.png" alt="">
上面之所以需要使用 sudo 来运行，一方面是因为 Ventoy 需要获取你的 PC 上现在都有哪些存储设备，另一方面是因为安装的过程中需要对设备进行格式化。&lt;/p>
&lt;p>安装好 Ventoy 之后，你只需要把各种 ISO 镜像文件扔到安装 Ventoy 的 U 盘中即可。&lt;/p>
&lt;p>如果你现在看一下这个 U 盘的分区结构你可以发现 U 盘上会有两个分区，一大一小，后面很小的那个分区放的就是 Ventoy 的引导文件，前面这个分区是用来放你的镜像文件的，理论上你把前面这个分区用来存放其他文件也是完全没问题的。&lt;/p>
&lt;p>这次电脑成功进入了 Ventoy 的引导界面，但是在我选择了 ISO 文件之后，Ventoy 提示我缺少一些东西 Windows 引导失败（我裂开了）我又重新下载了最新的 Windows10 镜像，还是会出现同样的问题，可能是需要安装一些其他的 Ventoy 插件或者是 Ventoy 对于 AMD 的支持不太好？但是我没有继续折腾了。&lt;/p>
&lt;h2 id="dd">dd&lt;/h2>
&lt;p>这一 Part 的标题虽然是 dd，但是你也可以直接使用复制粘贴来完成，这个方案相比上面两个稍微麻烦一点，但是并不复杂，而且这也是我唯一测试成功的方案😭&lt;/p>
&lt;p>下面涉及到对磁盘的分区操作，熟悉终端工具的可以直接用 fdisk 跟 mkfs 完成，习惯 GUI 的可以使用 gparted 完成。&lt;/p>
&lt;p>下面是使用 dd 创建 Windows 启动盘的步骤：&lt;/p>
&lt;ol>
&lt;li>备份好 U 盘中的数据&lt;/li>
&lt;li>删除 U 盘中所有的分区&lt;/li>
&lt;li>创建 GPT 分区表&lt;/li>
&lt;li>在 U 盘上创建两个分区，其中第二个分区只需要留 300MB 的空间即可，剩下的可以全部给第一个分区（&lt;strong>注意：大的分区在前面，里面会存放 Windows 镜像中的文件，小的分区在后面，里面会放引导文件，两个分区的顺序一定不可以错：前大后小&lt;/strong>）
&lt;ol>
&lt;li>第一个分区格式化为 NTFS 格式&lt;/li>
&lt;li>第二个分区格式化为 Fat32 格式&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>直接复制或者使用 dd 将 Windows 镜像中的文件写入到 U 盘的第一个分区&lt;/li>
&lt;li>下载由 Rufus 提供的 &lt;a href="https://github.com/pbatard/rufus/blob/master/res/uefi/uefi-ntfs.img">uefi-ntfs.img&lt;/a> UEFI 引导镜像&lt;/li>
&lt;li>复制 uefi-utfs.img 中的所有文件到 U 盘的第二个分区中&lt;/li>
&lt;/ol>
&lt;p>待所有文件都写入完成之后，在 BIOS 中将 U 盘移动到启动顺序的第一个，然后启动电脑，应该就可以看到 Windows 的引导界面了。&lt;/p></description></item><item><title>IPhone 无法移动文件到 samba 共享目录</title><link>https://www.dianbanjiu.com/post/iphone-%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E5%88%B0-samba-%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</link><pubDate>Fri, 15 Oct 2021 00:43:52 +0800</pubDate><guid>https://www.dianbanjiu.com/post/iphone-%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E5%88%B0-samba-%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</guid><description>&lt;p>为了在局域网设备之间进行文件共享，最近一直在折腾 samba，目前已经基本上算是搞好了。但是在这个过程中也遇到了一个比较蛋疼的事情，就是通过 PC 和 Android 都可以正常向共享目录写入文件，在 IPhone 端虽然可以正常查看共享目录中的文件，但是无法将 IPhone 上的文件移动/复制到共享目录中。每次通过 IPhone 向共享目录中写入文件都会出现下面的报错：&lt;br>
&lt;img src="https://i.imgur.com/D4PxRwz.png" alt="Imgur">&lt;/p>
&lt;p>经过我在网上的一番冲浪之后找到了如下的解决方案：&lt;/p>
&lt;p>在 samba 配置文件的 [global] 中添加 &lt;code>vfs objects = fruit streams_xattr&lt;/code>（当然也可以仅针对某些特定的共享目录单独配置），然后重启 samba 服务，注意是重启 restart，不是重新加载配置文件 reload。仅重新加载配置文件这个规则还是无法生效的。&lt;/p>
&lt;p>samba 中的 VFS（虚拟文件系统）可以通过一些扩展模块增强 samba 的功能，而上面这行配置启用了 VFS 的两个模块，其中对解决本次问题起主要作用的是 &lt;code>fruit&lt;/code> 模块（可以的，果子🤣），这个模块主要是增强 samba 与 Apple 系统的兼容性。&lt;/p>
&lt;p>此外，如果从 IPhone 一次性向共享文件写入大量文件的话，可能会出现有些文件写失败的情况，这个问题暂时还没有找到解决方案，不过因为一次性写入大量文件需求也不是很多，暂时并不影响体验。&lt;/p>
&lt;p>&lt;a href="https://wiki.samba.org/index.php/Virtual_File_System_Modules">https://wiki.samba.org/index.php/Virtual_File_System_Modules&lt;/a>&lt;/p></description></item><item><title>山地车骑行</title><link>https://www.dianbanjiu.com/post/%E5%B1%B1%E5%9C%B0%E8%BD%A6%E9%AA%91%E8%A1%8C/</link><pubDate>Wed, 06 Oct 2021 11:23:28 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%B1%B1%E5%9C%B0%E8%BD%A6%E9%AA%91%E8%A1%8C/</guid><description>&lt;p>为了避免自己国庆在家瘫七天，总想着给自己整点活。作为一个社恐的肥宅，脑子中只有两个想法，一个是爬山，一个是骑行。这俩都属于那种不多逼逼，干就完事了的活动。&lt;/p>
&lt;p>因为之前按照《杭州登山地图》这个 app 已经爬过十里琅珰跟十里龙脊了，西溪谷慢行道感觉跟十里龙脊离得不远，就战略性放弃了，百里如意三十公里，我害怕爬完我人就没了。所以最后综合下来我还是选择了骑行。&lt;/p>
&lt;p>其实以前也一直想整一辆自己的单车玩玩来着，只不过限于时间金钱以及选择困难症，一直没有下手。&lt;/p>
&lt;p>国庆前也看了不少的评测以及推荐，本来想选择捷安特 Atx810 来着，但是无奈钱包空空，最后看来看去还是盯上了性价比之王喜德盛，最后选择的型号是 JX007 plus 精英版。&lt;br>
&lt;img src="https://i.imgur.com/E6tkQbq.jpg" alt="Imgur">&lt;/p>
&lt;p>具体的参数的话，我也在这里贴一下
&lt;img src="https://i.imgur.com/OfSPIm8.jpg" alt="Imgur">
因为我对这些参数也不是很懂，所以我就不做过多的参数解读了。&lt;/p>
&lt;p>这辆车是在京东 9 月 23 号下单的，25 号就到了，但是因为商家少给我发了一个多用装机工具，导致刹车一直没装上去。等到商家再把装机工具发过来的时候已经是 30 号了。但是我刹车装上之后前变速器哪里老是调整不好，链条总是蹭到变速器的调整片。没办法，我只好在某一个档位把链条调整好，然后国庆当天骑车去了附近一个喜德盛的代理店去做调整。&lt;/p>
&lt;p>这里也给大家一个小建议，如果你是第一次买山地车，对调整车辆没有什么经验的话，建议要么在线下店购买，让商家帮你现场调整好。或者在线上买之前先看看自己附近离哪个品牌的代理店最近。毕竟你是付费让他们给你调整，他们应该也不会为难你。我当时去的时候，前变速器整个都是歪的，老板拿锤子给我砸回来的，幸好不是小锤八十，大锤一百。&lt;/p>
&lt;p>至此这辆车就算是调整完成，可以正式上路了。下面就说一下在我个人的体感上对这辆车的感受。&lt;br>
&lt;img src="https://i.imgur.com/jjEj72y.jpg" alt="Imgur">&lt;/p>
&lt;p>首先是外观，整体我觉得还是比较好看的。整体车框带一点蓝紫变色，不过也就仅限于蓝紫变色了，如果你想要真的得到变色龙级别的变色效果，那可能会让你失个大望了。&lt;/p>
&lt;p>变速方面，前变速器是蓝图，有三档，后变速器是禧玛诺，有九档，这俩的具体型号就不太清楚了。&lt;/p>
&lt;p>不知道是不是因为前变速器本身档位比较少的原因，在变速的时候不是很灵敏，特别是从二档到三档的时候，你指拨但凡快一点，链条就会在二档跟三档的盘面上疯狂摩擦（像极了小时候想翻墙出去上网却爬不上墙的你了），所以从二档切到三档的时候只能慢慢的按指拨，这个过程差不多需要一秒到两秒才能完成。&lt;/p>
&lt;p>国庆当天在调整完车子之后我就顺便去杭州湘湖骑行了一圈，因为那边的路相对来说还算是比较平坦的，所以一路上基本上都可以维持在中高速档位上。一路上基本都是使用前二后六七八，前三后八九的档位组合。&lt;/p>
&lt;p>唯一跟不上的就只有我的身体，这一趟骑行下来，差不多四十公里左右的样子，一路上尽受“胯下之辱”了，而且手腕也巨疼。可能是肥宅太久了，体能确实跟不上了，工作一年，基本上抛弃了所有运动，每天最大的运动量就是取外卖的几百米路了。&lt;/p>
&lt;p>根据我这几天的骑行，这里也给大家推荐几个我在使用的骑行装备吧&lt;/p>
&lt;ol>
&lt;li>头盔。其他所有装备都可以少，但是请大家务必给自己配个头盔。一个好的头盔可以在绝大多数的事故中保护你的小脑瓜。至于买哪个根据自己喜好来就好了&lt;/li>
&lt;li>魔术头巾。魔术头巾也是一个多用工具，不是必须，但是在长距离骑行中可以增进你的骑行体验。一方面你可以套在头上或者脖子上用来吸汗，避免汗水流的满脸都是，另一方面也可以给你提供一定的保温效果，避免你脱水又失温&lt;/li>
&lt;li>骑行手套。骑山地车或者公路车不像骑电动车，骑电动车一般情况下你是可以保持正常坐姿骑行的，而骑行山地车的时候你是需要半趴在车上的，公路车好像姿势就更低了。所以骑山地车的时候你其实有很大一部分的体重是压在手以及手腕上的，而车把一般为了防滑都会带有一些花纹，所以你如果裸手直接压在车把上，可能会非常难受。戴上手套之后可以些微缓解这种情况&lt;/li>
&lt;li>防晒冰丝。如果你是在穿短袖的季节骑行，并且没有防晒服的话，建议你整一个防晒冰丝套胳膊上，给自己加一点物理防晒的 buff。我十月一的骑行就因为什么防晒措施都没做，黑了一大截。而且防晒冰丝这东西说实话，戴上之后的体感真的可以比其他暴露在阳光下的皮肤温度低一点，不知道是不是错觉，哈哈&lt;/li>
&lt;li>骑行裤。这个东西如果你是进行长途骑行，建议整一个，我这这两次长途骑行都没有穿，现在屁股很疼，前列腺爆炸&lt;/li>
&lt;/ol>
&lt;p>最后我给大家推荐几条两条我尝试过的骑行路线。不过我人是在杭州滨江这边，所以推荐的路线也会偏向这边一点。&lt;/p>
&lt;ol>
&lt;li>湘湖。湘湖那边有专门的自行车道，好像一共有三期车道，有长有短。我第一次比较憨憨，直接绕着整个湘湖转了一圈，还是有点累的。不过好在那边全都是铺设好的车道，除了有几座桥需要爬爬坡，剩下的都是比较平坦的路。而且那边还有音乐喷泉，累了可以去那边歇一歇，看一看&lt;/li>
&lt;li>闻涛路。闻涛路旁边就是钱塘江，另一边都是草木植物，整条路几乎没有任何爬坡，唯一需要爬坡的是一座桥下，但是你完全可以毫不费力的从一边直接溜到另一边。推荐下午五六点的时候骑行，那个时候天气会比较凉快一些，而且那个时候，夕阳西下景色相对也会好一点&lt;/li>
&lt;/ol></description></item><item><title>各类数据库获取执行计划的方式</title><link>https://www.dianbanjiu.com/post/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8E%B7%E5%8F%96%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 27 Sep 2021 00:10:18 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8E%B7%E5%8F%96%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>本文仅介绍各类数据库执行计划的获取方式，执行计划内容的解读请参照官方文档&lt;/p>&lt;/blockquote>
&lt;p>创建示例表 test，对应 DDL 语句如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span> test (id int &lt;span style="color:#66d9ef">primary&lt;/span> &lt;span style="color:#66d9ef">key&lt;/span>, name varchar(&lt;span style="color:#ae81ff">20&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="postgresqlkingbase人大金仓">PostgreSQL/Kingbase（人大金仓）&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">explain&lt;/span> [(format [json&lt;span style="color:#f92672">|&lt;/span>yaml&lt;span style="color:#f92672">|&lt;/span>text])] &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>format&lt;/code> 参数是可选的，但是格式化之后的数据可以方便通过代码读取&lt;/li>
&lt;li>支持的 SQL 类型 SELECT，INSERT，UPDATE，DELETE，VALUES，EXECUTE，DECLARE，CREATE TABLE，CREATE MATERIALIZED VIEW&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不添加 &lt;code>format&lt;/code> 参数的结果&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Seq Scan on test (cost=0.00..22.70 rows=1270 width=36)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>添加 &lt;code>format json&lt;/code> 的结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Plan&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Node Type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Seq Scan&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Parallel Aware&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Relation Name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Alias&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Startup Cost&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0.00&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Total Cost&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">22.70&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Plan Rows&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1270&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Plan Width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">36&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mysql">MySQL&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">explain&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>支持的 SQL 类型：SELECT，DELETE，INSERT，REPLACE，UPDATE&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://imgur.com/gRhu4YL.png" alt="Imgur">&lt;/p>
&lt;h2 id="oracle">Oracle&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> plan_table &lt;span style="color:#66d9ef">where&lt;/span> statement_id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{statement_id}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">explain&lt;/span> plan &lt;span style="color:#66d9ef">set&lt;/span> statement_id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{statement_id}&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> id,lpad(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>,depth&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)&lt;span style="color:#f92672">||&lt;/span>&lt;span style="color:#66d9ef">operation&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#66d9ef">options&lt;/span> PLAN_STEP,OBJECT_OWNER,OBJECT_NAME,OBJECT_TYPE,COST,&lt;span style="color:#66d9ef">CARDINALITY&lt;/span>,ACCESS_PREDICATES,FILTER_PREDICATES &lt;span style="color:#66d9ef">from&lt;/span> plan_table &lt;span style="color:#66d9ef">where&lt;/span> statement_id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{statement_id}&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> id&lt;span style="color:#e6db74">&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在执行之前需要先从表执行计划的表中删除指定 &lt;code>{statement_id}&lt;/code> 的数据&lt;/li>
&lt;li>&lt;code>{statement_id}&lt;/code> 是执行计划表中一次执行计划的唯一标识&lt;/li>
&lt;li>支持的 SQL 类型：INSERT，UPDATE，DELETE，SELECT&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://imgur.com/hPRd7YM.png" alt="Imgur">&lt;/p>
&lt;h2 id="db2">DB2&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">explain&lt;/span> plan &lt;span style="color:#66d9ef">set&lt;/span> QUERYTAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{statement_id}&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>DB2 需要先设置解释 schema &lt;code>{explain_schema}&lt;/code>之后才能获取对应的执行计划数据&lt;/li>
&lt;li>&lt;code>{statement_id}&lt;/code> 是执行计划表中一次执行计划的唯一标识&lt;/li>
&lt;li>DB2 的执行结果需要结合多张解释表综合读取，此处就不做展示了&lt;/li>
&lt;li>支持的 SQL 类型：SELECT，MERGE，TRUNCATE，INSERT，UPDATE，DELETE&lt;/li>
&lt;/ul>
&lt;h2 id="sql-server">SQL Server&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span> showplan_all &lt;span style="color:#66d9ef">on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span> showplan_all &lt;span style="color:#66d9ef">off&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>SQL Server 提供了三种类型的参数来获取执行计划 &lt;code>showplan_all/showplan_xml/showplan_text&lt;/code>
&lt;ul>
&lt;li>&lt;code>showplan_xml/showplan_text&lt;/code> 是以文本的形式展示执行计划&lt;/li>
&lt;li>&lt;code>showplan_all&lt;/code> 则是以结果集的形式展示执行计划&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>位于 &lt;code>set showplan_all on&lt;/code> 与 &lt;code>set showplan_all off&lt;/code> 之间的语句并不会实际执行，所以在开启 &lt;code>showplan&lt;/code> 参数之后记得关掉它，否则在当前会话执行的所有 SQL 都不会实际去执行&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>showplan_all 结果展示&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://imgur.com/8rQ3Amn.png" alt="Imgur">&lt;/p>
&lt;p>&lt;strong>showplan_xml 结果展示&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;ShowPlanXML&lt;/span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://schemas.microsoft.com/sqlserver/2004/07/showplan&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Build=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;9.00.1399.06&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;BatchSequence&amp;gt;&amp;lt;Batch&amp;gt;&amp;lt;Statements&amp;gt;&amp;lt;StmtSimple&lt;/span> &lt;span style="color:#a6e22e">StatementText=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;select * from test&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">StatementId=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">StatementCompId=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">StatementType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;SELECT&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">StatementSubTreeCost=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.0409839&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">StatementEstRows=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10032&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">StatementOptmLevel=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TRIVIAL&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;StatementSetOptions&lt;/span> &lt;span style="color:#a6e22e">QUOTED_IDENTIFIER=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ARITHABORT=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">CONCAT_NULL_YIELDS_NULL=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ANSI_NULLS=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ANSI_PADDING=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ANSI_WARNINGS=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">NUMERIC_ROUNDABORT=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&amp;lt;QueryPlan&lt;/span> &lt;span style="color:#a6e22e">CachedPlanSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;9&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;RelOp&lt;/span> &lt;span style="color:#a6e22e">NodeId=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">PhysicalOp=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Table Scan&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">LogicalOp=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Table Scan&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EstimateRows=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10032&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EstimateIO=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.0298702&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EstimateCPU=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.0111137&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">AvgRowSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;11&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EstimatedTotalSubtreeCost=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.0409839&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Parallel=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EstimateRebinds=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">EstimateRewinds=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;OutputList&amp;gt;&amp;lt;ColumnReference&lt;/span> &lt;span style="color:#a6e22e">Database=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[master]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Schema=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[dbo]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Table=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[test]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&amp;lt;/OutputList&amp;gt;&amp;lt;TableScan&lt;/span> &lt;span style="color:#a6e22e">Ordered=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ForcedIndex=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">NoExpandHint=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;DefinedValues&amp;gt;&amp;lt;DefinedValue&amp;gt;&amp;lt;ColumnReference&lt;/span> &lt;span style="color:#a6e22e">Database=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[master]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Schema=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[dbo]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Table=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[test]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Column=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&amp;lt;/DefinedValue&amp;gt;&amp;lt;/DefinedValues&amp;gt;&amp;lt;Object&lt;/span> &lt;span style="color:#a6e22e">Database=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[master]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Schema=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[dbo]&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Table=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[test]&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&amp;lt;/TableScan&amp;gt;&amp;lt;/RelOp&amp;gt;&amp;lt;/QueryPlan&amp;gt;&amp;lt;/StmtSimple&amp;gt;&amp;lt;/Statements&amp;gt;&amp;lt;/Batch&amp;gt;&amp;lt;/BatchSequence&amp;gt;&amp;lt;/ShowPlanXML&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dm达梦">DM（达梦）&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SQL&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">explain&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://imgur.com/F0e4Vsd.png" alt="Imgur">&lt;/p>
&lt;h2 id="informix">Informix&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo -e &lt;span style="color:#e6db74">&amp;#34;SET EXPLAIN FILE TO &amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{temp_file}&amp;#39;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;;\n SET EXPLAIN ON AVOID_EXECUTE;\n select * from test1\n &amp;#34;&lt;/span>| dbaccess sysmaster
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Informix 的执行计划是通过终端命令而非 SQL 指令来获取的&lt;/li>
&lt;li>&lt;code>{temp_file}&lt;/code> 指定的是执行计划的输出文件，若该文件不存在，Informix 会自动创建&lt;/li>
&lt;li>支持审核的 SQL 类型：SELECT，MERGE，INSERT，UPDATE，DELETE&lt;/li>
&lt;/ul></description></item><item><title>自动生成 Excel 列标</title><link>https://www.dianbanjiu.com/post/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-excel-%E5%88%97%E6%A0%87/</link><pubDate>Sun, 22 Aug 2021 14:55:33 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-excel-%E5%88%97%E6%A0%87/</guid><description>&lt;p>最近开发中涉及到将结果导出到 Excel 文件的功能，我看了一下现有的这些操作 Excel 的开源项目，无论是 Golang 还是 Python，基本上都不支持一次性插入一行数据，只能通过指定 cell 位置来一个个插入，而一个 cell 的位置基本包含这三项（sheet 名，列标，行号），sheet 名好说，毕竟是我自己生成的名字；行号也比较方便拿到；但是列标就有一丢丢蛋疼了，都是由字母拼成的，既然没有现成的实现，就只能自己实时计算了。&lt;/p>
&lt;p>&lt;img src="https://imgur.com/6aEufje.png" alt="excel 界面示意图">&lt;/p>
&lt;p>观察了一下 Excel 的列标发现，Excel 的列标完全由 26 个英文字母按顺序全排列组合而成，大体规律如下&lt;/p>
&lt;ul>
&lt;li>1 个字母：A,B,C&amp;hellip;Z&lt;/li>
&lt;li>2 个字母：AA,AB&amp;hellip;BA,BB&amp;hellip;CA,CB&amp;hellip;ZY,ZZ&lt;/li>
&lt;li>3 个字母：AAA,AAB&amp;hellip;BAA,BAB&amp;hellip;CAA,CAB&amp;hellip;ZZY,ZZZ&lt;/li>
&lt;li>n 个字母：&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;p>如果想要计算给定列数 n 对应的列标，可以通过让 n 不断与 26 进行取余操作来实现（&lt;strong>类似计算一个数值对应二进制数的方式，不过此处将 0 和 1 替换为了 26 个英文字母&lt;/strong>）。比如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>23&lt;/strong>：23%26=0&amp;hellip;23，f[n] = letters[23] = &amp;ldquo;W&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>56&lt;/strong>：56%26=2&amp;hellip;4，f[n] = letters[2]+letters[4] = &amp;ldquo;BD&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>1998&lt;/strong>：1998%26=76&amp;hellip;22，76%26=2&amp;hellip;24，f[n] = result[76] + letters[22] = letters[2]+letters[24]+letters[22] = &amp;ldquo;BXV&amp;rdquo;&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>通过上面的归纳，可以看出，这其实是一个动态规划的问题，每一个 n 对应的列标值为 &lt;strong>n/26 + n%26&lt;/strong>，前 26 个列标均为单个字母，它们不需要与其他字母进行组合。所以根据这个逻辑可以得到下面的公式：&lt;/p>
&lt;ul>
&lt;li>n&amp;lt;=26：result[n] = letters[n]&lt;/li>
&lt;li>n&amp;gt;26：result[n] = result[n/26]+result[n%26]&lt;/li>
&lt;/ul>
&lt;p>动态规划的问题一般来说只要能归纳出上的计算公式，那对应的代码逻辑其实就比较简单了，上代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetExcelColList&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Excel 的列标是由 26 个英文字母按照顺序组合而成的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 此处通过一个数组先保存基础的 26 个列标&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">baseList&lt;/span> = []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;C&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;E&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;F&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;G&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;H&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;I&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;J&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;K&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;L&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;M&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;N&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;O&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;P&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Q&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;R&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;S&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;T&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;U&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;V&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;W&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;X&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Y&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Z&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 为了方便后面生成，此处将列数调整为 26 的整数倍&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">26&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据上面计算出的列数提前创建好一个数组用来存储列标&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> = make([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 无论列数的大小，默认填充前 26 个列标&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 因为前 26 个列标均未单个字母，不是组合而成的元素，所以此处单独生成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> copy(&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">baseList&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从第 n = 26 开始，列标生成规则为：result[n] = result[n/26 -1] + result[n%26]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 因为数组的下标是从 0 开始的，所以上面需要 -1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">26&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">result&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据列数返回所需的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>利用 Swagger UI 生成漂亮的接口文档</title><link>https://www.dianbanjiu.com/post/%E5%88%A9%E7%94%A8-swagger-ui-%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link><pubDate>Sun, 08 Aug 2021 13:56:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%88%A9%E7%94%A8-swagger-ui-%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid><description>&lt;p>最近在跟前端进行对接的时候，规定了后端每个接口都必须要写接口文档，并且必须生成对应的 .json/.yaml 文件，这样他们就可以通过接口文件直接生成对应的 ts 文件，能够准确的进行接口参数的对接。这一部分现在我已经通过 Gitlab CI + 文件服务器的方式实现了。&lt;/p>
&lt;p>但是作为后端，有时候想看看现在有什么接口，接口里有什么参数，之前只能通过看代码，现在有了接口文件，那当然是要搞个花里胡哨的东西来展示一下了。既然要看 Swagger 文档，最简单且有效的工具当然就是 Swagger 官方提供的 Swagger UI 了。&lt;/p>
&lt;p>下面就来看看怎么来整一个 Swagger UI 玩玩。&lt;/p>
&lt;h2 id="安装">&lt;strong>安装&lt;/strong>&lt;/h2>
&lt;p>我们下面使用 Docker 来安装 Swagger UI。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker pull swaggerapi/swaggerui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动">&lt;strong>启动&lt;/strong>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run -d -p 80:8080 -v ~/swagger:/usr/share/nginx/html/swagger --name swagger-ui swaggerapi/swagger-ui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>d&lt;/code> 会让该容器以守护进程的形式在后台运行&lt;/li>
&lt;li>&lt;code>p&lt;/code> 映射容器的 8080 端口到本机的 80 端口&lt;/li>
&lt;li>&lt;code>v&lt;/code> 挂载本机的 &lt;code>~/swagger&lt;/code> 目录到容器的 &lt;code>/usr/share/nginx/html/swagger&lt;/code>&lt;/li>
&lt;li>&lt;code>-name&lt;/code> 设定该容器的名字，方便以后通过名字对容器进行一些操作&lt;/li>
&lt;/ul>
&lt;p>启动完成之后，你就可以将已有的 swagger 文档（.yaml、.json 文件）放到 &lt;code>~/swagger&lt;/code> 目录下（假设该目录下已经有了一个名为 swagger.json 的文件），打开浏览器，访问 &lt;code>http://ip&lt;/code> 页面，在搜索框输入 &lt;code>swagger/swagger.json&lt;/code> 就可以查看你的接口文档了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rR7fnLm.png" alt="https://i.imgur.com/rR7fnLm.png">&lt;/p>
&lt;h2 id="说明">&lt;strong>说明&lt;/strong>&lt;/h2>
&lt;p>下面是 Swagger UI 容器中 nginx 的配置文件，在容器中的 &lt;code>/etc/nginx/nginx.conf&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>worker_processes 1;
events {
worker_connections 1024;
}
http {
include mime.types;
default_type application/octet-stream;
sendfile on;
keepalive_timeout 65;
gzip on;
gzip_static on;
gzip_disable &amp;#34;msie6&amp;#34;;
gzip_vary on;
gzip_types text/plain text/css application/javascript;
map $request_method $access_control_max_age {
OPTIONS 1728000; # 20 days
}
server_tokens off; # Hide Nginx version
server {
listen 8080;
server_name localhost;
index index.html index.htm;
location / {
absolute_redirect off;
alias /usr/share/nginx/html/;
expires 1d;
location ~* \.(?:json|yml|yaml)$ {
#SWAGGER_ROOT
expires -1;
include cors.conf;
}
include cors.conf;
}
}
}
&lt;/code>&lt;/pre>&lt;p>Swagger UI 的容器中启动了一个 nginx 服务，通过 nginx 来指定你需要访问的接口文档，默认情况下，该容器中 nginx 监听的是 8080 端口。&lt;/p>
&lt;p>可以看到，当你访问 http://ip:80/ 时，它默认访问的是 &lt;code>/usr/share/nginx/html/index.html&lt;/code> ，当你在搜索框中输入一些文档名时，它会直接在 &lt;code>/usr/share/nginx/html/&lt;/code> 下找，找到了就会展示出来，找不到就会直接报错。所以上面才需要将本机存放接口文档的目录挂载到 &lt;code>/usr/share/nginx/html/&lt;/code> 下。&lt;/p>
&lt;p>当然，无论是端口还是文档的存放位置，你都是可以通过修改镜像/容器的方式来更改。&lt;/p></description></item><item><title>关于 Alertmanager 中 group_interval 与 repeat_interval 上的一些坑</title><link>https://www.dianbanjiu.com/post/alertmanager-%E4%B8%AD%E4%B8%89%E4%B8%AA%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link><pubDate>Wed, 14 Jul 2021 23:56:01 +0800</pubDate><guid>https://www.dianbanjiu.com/post/alertmanager-%E4%B8%AD%E4%B8%89%E4%B8%AA%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid><description>&lt;p>Alertmanager 中有三个关于告警时间的参数：&lt;/p>
&lt;ol>
&lt;li>group_wait：alertmanager 在接收到一条新的告警（第一次出现的告警）时，将这条告警发送给 receiver 之前需要等待的时间&lt;/li>
&lt;li>group_interval：对于一条已经出现过的告警，alertmanager 检查会每隔 group_interval 时间检查一次告警&lt;/li>
&lt;li>repeat_interval： 对于一条已经出现过的告警，每隔 repeat_interval 会重新发送给 receiver&lt;/li>
&lt;/ol>
&lt;p>这三个参数的基础含义比较简单，但是在最近的使用中，我发现当我按照如下格式设置这三个参数时：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">group_wait&lt;/span>: &lt;span style="color:#ae81ff">15m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">group_interval&lt;/span>: &lt;span style="color:#ae81ff">5m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">repeat_interval&lt;/span>: &lt;span style="color:#ae81ff">15m&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我将会每隔 20m 收到一次告警，如果我将 repeat_interval 设置为 20m，那我将会每 25m 收到一次告警&amp;hellip;&lt;br>
这种现象好像跟这三个参数在 alertmanager 文档中的说明不太一样啊。在搜寻无果之后，我在 alertmanager 的 github 仓库上提了一个 issue，官方给出了一个比较合理的解释。&lt;/p>
&lt;p>&lt;a href="https://github.com/prometheus/alertmanager/issues/2647">点此查看此 issue&lt;/a>&lt;/p>
&lt;p>我根据 Issue 的回答简单总结了一下这三个参数的含义：&lt;/p>
&lt;blockquote>
&lt;p>Alertmanager 在收到一条新的告警之后，会等待 group_wait 时间，对这条新的告警做一些分组、更新、静默的操作。当第一条告警经过 group_wait 时间之后，Alertmanager 会每隔 group_interval 时间检查一次这条告警，判断是否需要对这条告警进行一些操作，当 Alertmanager 经过 n 次 group_interval 的检查后，n*group_interval 恰好大于 repeat_interval 的时候，Alertmanager 才会将这条告警再次发送给对应的 receiver。&lt;/p>&lt;/blockquote>
&lt;p>结合我上面的例子，第一条告警在发送给 alertmanager 15m 后会第一次发送给 receiver，接着 Alertmanager 会每隔 5m 检查一次这条告警，在第 4 次检查的时候，到上次告警发出的时间刚好经过了 5*4=20&amp;gt;15，所以第二次告警会在第一条告警发出后的 20m 后再次发出，此后每条重复告警都会每隔 20m 发送一次。&lt;/p>
&lt;p>这也就意味着在上面的例子中，当你的 15m&amp;lt;repeat_interval&amp;lt;20m 时，任意两条重复告警的间隔都是 20m。&lt;/p>
&lt;p>此外还有一个问题：在上面的例子中，如果 alertmanager 是每隔 5m 检查一次告警，那为什么不是恰好在 15m 的时候发出这条告警？关于这个问题，在 Issue 中尚未给出比较明确的答复。&lt;/p>
&lt;p>根据目前的情况，这个问题有两个暂时解决方案：&lt;/p>
&lt;ol>
&lt;li>调整 repeat_interval 的值：同样结合上面的例子，如果你想每隔 20m 收到一次重复告警，那就把 repeat_interval 设置为 [15m,20m) 之间的任意一个时间&lt;/li>
&lt;li>调整 group_interval 的值：既然 alertmanager 会每隔 group_interval 检查一次已有的告警，那就尽可能将它的时间调的低一些，比如将其设置为 1m，这样你最多在你设置的 repeat_interval+1m 左右就可以收到重复告警&lt;/li>
&lt;/ol></description></item><item><title>What's the Difference Between Git Merge and Git Rebase</title><link>https://www.dianbanjiu.com/post/whats-the-difference-between-git-merge-and-git-rebase/</link><pubDate>Sat, 10 Jul 2021 14:07:01 +0800</pubDate><guid>https://www.dianbanjiu.com/post/whats-the-difference-between-git-merge-and-git-rebase/</guid><description>&lt;p>git merge 与 git rebase 是我们平常协同开发过程中最常见，但是也是最容易让人迷惑的两个合并操作。下面是我对这两种合并方式的理解以及一些使用建议。&lt;/p>
&lt;h2 id="git-merge">git merge&lt;/h2>
&lt;p>git merge 相对来说比较好理解，他会将待 merge 的分支上所有不存在于当前分支的提交按照时间顺序插入到当前分支上，最后再生成一个 &lt;code>Merge branch 'xxx'&lt;/code> 的 commit。&lt;/p>
&lt;p>基础语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># git merge other-branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git checkout master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git merge feature
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 merge 操作的基本图例。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KerogMC.png" alt="git merge">&lt;/p>
&lt;p>merge 操作不会对每个提交节点本身做任何修改，也就是说在提交前后每个节点的提交信息、sha256 等信息都是一致的。&lt;/p>
&lt;p>最后生成的合并节点 M 中一般会包含待提交分支与当前分支的所有差异代码，代码合并过程中的冲突修正也是在 M 节点中。一次 merge 操作最多只需要解决一次代码冲突。&lt;/p>
&lt;h2 id="git-rebase">git rebase&lt;/h2>
&lt;p>rebase 操作会移动当前分支的基点（创建当前分支时基于的节点）为上游分支的最新提交，然后重写当前分支基点后的所有提交。&lt;/p>
&lt;p>基础语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># git rebase upstream branch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git checkout feature
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git rebase master feature
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面是 rebase 的基础图例：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/PC8iDcZ.png" alt="git rebase">&lt;/p>
&lt;p>rebase 操作会把 feature 的基点从 C 移到 D，然后重写 C、E，虽然表面上看 C、E 的提交信息没有任何变化，但是这两个点的 sha256 值其实已经不同了，相当于是两个新的提交。&lt;/p>
&lt;p>rebase 过程中如果出现冲突，则需要针对冲突节点进行修改，修改完成后使用 &lt;code>git rebase --continue&lt;/code> 继续 rebase，整个过程中不会产生类似 &lt;code>Merge branch xxx&lt;/code> 的额外提交。&lt;/p>
&lt;p>rebase 与 merge 相比，虽然可以减少一些无用的合并提交，但是因为 rebase 会基于上游分支重写当前分支，所以一般情况下不建议在主分支上进行 rebase 操作。&lt;/p>
&lt;h2 id="使用建议">使用建议&lt;/h2>
&lt;p>因为现在公司的合并检查都是通过 CI 来做的，所以你提的 merge 请求至少不能与主版本发生任何冲突，这样才能通过检查。下面是我在日常工作流中两种合并操作的使用方式。&lt;/p>
&lt;ol>
&lt;li>在非主版本上进行开发时，定期（一般是每次提交后）将主分支的更新 rebase 到当前分支，有冲突及早解决&lt;/li>
&lt;li>在主版本上只使用 merge 操作合并其他分支的代码&lt;/li>
&lt;/ol></description></item><item><title>😶‍🌫️在 Supervisor 中调用环境变量</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8-supervisor-%E4%B8%AD%E8%B0%83%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link><pubDate>Fri, 02 Jul 2021 22:29:31 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8-supervisor-%E4%B8%AD%E8%B0%83%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid><description>&lt;blockquote>
&lt;p>以前总觉得写东西就得上纲上线，一篇不整个几千字都不敢发出来。现在想想，我又不是奔着出书的目的去的，我只是纯粹的想记录一些东西，又何必限制于篇幅呢&lt;/p>&lt;/blockquote>
&lt;p>supervisor 调用的环境变量分为两种，一种是在 supervisor 配置文件中使用系统已经定义好的环境变量，另一种为 supervisor 子程序运行过程中使用的环境变量。&lt;/p>
&lt;h2 id="supervisor-配置文件中调用系统环境变量">supervisor 配置文件中调用系统环境变量&lt;/h2>
&lt;p>此类环境变量一般用来定义一些预先无法确定的变量，比如可以自定义安装位置的程序，可以将其主目录定义在系统环境变量中，如果程序的安装位置发生了变化，只需要修改一次环境变量中对应的值即可，而无需再对 supervisor 的配置文件进行修改。&lt;/p>
&lt;p>在 supervisor 的配置文件中调用系统的环境变量时，需要以 &lt;code>%(ENV_xxxx)s&lt;/code> 的格式进行调用。假如我的系统环境变量中有这样一个环境变量 &lt;code>export MY_HOME=/opt/home&lt;/code>，那我在 supervisor 中就要以 &lt;code>%(ENV_MY_HOME)s&lt;/code>进行调用。&lt;/p>
&lt;h2 id="定义子程序运行的环境变量">定义子程序运行的环境变量&lt;/h2>
&lt;p>此类环境变量一般用来定义子程序所依赖的一些库文件。&lt;/p>
&lt;p>子程序的环境变量需要在自己的 &lt;code>[program:x]&lt;/code> 下新增 &lt;code>environment&lt;/code> 字段。如 &lt;code>environment=LD_LIBRARY=/opt/home/lib&lt;/code>。&lt;/p>
&lt;p>下面是一个带有上面两种环境变量定义的简单例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat supervisor.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>inet_http_server&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port&lt;span style="color:#f92672">=&lt;/span>0.0.0.0:9111
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>program:hello&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>depends_on&lt;span style="color:#f92672">=&lt;/span>hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command&lt;span style="color:#f92672">=&lt;/span>%&lt;span style="color:#f92672">(&lt;/span>ENV_MY_HOME&lt;span style="color:#f92672">)&lt;/span>s/hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>directory&lt;span style="color:#f92672">=&lt;/span>%&lt;span style="color:#f92672">(&lt;/span>ENV_MY_HOME&lt;span style="color:#f92672">)&lt;/span>s/hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>autostart&lt;span style="color:#f92672">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>autorestart&lt;span style="color:#f92672">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stopwaitsecs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stdout_logfile&lt;span style="color:#f92672">=&lt;/span>%&lt;span style="color:#f92672">(&lt;/span>ENV_MY_HOME&lt;span style="color:#f92672">)&lt;/span>s/logs/hello.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stderr_logfile&lt;span style="color:#f92672">=&lt;/span>%&lt;span style="color:#f92672">(&lt;/span>ENV_MY_HOME&lt;span style="color:#f92672">)&lt;/span>s/logs/hello.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stdout_logfile_maxbytes&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10485760&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stdout_logfile_backups&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stderr_logfile_maxbytes&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10485760&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stderr_logfile_backups&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>environment&lt;span style="color:#f92672">=&lt;/span>LD_LIBRARY&lt;span style="color:#f92672">=&lt;/span>%&lt;span style="color:#f92672">(&lt;/span>ENV_MY_HOME&lt;span style="color:#f92672">)&lt;/span>s/lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo $MY_HOME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/opt/home
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gitlab Runner 运行报错（1）</title><link>https://www.dianbanjiu.com/post/gitlab-runner-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%991/</link><pubDate>Mon, 28 Jun 2021 21:42:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/gitlab-runner-%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%991/</guid><description>&lt;blockquote>
&lt;p>今天在《也谈钱》的公众号看到一个很有意思的观点：&lt;/p>
&lt;p>你所有的工作都包含两部分：你可以带走的和带不走的，如果你只注意自己带不走的部分，那你就是在为老板工作，注定会很累，如果你将注意力放在你可以提炼带走的部分，那你就是在为自己工作&lt;/p>&lt;/blockquote>
&lt;h2 id="问题描述及解决方案">问题描述及解决方案&lt;/h2>
&lt;p>今天在给新项目添加了 Runner 之后，出现了打包失败的情况，下面是基本的情况以及解决方案。&lt;/p>
&lt;p>项目情况：项目使用 &lt;code>gitlab-runner register&lt;/code> 添加的 Runner，执行者为 Docker，使用的是自定义的 node 镜像，镜像名称为 &lt;code>node:v12&lt;/code>。&lt;/p>
&lt;p>在将代码提交到 gitlab 之后，自动触发 CI，但是 CI 提示下面的报错：&lt;/p>
&lt;pre tabindex="0">&lt;code>Running with gitlab-runner 13.0.0 (c127439c)
on xxx ddd T8Hqqyzz
Preparing the &amp;#34;docker&amp;#34; executor
00:07
Using Docker executor with image node:v12 ...
Pulling docker image node:v12 ...
ERROR: Job failed: Error response from daemon: manifest for node:v12 not found: manifest unknown: manifest unknown (docker.go:198:3s)
&lt;/code>&lt;/pre>&lt;p>可以看到，上面的报错是出现在拉取 Docker 镜像的过程中，提示 Docker 找不到名为 &lt;code>node:v12&lt;/code> 的镜像。但是我在运行 Runner 的机器上已经构建好了 node:v12 的镜像，为什么还是会拉取失败呢？&lt;/p>
&lt;p>其实是因为 Gitlab Runner 的 Docker 执行者默认是直接从 Docker Hub 拉取你指定的镜像，即使你本地已经有了需要的镜像，所以当它在 Docker Hub 找不到 &lt;code>node:v12&lt;/code> 的镜像时，就会出现上面的报错。&lt;/p>
&lt;p>要解决这个问题也很简单，就是在 gitlab runner 的配置文件中添加 &lt;code>pull_policy = &amp;quot;if-not-present&amp;quot;&lt;/code> 的参数，添加方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">runners&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;runner test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;http://www.gitlab.com/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;T9hppyxxbwN_PZNen1_o&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">executor&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">custom_build_dir&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">s3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">gcs&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">runners&lt;/span>.&lt;span style="color:#a6e22e">docker&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tls_verify&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;node:v12&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">privileged&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disable_entrypoint_overwrite&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">oom_kill_disable&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disable_cache&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">volumes&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;/cache&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 在下面设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pull_policy&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;if-not-present&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">shm_size&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关于-pull_policy-参数">关于 &lt;code>pull_policy&lt;/code> 参数&lt;/h2>
&lt;p>&lt;code>pull_policy&lt;/code> 参数是用来指定当你使用 Docker/Docker machine 作为执行者时镜像的拉取策略。该参数共有三个可选项，你可以设置零个或者多个选项作为该参数的值。&lt;/p>
&lt;ul>
&lt;li>never：这个选项意味着仅使用本地的 Docker 镜像，任何你需要的镜像都必须先手动拉取到本地，否则在运行 CI 的时候就会出现下面的报错&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Pulling docker image node:latest ...
ERROR: Build failed: Error: image local_image:latest not found
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>if-not-present：这个选项会先在本地检查是否有指定的镜像，没有的话会在 Docker Hub 拉取。如果你想避免从 Docker Hub 拉取镜像的时间，又有使用自定义镜像的需求，可以使用该选项。&lt;/li>
&lt;li>always：&lt;code>pull_policy&lt;/code> 的默认值，总是从 Docker Hub 拉取镜像。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>参数的设置方式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不设置：在不添加 &lt;code>pull_policy&lt;/code> 字段的情况下，&lt;code>pull_policy&lt;/code> 默认为 always。&lt;/li>
&lt;li>单值设置： &lt;code>pull_policy = &amp;quot;if-not-present&amp;quot;&lt;/code>。&lt;/li>
&lt;li>多值设置： &lt;code>pull_policy = [&amp;quot;always&amp;quot;, &amp;quot;if-not-present&amp;quot;]&lt;/code>（暂未遇到过具体的使用场景）。&lt;/li>
&lt;/ul></description></item><item><title>五个浏览器插件，让你的浏览器更加好用</title><link>https://www.dianbanjiu.com/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</link><pubDate>Sat, 10 Apr 2021 22:35:17 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</guid><description>&lt;blockquote>
&lt;p>不能扩展的浏览器是没有灵魂的&lt;/p>&lt;/blockquote>
&lt;p>这篇文章向大家推荐一些我正在使用的浏览器插件，希望可以让你的浏览器更好用。&lt;/p>
&lt;p>我目前在使用的浏览器是 Chromium，基于 Chromium 的浏览器都可以点击文中的链接直达 Chrome 网上商店进行安装，同时这些插件在 Firefox 的扩展商店也都可以搜到。&lt;/p>
&lt;h2 id="ublock-origin">uBlock Origin&lt;/h2>
&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm">Chrome 网上商店直达链接&lt;/a>&lt;/p>
&lt;p>一个轻量但高效的网络请求过滤工具。&lt;/p>
&lt;p>最基础的广告屏蔽功能在我日常使用过程中感觉可以拦截 90% 以上的广告。如果页面还有没法自动过滤的广告，&lt;del>建议直接关掉这个页面&lt;/del>可以自定义过滤规则。&lt;/p>
&lt;p>uBlock Origin 的自定义过滤规则非常简单易用且功能强大，不仅可以过滤网址，还可以过滤页面上的元素标签。以我的博客为例，如果你不想要看到每日一词的诗句，可以在右上角选中 uBlock Origin 的吸管图标，然后在页面上选中每日一词的元素，点击创建即可从页面上过滤掉该元素。&lt;br>
&lt;img src="https://imgur.com/fzVE5Yp.png" alt=""> &lt;br>
&lt;img src="https://imgur.com/yP4bdDa.png" alt="">&lt;/p>
&lt;p>不过需要注意的是，有时候这类插件会导致一些页面无法正常访问。&lt;/p>
&lt;h2 id="imagus">Imagus&lt;/h2>
&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab">Chrome 网上商店直达链接&lt;/a>&lt;/p>
&lt;p>平时在浏览一些图库网站的时候，如果想要看某张图片的高清大图，通常需要点击图片进入图片详情页才行，但是通过这个插件，你只需将鼠标悬停在图片上即可查看图片对应的 「高清大图」。&lt;br>
&lt;img src="https://imgur.com/3nPP0fy.png" alt="Imgur">&lt;/p>
&lt;h2 id="vimium">Vimium&lt;/h2>
&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb">Chrome 网上商店直达链接&lt;/a>&lt;/p>
&lt;p>对于使用习惯使用键盘来操作浏览器，特别是习惯使用 Vim 编辑器的童鞋来说，Vimium 绝对值得你一试，因为 Vimium 受 Vim 的启发，提供了通过快捷键的方式在标签页、链接、历史记录、书签等进行快速切换。 &lt;br>
&lt;img src="https://imgur.com/WvYiDb0.png" alt="">&lt;/p>
&lt;p>Vimium 可以通过快捷键做到很多事情，这也导致很多人看到这么多快捷键就放弃了，但我还是强烈建议你尝试一下这个插件，因为你熟悉一遍之后会发现常用的其实就是那么几个。&lt;/p>
&lt;p>这里说几个比较常用的操作：&lt;/p>
&lt;ol>
&lt;li>按下 &lt;code>f&lt;/code> 会在当前页面打开新的页面&lt;/li>
&lt;li>按下 &lt;code>F&lt;/code> 会在新的标签页打开新的页面&lt;/li>
&lt;li>按下 &lt;code>b/B&lt;/code> 会搜索并打开书签，打开逻辑同上&lt;/li>
&lt;li>按下 &lt;code>o/O&lt;/code> 搜索并打开书签、历史记录，逻辑同上&lt;/li>
&lt;li>&lt;code>t&lt;/code> 新建标签页&lt;/li>
&lt;li>&lt;code>T&lt;/code> 在已经打开的标签页搜索并跳转&lt;/li>
&lt;li>&lt;code>x&lt;/code> 关闭标签页&lt;/li>
&lt;li>&lt;code>X&lt;/code> 恢复上一个关闭的标签页&lt;/li>
&lt;li>&lt;code>h/j/k/l&lt;/code> 在页面中进行上下左右的移动&lt;/li>
&lt;li>&lt;code>gg&lt;/code> 回到页面顶端&lt;/li>
&lt;li>&lt;code>G&lt;/code> 到达页面的底端&lt;/li>
&lt;li>&lt;code>?&lt;/code> 查看帮助页面&lt;/li>
&lt;/ol>
&lt;p>需要注意的是，该插件在 Chrome 的内置页面，比如 &lt;code>chrome://&lt;/code> 开头的页面或 Chrome 网上商店都是不生效的。&lt;/p>
&lt;h2 id="沙拉查词">沙拉查词&lt;/h2>
&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg">Chrome 网上商店直达链接&lt;/a>&lt;/p>
&lt;p>沙拉查词是一款划词翻译插件，支持划词翻译、网页翻译甚至是 PDF 翻译。我最常用的是划词翻译，在页面上选中内容之后，会在旁边出现一个沙拉碗的图标，点击它即可查看选中内容的翻译。&lt;/p>
&lt;p>我最喜欢这个划词翻译插件的原因，一方面是你可以针对自己的使用习惯进行非常多的设定，其次就是它支持很多词典，可以通过多个翻译源展示选中内容的释义，还会展示对应的遣词造句，可以很好的帮助我了解选中内容的意思。&lt;del>老文盲了&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://imgur.com/9DHhC3v.png" alt="Imgur">&lt;/p>
&lt;h2 id="wikiwand">Wikiwand&lt;/h2>
&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/wikiwand-wikipedia-modern/emffkefkbkpkgpdeeooapgaicgmcbolj">Chrome 网上商店直达链接&lt;/a>&lt;/p>
&lt;p>如果你有浏览过维基百科的页面，那除了词条的丰富程度以外，页面的复古程度也绝对会引起你的注意。Wikiwand 就是一个美化维基百科页面的插件，以更加现代美观的方式展示词条内容。&lt;del>装了这个插件之后，真的是更爱学习了呢&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://imgur.com/bSk8V32.png" alt="Wikiwand">&lt;/p>
&lt;h2 id="proxy-switchyomega">Proxy SwitchyOmega&lt;/h2>
&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Chrome 网上商店直达链接&lt;/a>&lt;/p>
&lt;p>一个浏览器代理切换工具，在没有启用全局代理的情况下，可以使用这个工具很方便的进行代理设置的切换&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/DU4hvMg.png" alt="Proxy SwitchyOmega">&lt;/p></description></item><item><title>Rss_Everyday</title><link>https://www.dianbanjiu.com/post/rss_everyday/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.dianbanjiu.com/post/rss_everyday/</guid><description>&lt;p>平时有空的时候，经常会去自己喜欢的几个网站看看文章，因为文章的更新时间都是随机的，经常出现点进去什么更新都没有。所以我就决定自己搞一个简单的文章更新通知程序，说干就干。&lt;/p>
&lt;h2 id="需求">需求&lt;/h2>
&lt;p>首先明确一下自己的需求：&lt;/p>
&lt;ol>
&lt;li>只需推送文章标题和链接&lt;/li>
&lt;li>增删 RSS 地址简单&lt;/li>
&lt;li>跨平台使用&lt;/li>
&lt;li>Free&lt;/li>
&lt;/ol>
&lt;p>这里只推送标题和链接，是因为 RSS 链接输出的文章大多都是不包含 CSS 样式的，直接渲染文章的话样式会很难看，这个程序只需要告诉我某个网站有更新了，然后点到对应的链接查看原文。&lt;/p>
&lt;p>这个程序本身也没想设计的多复杂，获取到的数据也没必要落地，直接推送出去就可以了，也就没必要上数据库，通过在文件里增删 RSS 地址即可。&lt;/p>
&lt;p>本来是想通过邮箱来做接收端的，但是因为后面计划是通过 github action 来实现定时推送，而且预计的采集间隔是一小时（现在其实是四小时的采集间隔），通过邮件来实现感觉有点蛋疼，所以还是选择了 Telegram Channel。而且 Telegram 可以对链接进行解析，输出文章开头的一点内容，实际的使用体验非常好，可以帮助我快速判断这篇文章是否值得一读。&lt;/p>
&lt;p>整个程序使用 Github 托管代码（Public Repo），Action 进行定时采集，文章更新推送到 Telegram，项目完全 Free。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>既然需求已经明确了，实现起来就简单多了。具体的实现细节就不多说了，基本的流程就是：&lt;/p>
&lt;ol>
&lt;li>每隔四小时定时执行一次&lt;/li>
&lt;li>通过配置文件获取 RSS 链接&lt;/li>
&lt;li>通过链接获取对应的文章更新&lt;/li>
&lt;li>通过文章中包含的发布时间判断是否处于可发送的时间区间&lt;/li>
&lt;li>推送最近更新的文章&lt;/li>
&lt;/ol>
&lt;p>因为网站 RSS 的更新可能会有延迟，采集间隔设置的太短会出现很多文章采集不到问题。综合考虑了一下，四小时是比较合适的。&lt;/p>
&lt;p>此外需要注意的一点是，程序是通过识别文章 RSS 中输出的发布时间来判断该文章是否是过去四小时产生的文章，如果添加的 RSS 链接中无法解析出该字段，那程序就无法判断对应的文章是否可以发送，所以在添加链接之前最好先查看一下 RSS 输出的内容是否包含类似 &lt;code>pubDate&lt;/code> 之类的发布时间字段。&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>如果你觉得这个项目有意思，你可以&lt;a href="https://github.com/GuangzheJiang/rss_everyday">点击此处&lt;/a>进入仓库查看具体的使用方式。&lt;/p></description></item><item><title>[译] Pixabay API</title><link>https://www.dianbanjiu.com/post/pixabay_api/</link><pubDate>Fri, 19 Feb 2021 14:40:22 +0800</pubDate><guid>https://www.dianbanjiu.com/post/pixabay_api/</guid><description>&lt;p>&lt;a href="https://pixabay.com/api/docs/">原文链接&lt;/a>&lt;/p>
&lt;p>欢迎来到 Pixabay API 文档，我们提供 RESTful 风格的接口，你可以通过这些接口搜索遵循 &lt;a href="https://pixabay.com/service/license/">Pixabay 协议&lt;/a> 的免费图像和视频。&lt;/p>
&lt;p>当你使用了这些接口，需要在所有搜索结果中向用户展示图片和视频来自何处，其中必须包含 Pixabay 的链接，同时你也可以使用我们的 &lt;a href="https://pixabay.com/service/about/#goodies">logo&lt;/a> 来达到同样的效果。&lt;/p>
&lt;p>调用这些 API 将会返回 JSON 格式的对象，哈希键值都是区分大小写并且使用 UTF-8 编码。哈希键是无序的，每次调用返回的顺序都可能会不同。我们每次从结果中移除或者添加任何新的哈希键的时候都会尽可能的提醒用户。&lt;/p>
&lt;h2 id="访问频率限制">访问频率限制&lt;/h2>
&lt;p>默认情况下，你每小时可以发起 5000 次请求。请求与 API 密钥相关联，与 IP 地址无关。在响应头部会说明所有与当前访问频率限制有关的信息。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>X-RateLimit-Limit&lt;/td>
&lt;td>在 30min 内可以发出的最大请求数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Remaining&lt;/td>
&lt;td>在当前访问频率窗口中剩余的请求数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Reset&lt;/td>
&lt;td>当前访问频率窗口的重置剩余时间（以秒为单位）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>为了保证 Pixabay API 的访问速度，所有的请求都会被缓存 24小时。这些接口本身是为用户的人为请求所设计的，禁止大量自动化请求。系统不允许一次性进行大量下载，如果你有这方面的需要，我们可以随时增加这个限制 —— 假设你已经实现了这个接口。&lt;/p>
&lt;h2 id="热链接">热链接&lt;/h2>
&lt;p>返回图片的 URL 一般用于暂时的图片展示。禁止对图像的永久热链接（应该在你的应用中使用 Pixabay URL）。如果你想要使用这些图片，请先下载它们到你自己的服务器上，视频则可以直接嵌入到你的应用中，当然，我们建议视频也最好存储在你自己的服务器上。&lt;/p>
&lt;h2 id="错误处理">错误处理&lt;/h2>
&lt;p>如果请求发生了错误，响应中将会带有对应的错误状态码，响应体中会带有关于错误的描述信息。例如：一旦请求次数超过了请求频率的限制，你将会得到一个 429（请求次数过多）的错误代码以及 &amp;ldquo;API rate limit exceeded&amp;rdquo; 的返回信息。&lt;/p>
&lt;h2 id="图像搜索">图像搜索&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">https://pixabay.com/api/ GET
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参数">参数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key(必需)&lt;/td>
&lt;td>str&lt;/td>
&lt;td>请&lt;a href="https://pixabay.com/accounts/login/?next=/api/docs/">登录&lt;/a>|&lt;a href="https://pixabay.com/accounts/login/?next=/api/docs/">注册&lt;/a>后查看你的 API 密钥&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>q&lt;/td>
&lt;td>str&lt;/td>
&lt;td>已经编码的请求项，如果忽略该字段将会返回所有图像，该字段最长为 100 个字符。例如：&amp;ldquo;yellow+flower&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lang&lt;/td>
&lt;td>str&lt;/td>
&lt;td>要搜索语言的语言代码，可接收的值包括：cs、da、de、en、es、fr、id、it、hu、nl、no、pl、pt、ro、sk、fi、sv、tr、vi、th、bg、ru、el、ja、ko、zh，默认值：en&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过图片 id 检索唯一图片&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>image_type&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过图片类型过滤搜索结果。可接收的值：all、photo、illustration、vector。默认值：all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>orientation&lt;/td>
&lt;td>str&lt;/td>
&lt;td>图像高大于宽还是宽大于高，可接收的值：all、horizontal、vertical，默认值：all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>category&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过类别过滤结果。可接收的值：backgrounds、 fashion、 nature、 science、 education、 feelings、 health、 people、 religion、 places、 animals、 industry、 computer、 food、 sports、 transportation、 travel、 buildings、 business、 music&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>min_width&lt;/td>
&lt;td>int&lt;/td>
&lt;td>图像的最小宽度。默认值：0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>min_height&lt;/td>
&lt;td>int&lt;/td>
&lt;td>图像的最小高度。默认值：0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>colors&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过颜色属性过滤图片。可以通过半角逗号分割的颜色列表来选择多种颜色属性。可接收的值：grayscale、 transparent、 red、 orange、 yellow、 green、 turquoise、 blue、 lilac、 pink、 white、 gray、 black、 brown&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>editors_choice&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>从&lt;a href="https://pixabay.com/editors_choice/">编辑推荐&lt;/a>筛选图片。可接收的值：true、false。默认值：false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>safesearch&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>返回适合所有年龄段的图片。可接收的值：true、false。默认值：false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>order&lt;/td>
&lt;td>str&lt;/td>
&lt;td>结果的排序标准。可接收的值：popular、latest。默认值：popular&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>page&lt;/td>
&lt;td>int&lt;/td>
&lt;td>返回结果是分页的，使用此参数选择页号。默认值：1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>per_page&lt;/td>
&lt;td>int&lt;/td>
&lt;td>设定每页的结果数。可接收的值：3-200。默认值：20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>callback&lt;/td>
&lt;td>str&lt;/td>
&lt;td>JSONP 回调函数名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pretty&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>缩进 JSON 输出，此选项不应该使用在你的产品中。可接收的值：true、false。默认值：false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="实例">实例&lt;/h3>
&lt;p>检索 &amp;ldquo;yellow flowers&amp;rdquo; 的图片。搜索项 &lt;code>q&lt;/code> 需要进行 URL 编码，{ KEY } 需要替换为你的 API 密钥。&lt;br>
&lt;code>https://pixabay.com/api/?key={ KEY }&amp;amp;q=yellow+flowers&amp;amp;image_type=photo&lt;/code>&lt;/p>
&lt;p>该请求的响应结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;#34;total&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4692&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;#34;totalHits&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">500&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;#34;hits&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">195893&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;pageURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/en/blossom-bloom-flower-195893/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;photo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tags&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;blossom, bloom, flower&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;previewURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://cdn.pixabay.com/photo/2013/10/15/09/12/flower-195893_150.jpg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;previewWidth&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">150&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;previewHeight&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">84&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;webformatURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/get/35bbf209e13e39d2_640.jpg&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;webformatWidth&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">640&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;webformatHeight&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">360&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;largeImageURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/get/ed6a99fd0a76647_1280.jpg&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fullHDURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/get/ed6a9369fd0a76647_1920.jpg&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;imageURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/get/ed6a9364a9fd0a76647.jpg&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;imageWidth&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;imageHeight&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2250&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;imageSize&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">4731420&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;views&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">7671&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;downloads&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">6439&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;favorites&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;likes&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comments&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">48777&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Josch13&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;userImageURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://cdn.pixabay.com/user/2013/11/05/02-10-23-764_250x250.jpg&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">73424&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>响应项&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>total&lt;/td>
&lt;td>此次请求命中的图片数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>totalHits&lt;/td>
&lt;td>可以通过 API 获取的图片数量。默认情况下，每次请求 API 返回的图片数量的最大值为 500&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>图片的唯一标识符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pageURL&lt;/td>
&lt;td>Pixabay 的源页面，提供 imageWidth x imageHeight 和文件大小为 imageSize 的原始文件下载&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>previewURL&lt;/td>
&lt;td>低分辨率图片，最大宽度或最大高度为 150 px&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>webformatURL&lt;/td>
&lt;td>中等尺寸的图片，宽或高为 640 px。此链接 24 小时内有效。&lt;strong>使用其他尺寸的 webformatURL 替换 &amp;lsquo;_640&amp;rsquo; 可以获取其他尺寸的图片：&lt;/strong> 使用 &amp;lsquo;_180&amp;rsquo; 或 &amp;lsquo;_340&amp;rsquo; 可以获取 180 或者 340px 分辨率的图片，使用 &amp;lsquo;_960&amp;rsquo; 则可以获取 960x720px 的高分辨率图片&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>largeImageURL&lt;/td>
&lt;td>大尺寸图片，宽或高为 1280px&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>views&lt;/td>
&lt;td>图片被查看的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>downloads&lt;/td>
&lt;td>图片被下载的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>faverites&lt;/td>
&lt;td>图片被收藏的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>likes&lt;/td>
&lt;td>图片被喜欢的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>comments&lt;/td>
&lt;td>图片的总评论数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>user_id, user&lt;/td>
&lt;td>贡献者的 ID 和用户名。个人资料链接：&lt;code>https://pixabay.com/users/{ USERNAME }-{ ID }/&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>userImageURL&lt;/td>
&lt;td>个人资料头像链接（250x250 px）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>下面的这些响应项只有当你的账户&lt;a href="https://pixabay.com/api/docs/">获得完全 API 访问权限&lt;/a>之后才会出现&lt;/strong>。这些地址可以让你以全分辨率和矢量格式（如果可用）访问原始图片。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>响应项&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>fullHDURL&lt;/td>
&lt;td>全高清图片，最大宽/高为 1920 px&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>imageURL&lt;/td>
&lt;td>原始图像地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vectorURL&lt;/td>
&lt;td>矢量资源地址，如果存在则显示，否则忽略&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="视频搜索">视频搜索&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">https://pixabay.com/api/videos/ GET
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="请求参数">请求参数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key(必须)&lt;/td>
&lt;td>str&lt;/td>
&lt;td>请&lt;a href="https://pixabay.com/accounts/login/?next=/api/docs/">登录&lt;/a>|&lt;a href="https://pixabay.com/accounts/login/?next=/api/docs/">注册&lt;/a>后查看你的 API 密钥&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>q&lt;/td>
&lt;td>str&lt;/td>
&lt;td>已经编码的请求项，如果忽略该字段将会返回所有视频，该字段最长为 100 个字符。例如：&amp;ldquo;yellow+flower&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lang&lt;/td>
&lt;td>str&lt;/td>
&lt;td>要搜索语言的语言代码，可接收的值包括：cs、da、de、en、es、fr、id、it、hu、nl、no、pl、pt、ro、sk、fi、sv、tr、vi、th、bg、ru、el、ja、ko、zh，默认值：en&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过 id 检索单独的视频&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>video_type&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过视频类型过滤结果。可接收的值：all、film、animation。默认值：all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>category&lt;/td>
&lt;td>str&lt;/td>
&lt;td>通过类别过滤结果。可接收的值：backgrounds、 fashion、nature、science、education、feelings、health、people、religion、places、animals、industry、computer、food、sports、transportation、travel、buildings、business、music&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>min_width&lt;/td>
&lt;td>int&lt;/td>
&lt;td>视频的最小宽度。默认值：0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>min_height&lt;/td>
&lt;td>int&lt;/td>
&lt;td>视频的最小高度。默认值：0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>editors_choice&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>从&lt;a href="https://pixabay.com/editors_choice/">编辑推荐&lt;/a>选择视频。可接收的值：true、false。默认值：false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>safesearch&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>返回适合所有年龄段的视频。可接收的值：true、false。默认值：false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>order&lt;/td>
&lt;td>str&lt;/td>
&lt;td>结果的排序标准。可接收的值：popular、latest。默认值：popular&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>page&lt;/td>
&lt;td>int&lt;/td>
&lt;td>返回结果是分页的，使用此参数选择页号。默认值：1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>per_page&lt;/td>
&lt;td>int&lt;/td>
&lt;td>设定每页的结果数。可接收的值：3-200。默认值：20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>callback&lt;/td>
&lt;td>str&lt;/td>
&lt;td>JSONP 回调函数名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pretty&lt;/td>
&lt;td>bool&lt;/td>
&lt;td>缩进 JSON 输出，此选项不应该使用在你的产品中。可接收的值：true、false。默认值：false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="实例-1">实例&lt;/h3>
&lt;p>检索 &amp;ldquo;yellow flowers&amp;rdquo; 的视频。搜索项 &lt;code>q&lt;/code> 需要进行 URL 编码，{ KEY } 需要替换为你的 API 密钥。&lt;br>
&lt;code>https://pixabay.com/api/videos/?key={ KEY }&amp;amp;q=yellow+flowers&lt;/code>&lt;/p>
&lt;p>该请求的响应结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;#34;total&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">42&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;#34;totalHits&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">42&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;#34;hits&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">125&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;pageURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/videos/id-125/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;film&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tags&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;flowers, yellow, blossom&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;duration&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">12&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;picture_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;529927645&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;videos&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;large&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://player.vimeo.com/external/135736646.hd.mp4?s=ed02d71c92dd0df7d1110045e6eb65a6&amp;amp;profile_id=119&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1920&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1080&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">6615235&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;medium&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://player.vimeo.com/external/135736646.hd.mp4?s=ed02d71c92dd0df7d1110045e6eb65a6&amp;amp;profile_id=174&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1280&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">720&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3562083&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;small&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://player.vimeo.com/external/135736646.sd.mp4?s=db2924c48ef91f17fc05da74603d5f89&amp;amp;profile_id=165&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">950&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">540&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2030736&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tiny&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://player.vimeo.com/external/135736646.sd.mp4?s=db2924c48ef91f17fc05da74603d5f89&amp;amp;profile_id=164&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">640&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">360&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;size&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1030736&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;views&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">169&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;downloads&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">66&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;favorites&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;likes&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;comments&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user_id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1281706&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;user&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;CoverrFreeFootage&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;userImageURL&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://cdn.pixabay.com/user/2015/10/16/09-28-45-303_250x250.png&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">473&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>响应项&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>total&lt;/td>
&lt;td>此次请求命中的视频数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>totalHits&lt;/td>
&lt;td>可以通过 API 获取的视频数量。默认情况下，API 会限制每次请求返回的视频数量的最大值为 500&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>视频的唯一标识符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pageURL&lt;/td>
&lt;td>Pixabay 的源页面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>picture_id&lt;/td>
&lt;td>这个值可以用于检索视频多种尺寸的静态预览图：&lt;code>https://i.vimeocdn.com/video/{ PICTURE_ID }_{ SIZE }.jpg&lt;/code>。可接收的尺寸：100x75, 200x150, 295x166, 640x360, 960x540, 1920x1080。例如： &lt;code>https://i.vimeocdn.com/video/529927645_295x166.jpg&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>videos&lt;/td>
&lt;td>一系列不同尺寸的视频流：&amp;ldquo;large&amp;rdquo; 的分辨率通常为 1920x1080px，如果没有 large 尺寸的视频，large 对象的 URL 将会标为空，size 设置为 0。&amp;ldquo;medium&amp;rdquo; 的分辨率通常为 1280x720px，这个分辨率适用于所有视频。&amp;ldquo;small&amp;rdquo; 的分辨率通常为 960x540px，老视频还有 640x360px 的分辨率，这个分辨率适用于所有视频。&amp;ldquo;tiny&amp;rdquo; 的分辨率通常为 640x360px，老视频还有 480x270px 的分辨率，此分辨率适用于所有视频。在任何视频流的 URL 的 GET 请求后添加 download=1 都可将视频下载至自己的服务器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>views&lt;/td>
&lt;td>视频被查看的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>downloads&lt;/td>
&lt;td>视频被下载的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>faverites&lt;/td>
&lt;td>视频被收藏的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>likes&lt;/td>
&lt;td>视频被喜欢的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>comments&lt;/td>
&lt;td>视频的总评论数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>user_id, user&lt;/td>
&lt;td>贡献者的 ID 和用户名。个人资料链接：&lt;code>https://pixabay.com/users/{ USERNAME }-{ ID }/&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>userImageURL&lt;/td>
&lt;td>个人资料头像链接（250x250 px）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="javascript-实例">JavaScript 实例&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">API_KEY&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;YOUR_API_KEY&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">URL&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://pixabay.com/api/?key=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">API_KEY&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;amp;q=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>encodeURIComponent(&lt;span style="color:#e6db74">&amp;#39;red roses&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$&lt;/span>.&lt;span style="color:#a6e22e">getJSON&lt;/span>(&lt;span style="color:#a6e22e">URL&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (parseInt(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">totalHits&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">$&lt;/span>.&lt;span style="color:#a6e22e">each&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">hits&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">hit&lt;/span>){ &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">hit&lt;/span>.&lt;span style="color:#a6e22e">pageURL&lt;/span>); });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;No hits&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="支持">支持&lt;/h2>
&lt;p>获取 &lt;a href="https://pixabay.com/api/docs/">API 完全请求权限&lt;/a> 以检索高质量图片。&lt;br>
如果你有关于 API 的任何问题请&lt;a href="https://pixabay.com/service/contact/">联系我们&lt;/a>&lt;/p></description></item><item><title>在 Github Pages 上部署 Hugo</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo/</link><pubDate>Thu, 07 Jan 2021 00:33:09 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8-github-pages-%E4%B8%8A%E9%83%A8%E7%BD%B2-hugo/</guid><description>&lt;p>其实在 github pages（以下简称 pages）上部署 hugo 的过程很简单，如何保证这些文件的迁移才是有点麻烦的事，不过最关键的问题其实在于你是否有足够的精力写下去。&lt;/p>
&lt;h2 id="初阶">初阶&lt;/h2>
&lt;h3 id="需要准备的一些东西">需要准备的一些东西&lt;/h3>
&lt;ul>
&lt;li>github 帐号&lt;/li>
&lt;li>hugo&lt;/li>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;h3 id="开始">开始&lt;/h3>
&lt;p>git 跟 hugo 这两个软件包应该在很多 Linux 发行版中都可以找到，可以直接使用系统对应的包管理进行安装即可。&lt;br>
安装完之后可以使用下面的命令进行确认&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用下面的命令创建站点&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo new site mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Congratulations! Your new Hugo site is created in /home/xxx/demo/mysite.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Just a few more steps and you&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>re ready to go:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1. Download a theme into the same-named folder.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Choose a theme from https://themes.gohugo.io/ or
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create your own with the &lt;span style="color:#e6db74">&amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34;&lt;/span> command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. Perhaps you want to add some content. You can add single files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with &lt;span style="color:#e6db74">&amp;#34;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. Start the built-in live server via &lt;span style="color:#e6db74">&amp;#34;hugo server&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Visit https://gohugo.io/ &lt;span style="color:#66d9ef">for&lt;/span> quickstart guide and full documentation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入命令后基本上立刻就可以看到输出的 “congratulation &amp;hellip;”，这说明创建成功了。&lt;/p>
&lt;p>刚创建好的站点一般包含下面几个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── archetypes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── default.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── content
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── layouts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── themes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong> 如果没有指明操作路径，默认就是在 mysite 下。&lt;/p>
&lt;p>接下来去 &lt;a href="https://themes.gohugo.io/">hugo 主题站&lt;/a> 挑一个自己喜欢的主题，然后将其下载到 themes 目录中。下面以 hugo-theme-jane 为例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd mysite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/xianmin/hugo-theme-jane themes/jane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 jane 目录下有一些已经比较完善的配置文件，像是 jane/exampleSite 下的 config.toml 以及 jane/archetypes/default.md，前者是用来配置站点的环境的，后者则是编写的文章的模板文件，一般这些文件里都会有比较详细的说明，根据它的说明进行修改就可以了。&lt;/p>
&lt;p>修改完成之后，就可以创建一篇文章来测试一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo new post/helloWorld.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这条命令将会在 mysite/content/post 下创建 helloWorld.md 这个文件，向这个文件里随便加点内容。然后使用下面的命令来预览一下效果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开浏览器，输入 http://localhost:1313 就可以看到博客日后的样式了。&lt;/p>
&lt;p>如果预览之后觉得满意，就可以使用下面的命令将站点部署至 pages（请将下面的 Name 修改为你的 github 用户名），在开始之前，先在 github 上创建一个名为 Name.github.io 的 repo&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git remote add origin https://github.com/Name/Name.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;create blog site&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器输入 Name.github.io 就可以查看部署好的站点。&lt;/p>
&lt;h3 id="备份">备份&lt;/h3>
&lt;p>这样 hugo 站点基本就算是部署完成了，不过这些文件都是 hugo 编译好的一些静态文件，为了避免更换系统之后无法更新博客，你需要将 mysite 站点下除了 public 之外的目录都进行一个备份（之所以不备份 public 目录，是因为在执行 &lt;code>hugo&lt;/code> 命令之后都会重新生成 public 目录）。&lt;/p>
&lt;p>可以在 github 创建一个新的 repo 来存放这些文件。假设这个 repo 名为 Blog&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git submodule add https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;public/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;backup blog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的第二步使用 submodule 参数是因为 themes/jane 目录本身也是一个使用 git 进行版本控制的目录。而 public 虽然也是一个使用 git 进行版本控制的目录，但是因为它已经被添加到 .gitignore 文件当中，所以是不会被 git 索引的。&lt;/p>
&lt;p>如果你换了系统之类的，先将 Blog 这个 repo 克隆到本地，然后再将主题克隆一遍就可以像之前那样继续你的写作了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/Name/Blog.git &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd Blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进阶">进阶&lt;/h2>
&lt;p>初阶里面你需要写完文章之后手动构建一下，这种方式显然不够优雅，下面一起来康康怎么让构建的过程完全自动化。&lt;/p>
&lt;p>为了这个自动化的过程，你需要将网站的源码和 public 下面的内容放在 dianbanjiu.github.io 仓库的不同分支，不过要保证主分支必须放的是 public 里面的内容。我这里的分支对应关系是 master 分支存放 public，blog 分支存放源码，其中 master 为主分支。&lt;/p>
&lt;p>这个自动化的过程需要结合 github action 来完成。&lt;/p>
&lt;p>首先我们先来配置一下 action。&lt;/p>
&lt;ol>
&lt;li>去 dianbanjiu.github.io 仓库的 &lt;code>Settings-&amp;gt;Deploy keys&lt;/code> 添加一个新的 deploy key，这个 key 用你的 ssh 公钥即可，记得勾选 &lt;code>Allow write access&lt;/code>。&lt;/li>
&lt;li>在 &lt;code>Settings-&amp;gt;Secrets&lt;/code> 下添加一个新的 Secrets，这里填写你的 ssh 密钥，名字为了与之后的脚本对应就设置为 &lt;code>ACTIONS_DEPLOY_KEY&lt;/code>。&lt;/li>
&lt;li>在源码对应的分支下根目录下创建一个 &lt;code>.github&lt;/code> 的目录，在 &lt;code>.github&lt;/code> 下创建一个叫做 &lt;code>workflows&lt;/code> 的目录，&lt;code>workflows&lt;/code> 目录下创建一个 &lt;code>public.yml&lt;/code> 的文件。简单来说就是 github action 会从分支根目录下寻找 .github/workflows 目录，这个目录下存放的就是你的一些 action，如果你有多个任务可以创建多个 action，不过这里就不多说了。&lt;/li>
&lt;/ol>
&lt;p>public.yml 文件的内容如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Publish Blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">blog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Disable quotePath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git config --global core.quotePath false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --gc --minify --cleanDestinationDir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACTIONS_DEPLOY_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_BRANCH&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PUBLISH_DIR&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里只介绍其中几个比较关键的点：&lt;/p>
&lt;ol>
&lt;li>branches 下指定的分支是你网站源码所在的分支，如果指定错误这个 action 就无法运行&lt;/li>
&lt;li>&lt;code>ACTIONS_DEPLOY_KEY&lt;/code> 的值对应于你之前在 &lt;code>Settings-&amp;gt;Secrets&lt;/code> 下添加的 &lt;code>Secrets&lt;/code>，确保两者一致即可&lt;/li>
&lt;li>&lt;code>PUBLISH_BRANCH&lt;/code> 对应于你的主分支&lt;/li>
&lt;li>&lt;code>PUBLISH_DIR&lt;/code> 对应于执行 hugo 命令后生成文件的位置，一般默认就是 &lt;code>./public&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>做完这些之后再将内容推送到 blog 分支的时候，action 就会自动执行构建过程，然后将构建好的博客内容推送到 master 分支&lt;/p>
&lt;h2 id="延伸阅读">延伸阅读&lt;/h2>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程&lt;/a>&lt;/p></description></item><item><title>Git 子模块管理</title><link>https://www.dianbanjiu.com/post/git-%E5%AD%90%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 04 Jan 2021 23:10:33 +0800</pubDate><guid>https://www.dianbanjiu.com/post/git-%E5%AD%90%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/</guid><description>&lt;h2 id="子模块的创建">子模块的创建&lt;/h2>
&lt;p>子模块的创建很简单，通过下面的命令就可以将 &lt;code>xxx&lt;/code> 仓库注册到当前目录的 &lt;code>xxx&lt;/code> 路径下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git submodule add https://github.com/xxx/xxx.git ./xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="子模块的更新">子模块的更新&lt;/h2>
&lt;p>如果需要在 clone 项目时将子模块也 clone 下来，可以使用 &lt;code>--recurse-submodules&lt;/code> 参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone --recurse-submodules https://github.com/xxx/xxx.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 clone 项目的时候忘记使用 &lt;code>--recurse-submodules&lt;/code> 参数，也可以在项目 clone 完成之后依次执行下面的命令来获取子模块。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git submodule --init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git submodule update --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="子模块的删除">子模块的删除&lt;/h2>
&lt;p>相比于子模块的创建和更新，子模块的删除相对比较麻烦一些。首先需要从注册路径删除对应子模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rm -rf ./xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rm -rf .git/modules/xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着需要从 .gitmodules 中删除对应注册项 &lt;br>
然后从 .git/config 中删除对应注册项 &lt;br>
最后使用下面的命令删除缓存&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git rm --cached xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Vim 执行多条命令</title><link>https://www.dianbanjiu.com/post/vim-%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%9D%A1%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 20 Sep 2020 22:37:02 +0800</pubDate><guid>https://www.dianbanjiu.com/post/vim-%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%9D%A1%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>最近又开始折腾自己的 vim 配置了，目前在 github 有 &lt;a href="https://github.com/dianbanjiu/dotvimrc">一份存档&lt;/a>。为了方便还顺便也给这个 .vimrc 添加了一个安装的脚本。在写安装脚本的过程中遇到了一点小小的问题。&lt;/p>
&lt;p>我的 vim 是使用 vim-plug 来管理插件的，所以在写好配置文件后还需要进 vim 执行安装的指令，但是我这么懒，肯定是能让脚本自己跑的就交给脚本啦。&lt;/p>
&lt;p>在使用 &lt;code>vim --help&lt;/code> 查看帮助手册之后发现 vim 有一个 &lt;code>-c&lt;/code> 参数，支持在打开 vim 后的文件后执行对应的命令。具体到我的这个例子中的使用方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ vim -c PlugInstall &lt;span style="color:#75715e"># 进入 vim 中执行 PlugInstall 命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim -c &lt;span style="color:#e6db74">&amp;#34;PlugInstall | p | p&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 同 Linux 的管道，在安装完插件之后，退出插件安装窗口，然后再退出 vim 主窗口&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr></description></item><item><title>Postman 添加环境变量</title><link>https://www.dianbanjiu.com/post/pacman-%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link><pubDate>Fri, 14 Aug 2020 23:53:38 +0800</pubDate><guid>https://www.dianbanjiu.com/post/pacman-%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid><description>&lt;p>在使用 postman 进行后端接口测试的过程中，我常常会遇到除了登录接口外其他接口都需要 token 来验证的情况，遇到这种状况时，我经常会先转到登录接口，获取返回的 token，然后再把这个 token 复制粘帖到需要的地方，这种方式虽然可行，但是每次都要手动来进行操作，着实有点麻烦。&lt;/p>
&lt;p>所以我就想 postman 有没有什么机制可以把这个 token 分享出来，然后我直接在 token 的位置使用环境变量来调用就可以了呢？&lt;/p>
&lt;p>postman 做了这么久的接口测试，果然这个问题他们早就考虑到了，postman 本身是支持环境变量的，下面就看一下怎么使用吧。&lt;/p>
&lt;ol>
&lt;li>点击右上角的小齿轮，添加一个新的环境。&lt;/li>
&lt;li>在这个环境里创建一个新的变量 token（你可以根据自己的习惯，起一个好记忆的）。&lt;/li>
&lt;li>在首页选择刚才创建好的环境。&lt;/li>
&lt;li>添加登录接口请求。&lt;/li>
&lt;li>打开 &lt;code>Tests&lt;/code> 标签，在里面填写 &lt;code>pm.environment.set(&amp;quot;token&amp;quot;, JSON.parse(responseBody).access_token);&lt;/code>，你需要根据自己后端接口的返回来修改 &lt;code>JSON.parse(responseBody).access_token&lt;/code> 字段，如果你的登录接口返回的也是一个 json 格式的数据，那你只需要根据返回 json 中 token 对应的名字将 &lt;code>accsess_token&lt;/code> 修改一下就可以了。&lt;br>
打开一个需要使用到 token 的接口，填写好对应的信息，在 &lt;code>Authorization&lt;/code> 标签里选择 &lt;code>Bearer Token&lt;/code>，在 token 的位置填写 &lt;code>{{token}}&lt;/code>。&lt;/li>
&lt;li>发起一次登录请求，请求成功之后，返回需要使用到 token 的接口，发起新的请求，这时候应该是可以正常访问的。&lt;/li>
&lt;li>如果 token 过期了，那只需要在登录接口那里重新发起一次登录请求，其他需要使用 token 的接口就会自动调用最新的 token。&lt;/li>
&lt;/ol>
&lt;p>建议如果是不同的项目，那可以多创建几个环境，然后使用不同的环境变量。&lt;/p>
&lt;p>如果所有的项目的 token 类似，也可以考虑创建全局变量。&lt;/p></description></item><item><title> Bash, Cannot Set LC_CTYPE to Default, No Such File or Directory</title><link>https://www.dianbanjiu.com/post/-bash-cannot-set-lc_ctype-to-default-no-such-file-or-directory/</link><pubDate>Thu, 30 Jul 2020 22:38:35 +0800</pubDate><guid>https://www.dianbanjiu.com/post/-bash-cannot-set-lc_ctype-to-default-no-such-file-or-directory/</guid><description>&lt;p>最近使用 MacOS 的终端通过 ssh 连接 Linux 服务器的过程中，出现了一点问题，每次连接上之后，都会出现 &lt;code>-bash, cannot change locale, No such file or directory&lt;/code>，整段错误代码没记住，但大概就是这么个意思。&lt;/p>
&lt;p>最开始我以为这是服务器那边的问题，所以就没怎么在意，毕竟登录之后一个 &lt;code>Ctrl-l&lt;/code> 就啥都没了。直到前几天因为 activemq 获取中文信息乱码的时候我才注意到这个问题的重要性。&lt;/p>
&lt;p>我在服务器上搭建了一个 activemq 的中间件，然后通过本地向 activemq 发送了一些信息，如果信息中包含了中文，那在 activemq 的 Web console 中中文就会显示乱码。&lt;/p>
&lt;p>可是按理说我服务器的字符编码是 &lt;code>UTF-8&lt;/code>（重点，后面要考），avtivemq 的 webapps 用的编码也是 &lt;code>utf-8&lt;/code>，向 activemq 发送信息的程序是用 golang 写的，golang 默认的编码格式也是 &lt;code>utf-8&lt;/code>，编码格式都是统一的，为什么会出现乱码呢。&lt;/p>
&lt;p>在尝试过修改代码发送的信息为各种编码格式，以及修改 activemq 的 webapps 编码格式仍旧无果之后，我就怀着死马当活马医的心态修改了 activemq 运行时的字符编码环境为 &lt;code>zh_CN.UTF-8&lt;/code>，然后奇迹发生了，中文乱码消失了，我又试了一下 &lt;code>en_US.UTF-8&lt;/code>，也可以正常显示中文。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ env LC_CTYPE&lt;span style="color:#f92672">=&lt;/span>zh_CN.UFT-8 activemq start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>后来在网上搜原因的时候无意中看到了一篇文章是教别人如何修改 MacOS 的终端在连接到服务器时不传递自己的 &lt;code>locale&lt;/code>，&lt;a href="https://www.cyberciti.biz/faq/os-x-terminal-bash-warning-setlocale-lc_ctype-cannot-change-locale/">[原文链接]&lt;/a> ，我就试着改了一下，修改完之后我再登录到服务器，这次没有了之前的 &lt;code>-bash, cannot change locale, No such file or directory&lt;/code> 的错误，查看服务器的字符编码 &lt;code>en_US.UTF-8&lt;/code>。&lt;/p>
&lt;p>&lt;strong>握了个大草&lt;/strong>&lt;/p>
&lt;p>突然就想明白了为什么在 MacOS 下使用终端登录服务器会报 &lt;code>-bash, cannot change locale, No such file or directory&lt;/code> 的那个错误了。&lt;/p>
&lt;p>在 Linux 下的 UTF-8 字符集有很多，比如 zh_CN.UTF-8、en_US.UTF-8，但唯独没有独立的叫做 UTF-8 的字符集，因为在 Linux 中，UTF-8 是作为一种字符编码的规范，而 zh_CN.UTF-8 则是按照 UTF-8 规范实现的字符集。&lt;/p>
&lt;p>那问题来了，为什么我之前在终端中查看的字符编码会是 UTF-8 而非 zh_CN.UTF-8 之类呢？结合我之前看到的那篇文章，其实是因为 MacOS 的终端在连接到服务器的时候会把自己的字符编码环境给带到服务器去，MacOS 的字符集是苹果自己实现的一套符合 UTF-8 规范叫做 UTF-8 的字符集，但是 Linux 上并没有这套字符集，虽然 MacOS 终端带到服务器上的编码环境仅在它这个终端会话中有效，但是在这个会话中所有运行的程序都会去调用这个不存在的字符集，所以才出现了 &lt;code>-bash, cannot change locale, No such file or directory&lt;/code> 的问题以及 activemq 中文乱码的现象。&lt;/p>
&lt;blockquote>
&lt;p>修改方式：在 MacOS 的 终端(Terminal)-&amp;gt;偏好设置-&amp;gt;高级 中，取消勾选在启动时设置 locale 环境变量。&lt;br>
另外还可以通过在 &lt;code>/etc/ssh/ssh_config&lt;/code> 中注释掉 &lt;code>SendEnv LANG LC_*&lt;/code>，也可以达到同样的效果。&lt;br>
如果使用第一种方式可能会导致 MacOS 的终端中文无法显示，所以还是更推荐第二种方式。&lt;/p>&lt;/blockquote>
&lt;p>最后简单说一下 Linux 字符编码相关的内容：&lt;/p>
&lt;p>Linux 的字符编码环境是通过多个 LC_* 环境变量来定义的，比如 LC_CTYPE(Linux 的字符显示方式)，LC_TIME(时间和日期的格式)&amp;hellip;&lt;/p>
&lt;p>既然是变量，那都是可以随意修改的，即使是系统中不存在的那在设置的当时也不会报错，除非在某些显式调用时，比如使用 &lt;code>locale&lt;/code> 命令查看系统的各种字符编码的格式时，如果你定义了错误的字符格式环境，那 &lt;code>locale&lt;/code> 就会提示类似 &lt;code>Cannot set LC_CTYPE to default, No such file or directory&lt;/code> 的错误。不过其他一些隐式的调用，比如 activemq 执行时就不会自动检查这些变量的正确与否。&lt;/p>
&lt;p>所以希望大家不要忽视遇到的任何一个 warning 以及 error，指不定就是以后某个的 bug 突破口。&lt;/p>
&lt;p>参考链接：&lt;br>
[1]: &lt;a href="https://wiki.archlinux.org/index.php/Locale">Arch Wiki &amp;ndash; locale&lt;/a>&lt;/p></description></item><item><title>关于 Shell 脚本中空格的一点小坑</title><link>https://www.dianbanjiu.com/post/%E5%85%B3%E4%BA%8E-shell-%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%9D%91/</link><pubDate>Mon, 27 Jul 2020 00:23:54 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%85%B3%E4%BA%8E-shell-%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%9D%91/</guid><description>&lt;p>最近为了结合 gilab runner 自动化打包，写了不少的 shell 脚本，虽然都是比较简单的内容，但还是踩了不少的坑。最近的一个就是有关字符串的问题。&lt;/p>
&lt;p>在很多场景下我们可能都需要给 shell 脚本指定一些参数，或者在 shell 脚本执行过程中输入一些内容，这些内容大多是字符串的形式，比如下面这个创建文件的脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat touchFile.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo $1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch $1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bash touchFile.sh &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你觉得上面的代码会输出什么以及会创建哪些文件呢？输出 &lt;code>hello world&lt;/code>，创建 &lt;code>hello\ world&lt;/code>？&lt;/p>
&lt;p>正确答案是输出 &lt;code>hello world&lt;/code>，并创建 &lt;code>hello&lt;/code> 和 &lt;code>world&lt;/code> 两个文件。&lt;/p>
&lt;p>因为 shell 在从命令行获取到由双引号包裹的内容后，一般会将其识别为一个字符串，即便引号中有空格。但是在获取到含有引号的字符串之后，shell 就会将这个双引号给自动去掉了，所以 &lt;code>echo hell world&lt;/code> 可以得到预期的结果，但到了 &lt;code>touch hello world&lt;/code> 就相当于创建了 hello 和 world 两个文件，这显然不符合我们的预期，那么该如何解决这个问题呢？&lt;/p>
&lt;p>首先我们需要知道，Linux 很多命令在获取参数的时候通常都会以空格为分隔符，但是如果空格是在两个双引号中间的话，shell 就会忽略这个空格，而把这个空格作为引号字符串的一部分。所以我们只需对上面的代码稍作修改即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat touchFile.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo $1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样在执行脚本就可以成功创建带有空格的文件名了。当然你也可以将其应用到 shell 各种需要获取带空格字符串的地方，而不仅仅是创建文件。&lt;/p></description></item><item><title>创建 Shell 脚本的帮助信息</title><link>https://www.dianbanjiu.com/post/%E5%88%9B%E5%BB%BA-shell-%E8%84%9A%E6%9C%AC%E7%9A%84%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF/</link><pubDate>Wed, 22 Jul 2020 23:28:50 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%88%9B%E5%BB%BA-shell-%E8%84%9A%E6%9C%AC%E7%9A%84%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF/</guid><description>&lt;p>原文链接 [英]：&lt;a href="https://samizdat.dev/help-message-for-shell-scripts/">https://samizdat.dev/help-message-for-shell-scripts/&lt;/a>&lt;/p>
&lt;p>有很多种方式可以获取一个 shell 脚本的帮助信息（当然得是在你确实在脚本中写了帮助信息的情况下），你可以使用 cat 或者 echo 来获取这些帮助信息。但是这种方式显得太过暴力，我们其实有更加优雅的方式。&lt;/p>
&lt;p>假设你所有的脚本信息都写在文件的开头。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">### &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### my-script -- do something well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Usage:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### my-script &amp;lt;input&amp;gt; &amp;lt;output&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Options:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### &amp;lt;input&amp;gt; Input file to read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### &amp;lt;output&amp;gt; Output file to write, use - for stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### -h show help message&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着我们需要写一个方法来获取这些帮助信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>help&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -rn &lt;span style="color:#e6db74">&amp;#39;s/^### ?//;T;p&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$0&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>$0&lt;/code> 代表你所执行的这个脚本文件的文件名。&lt;br>
这个方法中主要使用的命令就是 sed，sed 是一个流编辑器，会基于你给定的一系列规则来处理给定的数据。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-n&lt;/code> —— 表示不会打印模式空间里的内容。&lt;/li>
&lt;li>&lt;code>-r&lt;/code> —— 表示可以在脚本中使用 扩展的正则表达式。&lt;/li>
&lt;li>&lt;code>s&lt;/code> —— 代表替代模式。&lt;/li>
&lt;li>&lt;code>/&lt;/code> —— 代表规则的开始/结束。&lt;/li>
&lt;li>&lt;code>^### ?&lt;/code> —— 按照正则匹配以 ### 开头的包含一个或者零个空格的字符串。&lt;/li>
&lt;li>&lt;code>//&lt;/code> —— 这两个 “/” 中的内容会替换掉前面匹配到的内容。&lt;br>
所以 &lt;code>sed -rn 's/^### ?//&lt;/code> 就表示会以 「空字符串」 替换掉所有 「行首的三个#以及其后可能有的一个空格」。&lt;/li>
&lt;li>&lt;code>T&lt;/code> —— 表示如果 sed 编辑器没有成功完成替换，则跳转到 sed 命令的最后。&lt;/li>
&lt;li>&lt;code>p&lt;/code> —— 代表打印替换的结果。&lt;/li>
&lt;/ul>
&lt;p>最后用空参数或者 &lt;code>-h&lt;/code> 来调用这个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> $# &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> $1 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-h&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你习惯在一个脚本的开头做注释的话，可以试试这种方法。&lt;/p></description></item><item><title>Git 提交多行 Commit 信息</title><link>https://www.dianbanjiu.com/post/git-%E6%8F%90%E4%BA%A4%E5%A4%9A%E8%A1%8C-commit-%E4%BF%A1%E6%81%AF/</link><pubDate>Sun, 19 Jul 2020 22:46:28 +0800</pubDate><guid>https://www.dianbanjiu.com/post/git-%E6%8F%90%E4%BA%A4%E5%A4%9A%E8%A1%8C-commit-%E4%BF%A1%E6%81%AF/</guid><description>&lt;p>git 提交信息 commit 在项目中追踪代码改动原因非常有用，特别是在团队合作中，一个简洁有效的 commit 可以帮助进行 merge 的人快速了解本次代码改动的必要性。为了保证提交信息的可读性，多行 commit 几乎是不可避免的。下面就来说一下如何实现多行 commit。&lt;/p>
&lt;p>我平时的习惯是使用命令行进行 git 的各种操作，命令行进行 commit 的时候使用的命令是 &lt;code>git commit -m messgae&lt;/code>，这里面的 message 就是我们要为本次提交添加的 commit，至于实现多行 commit 其实很简单，就是给提交的 commit 内容加上引号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>位于分支 master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>尚无提交
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>要提交的变更：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> （使用 &lt;span style="color:#e6db74">&amp;#34;git rm --cached &amp;lt;文件&amp;gt;...&amp;#34;&lt;/span> 以取消暂存）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 新文件： readme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#e6db74">&amp;#34;这是项目的第一提交，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">dquote&amp;gt; 进行了项目的初始化，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">dquote&amp;gt; 并添加了 readme 文件。&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>master（根提交） f647981&lt;span style="color:#f92672">]&lt;/span> 这是项目的第一提交， 进行了项目的初始化， 并添加了 readme 文件。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> file changed, &lt;span style="color:#ae81ff">0&lt;/span> insertions&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span> deletions&lt;span style="color:#f92672">(&lt;/span>-&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create mode &lt;span style="color:#ae81ff">100644&lt;/span> readme
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit f6479814f196ab818abcc9ed9b33c8aeffc43b5d &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: dianbanjiu &amp;lt;dianbanjiu@gmail.com&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Sun Jul &lt;span style="color:#ae81ff">19&lt;/span> 22:59:07 &lt;span style="color:#ae81ff">2020&lt;/span> +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 这是项目的第一提交，
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 进行了项目的初始化，
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 并添加了 readme 文件。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，在对 commit 信息的开始添加了第一个引号之后，输入一些信息键入回车，git 会自动转到下一行，并且以 &lt;code>dquote&amp;gt;&lt;/code> 表示 git 在继续等你输入 commit 信息，直到检测到第二个引号为止。&lt;/p>
&lt;p>如果的 commit 信息中也包含了英文的半角引号，可以通过 &lt;code>\&lt;/code> 来进行转义。&lt;/p></description></item><item><title>使用这些插件让你的 Firefox 变得更好用</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8%E8%BF%99%E4%BA%9B%E6%8F%92%E4%BB%B6%E8%AE%A9%E4%BD%A0%E7%9A%84-firefox-%E5%8F%98%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%94%A8/</link><pubDate>Sun, 19 Jul 2020 12:30:35 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8%E8%BF%99%E4%BA%9B%E6%8F%92%E4%BB%B6%E8%AE%A9%E4%BD%A0%E7%9A%84-firefox-%E5%8F%98%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%94%A8/</guid><description>&lt;p>在 Linux 下我最喜欢用的浏览器一个是 chromium，另一个是 Firefox。但是因为各种网络原因，我最终还是把 Firefox 作为了我的主力浏览器。之所以喜欢这俩浏览器主要还是因为他们庞大的插件系统，这两个浏览器本身的功能并没有什么特别出彩的地方，但是结合各种插件，就可以让它们充满无限可能。下面是我在使用 Firefox 时必装的几个插件（其实在 Chromium 上使用的也主要是这几个）。&lt;/p>
&lt;h3 id="沙拉查词">沙拉查词&lt;/h3>
&lt;p>沙拉查词是一个划词翻译的插件，内置了 n 多种词典，包括谷歌翻译、必应翻译、有道翻译&amp;hellip;只需用鼠标选中想要翻译的单词或者句子，然后鼠标移动到旁边的沙拉碗上，你就可以&lt;del>饱餐一顿&lt;/del>看到这个单词的多种完整释义，或者是句子的完整翻译，个人觉得翻译句子还谷歌翻译出来的更有感觉一点，其他几个翻译出来的机器感就有点重。&lt;/p>
&lt;p>当然除了英文，沙拉查词还支持其他很多的语言，像是日语、韩语、德语、西班牙语，不过这些语言咱也不懂，也不好判断翻译的怎么样。&lt;/p>
&lt;h3 id="imagus">Imagus&lt;/h3>
&lt;p>Imagus 可以用来预览图片或者视频(视频是简介里说可以的，但是我也没实际看到支持的网站)，只需要一张缩略图或者一个图片链接，无需点进去查看原图，只需要将鼠标移至缩略图或者图片链接上就可以直接查看高清大图。&lt;/p>
&lt;h3 id="keepassxc-browser">KeepassXC-Browser&lt;/h3>
&lt;p>Keepass 是一个开源的密码管理器，KeepassXC 是基于 Keepass 的一个开源版本，而 KeepassXC-browser 则是可以搭配桌面端的 KeepassXC 对浏览器中的一些用户表单进行自动填写。&lt;/p>
&lt;h3 id="octotree">Octotree&lt;/h3>
&lt;p>通过这个插件可以快速地浏览一个托管在 github 的项目的整体结构，而无需一个一个目录点进去。安装好 Octotree 后，在浏览 github 中的项目时，会在浏览器的侧边出现一个小图标，将鼠标移到该图标上就可以看到项目的树形展开，点击对应的文件即可跳转过去。如果想要查看自己的私人仓库，则需要添加对应的访问密钥才行。&lt;/p>
&lt;h3 id="onetab">OneTab&lt;/h3>
&lt;p>每次使用浏览器都会打开一堆的标签页，直到整个标签行都挤得只剩下一个小图标，实际上这些标签页有很多我都暂时用不上，但是直接关闭，下次从历史记录里面找又很麻烦，添加到书签又不好分类，使用 OneTab 就可以帮我很好的解决这个困扰。你可以对收入到 OneTab 中的链接进行分组和加星，方便下一次的访问，还可以把 OneTab 的分组和标星结合到自己的工作流中来提高生产效率。&lt;/p>
&lt;p>有一点需要注意的是，OneTab 会把所有的标签页的链接收起到自己的管理器当中，而不是直接保存的页面，所以在你下次打开时还是会消耗流量来重新加载。&lt;/p>
&lt;h3 id="ublock-origin">uBlock Origin&lt;/h3>
&lt;p>ub 是一个轻量级的广告拦截插件，占用很低，拦截的准确率很高，支持自定义拦截，而且也不会分析用户的行为，可以说是广告拦截插件中的一股清流。根据作者在 github 上说的，ub 没有后台服务器，不会将用户的浏览数据发给后端，唯一会链接的是 github，而且 ub 永远也只会是一个个人项目。&lt;/p>
&lt;h3 id="vimium">Vimium&lt;/h3>
&lt;p>说实话我也挺喜欢用鼠标点点点的，但是在很多情况下，我不总是能够准确瞄准某个按钮或者链接，时间长了之后真的是感觉有点烦人，直到后来看到了 Vimium 这个插件，它使用了很多 vim 对应的键盘映射来对浏览器进行操作，因为之前使用过一段时间的 vim，所以这个插件上手起来还是很快的，而且对这个插件一旦熟悉起来，那浏览器网页来简直爽的不要不要的，真就是解放鼠标，像个黑客一样使用浏览器。&lt;/p>
&lt;p>Vimium 最基础的使用，进入一个页面，按下 f 进入选择模式，这时候页面上所有可以点击的部分都会有对应的按键标注，只要按照指示的键位按下即可打开一个页面，如果想要在一个新的标签页打开链接，那可以按下 F 来进入选择模式。更多键位可以通过按下 ? 来查看。&lt;/p>
&lt;h3 id="wikiwand">Wikiwand&lt;/h3>
&lt;p>Wikipedia 可以说是一座相当大的知识宝库了，但是不得不说的是 wikipedia 的页面是真的上古，有很多东西本来可能还有兴趣，但是因为这枯燥的排版可能瞬间就会打消我继续看下去的欲望。而 Wikiwand 插件则会在你浏览 Wikipedia 时跳转到对应的 Wikiwand 页面，两个页面的内容完全一致，但是 Wikiwand 的界面设计就更加好看、更加现代化一些。&lt;/p></description></item><item><title>在Hugo博客中添加一个新的页面</title><link>https://www.dianbanjiu.com/post/%E5%9C%A8hugo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E9%A1%B5%E9%9D%A2/</link><pubDate>Thu, 11 Jun 2020 23:18:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E5%9C%A8hugo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E9%A1%B5%E9%9D%A2/</guid><description>&lt;p>这里说的页面不是指 hugo 利用 markdown 文件生成的页面，而是我们自己手动创建的 html 页面。&lt;/p>
&lt;p>这个过程其实并不复杂，但是你需要有一些前端开发的经验，起码的 HTML、CSS、JavaScript 基础你需要了解一些，其次不太推荐使用类似 Vue 这样的 JS 框架，因为 hugo 的页面使用了大量的 golang 模板语法，就是你在主题文件中看到的 &lt;code>{{}}&lt;/code> 语法，而 Vue 中也有到这个语法，这可能会在无意中给你的开发造成障碍，而且后期再看或者修改这些代码的时候也很有可能会混乱。&lt;/p>
&lt;p>屁话说得有点多了，下面正式开始。&lt;/p>
&lt;h3 id="todo">TODO&lt;/h3>
&lt;p>首先在根目录下的 &lt;code>static&lt;/code> 下创建一个目录，目录名是你的页面名。比如我想通过 &lt;a href="https://www.dianbanjiu.com/just-talk">https://www.dianbanjiu.com/just-talk&lt;/a> 来访问这个页面，那目录名就需要命名为 &lt;code>just-talk&lt;/code>，下面我就以这个名字为例。&lt;/p>
&lt;p>在 just-talk 下创建 index.html 文件，并复制 public 目录下 404.html 里面的内容到 just-talk/index.html 中，接着你就可以根据自己的需求修改 just-talk/index.html 文件。&lt;/p>
&lt;p>创建 just-talk 还有另外一种途径，首先在 content 目录下创建 just-talk.md 文件，文件表头部分的填充内容与其他的文章类似，然后使用 &lt;code>hugo&lt;/code> 命令生成博客内容，这时候打开 public 目录，你可以看到出现了一个 just-talk 目录，将这个目录移动到 static 目录下，并将之前的 just-talk.md 文件删掉，之后修改 just-talk/index.html 里面的内容为你需要的即可。&lt;/p>
&lt;p>通过 &lt;code>hugo&lt;/code> 命令可以将 static 下的内容原封不动的复制到 public 目录，所以在你修改完 just-talk/index.html 之后，就可以直接使用 &lt;code>hugo&lt;/code> 生成页面。&lt;/p>
&lt;p>如果你需要将该页面添加到导航栏，可以参照配置文件中其他导航项的结构，将其添加进去即可，比如我的 toml 设置方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;一言&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;just-talk&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">identifier&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;just-talk&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以使用 &lt;code>hugo server -D&lt;/code> 预览一下效果。&lt;/p>
&lt;h3 id="little-tips">Little Tips&lt;/h3>
&lt;ol>
&lt;li>当你使用第二种方式创建完 just-talk 目录之后一定要删除 just-talk.md 文件，否则你即便修改了 just-talk/index.html 文件，修改结果也不会同步到你的博客中，因为 hugo 首先获取的是 just-talk.md 中的内容，只有在这个文件不存在时，才会使用 static 中的内容。&lt;/li>
&lt;li>public 目录中的内容只会修改，而不会删除。比如你之前创建了一篇名为 hello.md 的文章，使用 &lt;code>hugo&lt;/code> 命令生成博客内容后，即便你手动删除了 hello.md，并再次使用 &lt;code>hugo&lt;/code> 指令生成博客内容，你会发现你博客中依然会存在 hello 这么一篇文章。如果你想彻底删除它，除了删除 hello.md 外，还需要手动将 public 中对应的文件删除掉才行。所以建议可以先整个删除 public 目录，然后再使用 &lt;code>hugo&lt;/code> 命令生成博客内容。&lt;/li>
&lt;/ol>
&lt;h3 id="something-others">Something others&lt;/h3>
&lt;p>&lt;a href="https://golang.org/pkg/html/template/#hdr-Contexts">golang template&lt;/a>&lt;br>
&lt;a href="https://cn.vuejs.org/v2/guide/syntax.html">Vue 模板语法&lt;/a>&lt;br>
&lt;a href="https://www.runoob.com/">前端教程&lt;/a>&lt;/p></description></item><item><title>Linux 添加 Windows 字体库</title><link>https://www.dianbanjiu.com/post/linux-%E6%B7%BB%E5%8A%A0-windows-%E5%AD%97%E4%BD%93%E5%BA%93/</link><pubDate>Wed, 27 May 2020 23:02:52 +0800</pubDate><guid>https://www.dianbanjiu.com/post/linux-%E6%B7%BB%E5%8A%A0-windows-%E5%AD%97%E4%BD%93%E5%BA%93/</guid><description>&lt;p>如果你有尝试过在 Linux 下打开 Windows 制作的 word 文档，或者在 Windows 下打开 Linux 制作的 word 文档，你可能会惊喜的发现在两个平台下同一个 word 文件的样式截然不同，这对于一些对格式要求比较严格的情况还是比较麻烦的。不过在 Linux 下还是有很简单的解决办法的。&lt;/p>
&lt;p>测试平台及工具：&lt;/p>
&lt;ul>
&lt;li>Manjaro Linux&lt;/li>
&lt;li>WPS&lt;/li>
&lt;/ul>
&lt;h2 id="way-1复制粘贴推荐">way 1：复制粘贴（推荐）&lt;/h2>
&lt;p>首先你需要一台装有 Windows 的电脑或者一个装有 Windows 的虚拟机，从 C 盘的 &lt;code>windows/Fonts&lt;/code> 中复制出你需要的字体，或者干脆直接复制整个 &lt;code>Fonts&lt;/code> 目录；&lt;/p>
&lt;p>然后在你的 Linux 的 &lt;code>/usr/share/fonts/&lt;/code> 目录下新建一个目录，比如 WinFonts 之类的，名字可以随意，只要你知道它是干啥的就好；&lt;/p>
&lt;p>接着把你第一步复制出来的字体放到第二步新建的目录中；&lt;/p>
&lt;p>最后执行下面的指令刷新字体：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo fc-cache -fv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这下再打开你之前格式显示有问题的 word 文档，应该就可以正常显示了。&lt;/p>
&lt;h2 id="way-2从-aur-安装">way 2：从 AUR 安装&lt;/h2>
&lt;p>万能的 AUR 里基本只有你想不到的，安装 win 下的字体也同样是小菜一碟，而且后续如果有新的字体，通过 AUR 安装的字体还可以无感更新。&lt;/p>
&lt;p>AUR 里有很多 win 的字体包，甚至还分为不同的 win 系统，比如 win10、win7，这里你可以只安装一个 &lt;code>ttf-ms-fonts&lt;/code> 包，这个包基本上就包含的比较全了。&lt;/p>
&lt;p>最后同样需要执行一下上面提到的那条命令刷新一下字体。&lt;/p>
&lt;p>这里推荐第一个方法，因为第二个方法涉及到的字体都要在线下载，速度上自然比不过本地拷贝，而且常用的字体其实并不会很多，而且这些常用的字体通常也都比较稳定更新不会很多。&lt;/p>
&lt;h2 id="额外补充">额外补充&lt;/h2>
&lt;p>我在从使用命令刷新完字体后，感觉整个系统的字体都变得“锐利”起来了，大概就是变成了 Windows 字体的那个样子，我虽然是完整拷贝了 Windows 的字体库，但是我并没有设置本地的字体为 Windows 的字体，这个问题还得后面再看看是什么原因导致的。&lt;/p></description></item><item><title>使用 Vim 开始 Markdown 之旅</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-vim-%E5%BC%80%E5%A7%8B-markdown-%E4%B9%8B%E6%97%85/</link><pubDate>Sun, 03 May 2020 23:14:39 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-vim-%E5%BC%80%E5%A7%8B-markdown-%E4%B9%8B%E6%97%85/</guid><description>&lt;p>&lt;img src="https://i.imgur.com/GUHdWtf.jpg" alt="img">&lt;/p>
&lt;center style="color:#C0C0C0;font-size:13px; text-decoration:underline">爬山时遇到的小猫咪&lt;/center>
&lt;p>最近没事干，就想着给自己的 Vim 配置一下 markdown 环境，因为有现成的 markdown 预览插件，而且 vim 总体来说加载速度也快一些（说的就是比你 vscode 快🤪），说干就干。&lt;/p>
&lt;p>我使用的系统是 Manjaro Linux，所以下面的介绍也是基于 Linux 的，其他系统的配置过程可能会略有不同。&lt;/p>
&lt;blockquote>
&lt;p>开始之前你需要先简单了解 vim 的几个编辑模式。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>在我们刚打开一个 vim 窗口的时候，可以看到 vim 的左下角会有一个 Normal 字样，这个模式下你无法在 vim 窗口中输入内容，只能使用一些定义好的指令，比如按下 &lt;code>dd&lt;/code> 可以删除光标所在的一整行。或者当你按下 &lt;code>:&lt;/code> 的时候将会开启命令模式，常见的保存并退出就是在这个模式下输入 &lt;code>:wq&lt;/code>。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>在 Normal 模式下按下 &lt;code>i&lt;/code> 就会进入 Insert 模式，这个模式下你可以在 vim 窗口中输入内容。输入完毕之后可以通过按下 &amp;lt;Esc&amp;gt; 键来返回 Normal 模式。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>在 Normal 模式下按下 &lt;code>v&lt;/code> 将会进入 Visual 模式，这个模式下你可以对文本进行复制等操作，同样可以通过按下 &amp;lt;Esc&amp;gt; 来返回 Normal 模式。&lt;/p>&lt;/blockquote>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>首先去 vim 官网 &lt;a href="https://www.vim.org/download.php">下载 vim&lt;/a>。官网提供了当下大部分平台的安装程序，像是 Linux、MacOS、Windows。&lt;/p>
&lt;p>Linux 用户可以使用自带的包管理器直接从源里安装。不过有些发行版的 vim 版本可能稍微老一些，如果你想用最新版的，可以选择自己手动构建，在 vim 的 github 项目里有相关教程，可以自行查阅。(手动构建的时候可以添加一个将 vim 的 buffer 内容复制到系统剪贴板的功能，而从源里安装的 vim 一般都是缺失这项功能的)&lt;/p>
&lt;p>下载好 Vim 之后就可以来配置 markdown 的环境了，首先你需要在主目录下新建一个 .vimrc 文件，这个文件就是当前用户的 vim 配置文件。&lt;/p>
&lt;p>markdown 编辑器最重要的一点就是得有预览支持，而 vim 本身并不支持这个功能，不过可以通过安装插件来添加预览功能。&lt;/p>
&lt;p>在安装插件之前你可能还需要一个 vim 的插件管理器，我使用的是 &lt;a href="https://github.com/junegunn/vim-plug">vim-plug&lt;/a>，你可以通过下面的命令来安装 vim-plug：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过由于种种原因，从 github 下载文件可能会很慢，甚至无法下载。别担心，只要你还能访问 github，那就可以很容易解决这个问题。&lt;/p>
&lt;ol>
&lt;li>首先在主目录下新建一个 .vim 目录&lt;/li>
&lt;li>在 .vim 目录下再新建一个 autoload 目录&lt;/li>
&lt;li>在 autoload 目录下新建一个 plug.vim 的文件&lt;/li>
&lt;li>打开 &lt;a href="https://github.com/junegunn/vim-plug/blob/master/plug.vim">这个链接&lt;/a>&lt;/li>
&lt;li>复制这里个链接里的内容到 plug.vim 中&lt;/li>
&lt;/ol>
&lt;p>这样 vim-plug 就安装好了。😁&lt;/p>
&lt;p>上面几步用到的命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd &lt;span style="color:#75715e"># 进入家目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkdir -p ~/.vim/autoload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ touch ~/.vim/autoload/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>打开你的 .vimrc 文件，现在里面还是空的，在里面先添加下面几行。&lt;/p>
&lt;pre tabindex="0">&lt;code>call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;)
Plug &amp;#39;iamcco/markdown-preview.nvim&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;cd app &amp;amp; yarn install&amp;#39; }
call plug#end()
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>第一行和最后一行的 plug#start 和 plug#end 是为给 vim-plug 指明插件位置的，&lt;code>~/.vim/plugged&lt;/code> 是插件之后的安装位置。&lt;/li>
&lt;li>Plug &amp;lsquo;iamcco/markdown-preview.nvim&amp;rsquo; 就是 markdown 预览插件本体了。在它后面可以看到还有一串 &lt;code> { 'do': 'cd app &amp;amp; yarn install' }&lt;/code>，这条命令将会在 markdown-preview 源码下载好之后自动执行，用以构建它所需要的环境。如果你的系统上没有安装 yarn，那你可以将 &lt;code>{ 'do': 'cd app &amp;amp; yarn install' }&lt;/code>替换为&lt;code>{ 'do': { -&amp;gt; mkdp#util#install() } }&lt;/code>。需要注意的是，在 Linux 下 &lt;code>{ 'do': { -&amp;gt; mkdp#util#install() } }&lt;/code> 有一定的几率安装之后预览无法使用。&lt;/li>
&lt;/ul>
&lt;p>至此 vim 的 markdown 环境基本配置完毕，打开一个 markdown 文件，然后输入 &lt;code>:MarkdownPreview&lt;/code>，将会使用你的默认浏览器打开一个窗口，如下所示：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/4kFLvwL.png" alt="vim-markdown-preview">&lt;/p>
&lt;p>在预览完成之后你可以通过 &lt;code>:MarkdownPreviewStop&lt;/code> 来关闭预览，如果你选择直接退出当前的 vim，那预览界面也会同时关闭。&lt;/p>
&lt;h2 id="进阶操作">进阶操作&lt;/h2>
&lt;p>安装完预览插件之后，虽然已经可用了，但是如果能为 markdown 配置一些快捷操作，那肯定可以让你的文档编写效率更上一层楼。下面就来介绍一些常用的操作。&lt;/p>
&lt;p>最常用的操作那当然非预览莫属了，每次都要输入一长串的命令显然不太舒服，我们可以通过在 .vimrc 里面添加下面的一行代码来将预览绑定到 &lt;code>,m&lt;/code> 组合键上。&lt;/p>
&lt;pre tabindex="0">&lt;code>let g:mkdp_brower = &amp;#39;chromium&amp;#39;
autocmd Filetype markdown noremap ,m :MarkdownPreview&amp;lt;CR&amp;gt;
autocmd Filetype markdown noremap ,ms :MarkdownPreviewStop&amp;lt;CR&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>上面的第一句是将预览的默认浏览器设置为 chromium (可选，如果不指定则使用系统的默认浏览器打开)&lt;/li>
&lt;li>后两句开始的 &lt;code>autocmd Filetype markdown&lt;/code> 声明只有在文件类型为 markdown 时这两个快捷键才会生效&lt;/li>
&lt;li>第二句是将 &lt;code>:MarkdownPreview&lt;/code> 命令绑定到 &lt;code>,m&lt;/code> 组合键上&lt;/li>
&lt;li>第三句是将 &lt;code>:MarkdownPreviewStop&lt;/code> 绑定到 &lt;code>,ms&lt;/code> 组合键上&lt;/li>
&lt;/ul>
&lt;p>除此之外，你还可以将一些常用的样式，像是加粗、斜体、链接、图片等等根据自己的需要定义对应的快捷键。&lt;/p>
&lt;pre tabindex="0">&lt;code>autocmd Filetype markdown noremap ,b i****&amp;lt;Esc&amp;gt;hi
&lt;/code>&lt;/pre>&lt;p>在 Normal 模式下，按下 &lt;code>,b&lt;/code>，将会依此执行&lt;/p>
&lt;ol>
&lt;li>&lt;code>i&lt;/code> 进入 Insert 模式&lt;/li>
&lt;li>插入四个 &lt;code>*&lt;/code>&lt;/li>
&lt;li>执行 &lt;code>&amp;lt;Esc&amp;gt;&lt;/code> 指令返回 Normal 模式&lt;/li>
&lt;li>向左移动一位将光标移到星号中间&lt;/li>
&lt;li>执行 &lt;code>i&lt;/code> 指令进入 Insert 模式&lt;/li>
&lt;/ol>
&lt;p>按照上面的格式你可以配置其他样式的快捷键。&lt;/p>
&lt;p>最后还需要提醒的是，这些组合键你不必同时按下，但是两个键按下的间隔不要超过 2 秒，否则只会执行你最后输入的那个键位对应的操作。&lt;/p></description></item><item><title>从零开始配置 Go 开发环境</title><link>https://www.dianbanjiu.com/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE-go-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link><pubDate>Wed, 22 Apr 2020 22:50:05 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE-go-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid><description>&lt;h1 id="安装-go">安装 go&lt;/h1>
&lt;p>关于详细的安装教程，可以参考 &lt;a href="https://go.dev/doc/install">官方安装文档&lt;/a>&lt;/p>
&lt;p>官网提供了各个操作系统下的安装包以及源码，你也可以尝试通过包管理器进行安装，更加简单而且方便后面的升级&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo pacman -S go &lt;span style="color:#75715e">#Arch Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo zypper in go &lt;span style="color:#75715e">#OpenSuse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install go &lt;span style="color:#75715e">#MacOS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scoop install go &lt;span style="color:#75715e">#Windows&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过包管理器安装的 go，只需要定期运行对应的更新命令，就可以将本地的 go 更新到当前比较新的版本（这个主要取决于包管理对于包的更新策略）&lt;/p>
&lt;p>当然你也可以使用官方的 &lt;a href="https://www.dianbanjiu.com/post/go-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/">多版本管理方式进行安装&lt;/a>&lt;/p>
&lt;h2 id="测试">测试&lt;/h2>
&lt;p>安装完成之后，可以使用下面的命令看是否安装成功了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go version go1.14.2 linux/amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我当前 go 的版本是 1.14.2 linxu/amd64 架构的&lt;/p>
&lt;h1 id="gomodule">gomodule&lt;/h1>
&lt;p>gomodule 现在是 go 默认的包管理工具，用来解决 go 项目的依赖问题&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>下面来配置一下 gomodule 的环境，在终端执行下面的两条命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go env -w GO111MODULE&lt;span style="color:#f92672">=&lt;/span>on &lt;span style="color:#75715e"># 如果你使用 1.13 之后的版本，可以忽略这一条命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go env -w GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn &lt;span style="color:#75715e"># 你可以使用其他的代理，比如 https://goproxy.io 等&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>goproxy 是 go 的模块代理，以前一些 &lt;code>golang.org/&lt;/code> 下的包下载可能会比较慢，有了 goproxy 之后就不用再担心这个了。&lt;code>goproxy.cn&lt;/code> 使用的是七牛的 CDN 进行分发的，实测速度很可以，当然还有一些其他的代理服务，你可以自行查找自己喜欢的&lt;/p>
&lt;h2 id="简单使用">简单使用&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkdir ~/GoProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd ~/GoProject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go mod init hello &lt;span style="color:#75715e"># 初始化 go 模块&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面就创建了一个名为 &lt;code>demo&lt;/code> 的模块，模块名可以根据自己的需要修改&lt;br>
执行完上面的命令之后，会在项目根目录下生成一个 &lt;code>go.mod&lt;/code> 文件，看一下里面的内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module demo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go 1.14
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一开始里面只有一个模块名和你当前的 go 版本&lt;/p>
&lt;p>安装模块的时候跟之前一样，在项目根目录下执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go get -u https://github.com/gin-gonic/gin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再看一下里面的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module leetcode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go 1.14
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>require &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> github.com/gin-gonic/gin v1.6.2 // indirect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> github.com/golang/protobuf v1.4.0 // indirect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> github.com/modern-go/reflect2 v1.0.1 // indirect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> golang.org/x/sys v0.0.0-20200420163511-1957bb5e6d1f // indirect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，gin 框架及其依赖都已经被添加进来了&lt;/p>
&lt;p>项目构建完成之后，可以使用 &lt;code>go mod tidy&lt;/code> 将项目中从未用到过的模块移除&lt;/p>
&lt;h1 id="编辑器ide">编辑器/IDE&lt;/h1>
&lt;p>推荐的编辑器是 VSCode，多平台、插件丰富。推荐的 IDE 是 Goland，功能齐全&lt;/p>
&lt;h2 id="vscode">VSCode&lt;/h2>
&lt;p>1、安装 VSCode&lt;br>
2、扩展市场搜索并安装 &lt;code>golang.go&lt;/code>&lt;br>
3、按 &lt;code>Ctrl+Shift+p&lt;/code>，输入 &lt;code>go: install/update tools&lt;/code>，全选依赖项，点击确定安装开发 go 用到的一些依赖。在开始之前请先配置好 go 的 &lt;code>GOPROXY&lt;/code> 变量&lt;br>
4、（可选）安装&lt;code>formulahendry.code-runner&lt;/code> 插件用于直接运行一些代码片段&lt;br>
5、（可选）安装 &lt;code>maxnatchanon.go-struct-tag-autogen&lt;/code> 用于自动补全结构体多种风格的 tag。具体的配置可以参考 &lt;a href="https://github.com/maxnatchanon/vscode-go-struct-tag-autogen">https://github.com/maxnatchanon/vscode-go-struct-tag-autogen&lt;/a>，下面是我的配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;goStructTagAutogen.tagSuggestion&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;json&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cases&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;camel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;snake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;uppersnake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pascal&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;none&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;omitempty&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;form&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cases&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;camel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;snake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;uppersnake&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pascal&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;none&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;omitempty&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;bson&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cases&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;snake&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;omitempty&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;binding&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;options&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;required&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，如果自动补全不生效，你需要在你 VSCode 的配置文件中新增下面的内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;editor.quickSuggestions&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;strings&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;on&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>6、（可选）安装 &lt;code>doggy8088.quicktype-refresh&lt;/code>，可以转换 JSON 数据为对应的结构体&lt;br>
7、（可选）安装 &lt;code>mishkinf.goto-next-previous-member&lt;/code>，使用 Ctrl+Arrow Up/Down 在同一个文件相邻的方法间进行跳转&lt;br>
8、（可选）在 VSCode 的配置文件中新增下面的内容，启用由 gopls 支持的语法高亮，具体说明可以参见 &lt;a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide">https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JSON" data-lang="JSON">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gopls&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ui.semanticTokens&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着就可以使用 VSCode 开始你愉快的 go 开发了&lt;/p>
&lt;h2 id="goland">Goland&lt;/h2>
&lt;p>Goland 是 Jetbrains 开发的 Go IDE，它的配置在我的 &lt;a href="https://www.dianbanjiu.com/post/goalnd-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/">Goalnd 基础配置&lt;/a> 有介绍，需要的话可以翻看一下，这里就不赘述了&lt;/p>
&lt;p>Enjoy Yourself.&lt;/p></description></item><item><title>Golang 切片</title><link>https://www.dianbanjiu.com/post/golang-%E5%88%87%E7%89%87/</link><pubDate>Sun, 15 Mar 2020 11:59:22 +0800</pubDate><guid>https://www.dianbanjiu.com/post/golang-%E5%88%87%E7%89%87/</guid><description>&lt;p>最近在使用 golang 创建子集的时候，遇到了一些问题，下面是代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Subsets&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) [][]&lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span> = make([][]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> = make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sets&lt;/span> = append(&lt;span style="color:#a6e22e">sets&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">nums&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span> = append(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sets&lt;/span> = append(&lt;span style="color:#a6e22e">sets&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当测试切片的长度不大于 4，比如 []int{1,2,3,4} 的时候，程序输出正常，结果也是正确的。&lt;br>
不过当切片长度大于 4 的时候，比如 []int{1,2,3,4,5}，程序输出的二维切片的长度虽然正确，但是期中有一些数据就会有问题。在 debug 的时候发现，当计算完 sets[21]，开始计算 sets[22] 的时候，sets[15] 会从 []int{1,2,3,4}，变成 []int{1,2,3,5}。&lt;/p>
&lt;p>在查询之后发现，因为 sets 的元素每次引用的都是同样的切片，所以可能会导致这个问题。最好的解决办法就是为 sets 的每个元素创建新的切片，下面是修改后的代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Subsets&lt;/span>(&lt;span style="color:#a6e22e">nums&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) [][]&lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span> = make([][]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> = make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sets&lt;/span> = append(&lt;span style="color:#a6e22e">sets&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">nums&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span> = append([]&lt;span style="color:#66d9ef">int&lt;/span>{}, &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#f92672">...&lt;/span>) &lt;span style="color:#75715e">// 将 v 中的元素逐个复制到 t 中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span> = append(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">nums&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]) &lt;span style="color:#75715e">// 将新的元素再添加到 t 中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sets&lt;/span> = append(&lt;span style="color:#a6e22e">sets&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用手机制作 Linux Live CD</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%88%B6%E4%BD%9C-linux-live-cd/</link><pubDate>Thu, 02 Jan 2020 12:44:45 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%88%B6%E4%BD%9C-linux-live-cd/</guid><description>&lt;p>在 2020 年的第一天，因为想试试黑苹果，所以就从网上下载了安装镜像，在自己的笔记本上尝试了一下，不过因为各种原因最后安装失败了，惟一的系统也在尝试安装黑苹果的时候给格掉了。身边又只有这一台电脑，没办法，本来准备去网吧写个 Manjaro 的启动盘的，可惜木马病毒太多，在网吧杀了两个小时的毒，也没杀完，最后就放弃了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/BXi7QoK.jpg" alt="Imgur">&lt;/p>
&lt;p>在从网吧回寝室的路上，我想到了曾经在 distrowatch.org 上好像看到过 gparted，就是那个 Linux 下挺著名的分区工具，也有一个 Linux 发行版，而且我隐约记得它似乎是可以直接解压到 U 盘使用的。想到这我就迫不及待得尝试了一下，果然可以！！！&lt;/p>
&lt;h3 id="预先准备">预先准备&lt;/h3>
&lt;ul>
&lt;li>两个 U 盘（一个用来装 gparted，另一个用来制作 manjaro 启动盘）。&lt;/li>
&lt;li>一个 otg（可以连接 U 盘到手机上的工具）。&lt;/li>
&lt;li>手机一部&lt;/li>
&lt;/ul>
&lt;h3 id="game-start">Game Start&lt;/h3>
&lt;p>首先去 &lt;a href="https://gparted.org/download.php">gparted 下载页面&lt;/a> 下载 &lt;strong>Stable directory (.iso/.zip)(for i686, i686-pae and amd64 architectures)&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/O0ld1kR.png" alt="Imgur">&lt;/p>
&lt;p>下载下来的是一个 zip 压缩包，在手机上可以直接解压出来，然后利用 otg 把手机跟 U 盘连接起来，在复制文件之前，请先确保 U 盘的格式为 fat 格式。然后将解压之后的文件复制到 U 盘当中，gparted 本身并不是很大，解压后大概 357M，但是因为之后还要下载 manjaro 镜像文件，所以这两个 U 盘的容量都建议至少 4G 以上。&lt;/p>
&lt;p>至此，Gparted Live CD 已经制作完成，插到电脑上，进入电脑的引导界面，选择 Gparted 所在的 U 盘启动。&lt;/p>
&lt;p>建议你在复制完 Live CD 所需的文件之后，同时下载好需要的镜像文件，比如我选择的 manjaro，&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/m/ma/">manjaro 下载地址&lt;/a>，这是清华的镜像源，国内下载速度很快，包括官方版本和社区版本以及之前的历史版本。在手机上下载好之后也复制到 Live CD 当中。&lt;/p>
&lt;p>引导加载完成之后后你可以看到下面这个画面，选择第一项回车进入。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/d27drNa.png" alt="Imgur">&lt;/p>
&lt;p>之后的键盘模式选择 &lt;code>Don't touch keymap&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/O55JJzQ.png" alt="imgur">&lt;/p>
&lt;p>后面的两项直接回车，第一个回车会直接选择默认的 US English 为默认的语言，第二个回车是以图形界面加载桌面。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LtegLuc.png" alt="Imgur">&lt;/p>
&lt;p>加载完成即可进入桌面了：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/rTqcked.png" alt="Imgur">&lt;/p>
&lt;p>插上你的另外一个 U 盘，使用 &lt;code>fdisk&lt;/code> 命令确定新插入 U 盘的设备名，然后就可以使用 dd 命令将镜像写入 U 盘了。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/hOsO0gV.png" alt="Imgur">&lt;/p>
&lt;p>最后关机拔掉 gparted Live CD 的 U 盘，开机重新进入新的引导盘。之后的就可以根据新的安装要求安装新系统了。&lt;/p></description></item><item><title>Android 手机投屏到 Linux 下</title><link>https://www.dianbanjiu.com/post/android-%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E5%88%B0-linux-%E4%B8%8B/</link><pubDate>Tue, 24 Dec 2019 14:40:22 +0800</pubDate><guid>https://www.dianbanjiu.com/post/android-%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E5%88%B0-linux-%E4%B8%8B/</guid><description>&lt;p>最近发现了一个可以在 Linux 下使用的手机投屏软件软件 —— &lt;strong>scrcpy&lt;/strong>，同时也支持 Windows 和 MacOS，但是因为我用的是 Manjaro Linux，所以下面只会介绍 Manjaro 下的情况。其他的系统可以参照 &lt;a href="https://github.com/Genymobile/scrcpy">scrcpy&lt;/a>&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>如果使用的是 Arch Linux 系的系统，并且已经配置了 archlinuxcn 的源，可以直接使用 pacman 进行安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -S scrcpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果没有配置的话，也可以从 aur 获取，以 &lt;strong>yay&lt;/strong> 为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ yay scrcpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>在开启 scrcpy 之前，你还需要做下面这几件事情：&lt;/p>
&lt;ol>
&lt;li>电脑上安装 &lt;strong>adb&lt;/strong>。&lt;/li>
&lt;li>在手机上打开 &lt;strong>开发者模式&lt;/strong>。&lt;/li>
&lt;li>在开发者模式当中开启 &lt;strong>USB 调试&lt;/strong> 以及 &lt;strong>USB 调试(安全设置)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>注：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>USB 调试(安全设置)&lt;/strong> 可能不是所有的手机上都会有，如果有的话最好开启，我使用的是 mi Mix2，系统是 MIUI eu，不开启 &lt;strong>USB 调试(安全设置)&lt;/strong> 的情况下，在 scrcpy 当中是无法使用鼠标以及键盘的。&lt;/li>
&lt;li>在 Linux 下可以通过安装 &lt;strong>android-tools&lt;/strong> 来获取 adb。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>scrcpy 可以通过有线和无线两种方式连接手机。&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;h3 id="有线">有线&lt;/h3>
&lt;ol>
&lt;li>上面这些都准备好了之后，先使用数据线连接手机与电脑，在终端先输入 &lt;code>adb devices&lt;/code>，如果是第一次执行这条命令，在手机上应该会出现一个确认使用该电脑调试手机的通知，同时终端上也会显示你的设备号。&lt;/li>
&lt;li>点击确认之后，直接在终端输入 &lt;code>scrcpy&lt;/code> 应该就可以看到手机界面出现在电脑屏幕上了。&lt;/li>
&lt;/ol>
&lt;h3 id="无线">无线&lt;/h3>
&lt;ol>
&lt;li>第一步同上面有线连接的第一步。&lt;/li>
&lt;li>连接成功之后，在终端输入 &lt;code>adb tcpip 5555&lt;/code>，这个端口可以根据自己的需要选择。&lt;/li>
&lt;li>开启成功之后就可以拔掉数据线了。&lt;/li>
&lt;li>在手机的 设置-&amp;gt;我的设备-&amp;gt;全部参数-&amp;gt;状态信息 中查看手机的 ip（这是 MIUI 的查看方式，其他系统应该大同小异）。&lt;/li>
&lt;li>在终端输入 &lt;code>adb connect PHONE_IP:5555&lt;/code> 连接手机。&lt;/li>
&lt;li>最后在终端输入 &lt;code>scrcpy&lt;/code> 就可以看到现在的手机界面了。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://i.imgur.com/yWiL9sC.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>连接之后，仅可以传输手机的画面，但并不能传递声音，声音依然是从手机发出的。&lt;/li>
&lt;li>开启 MIUI 的 USB 调试（安全设置）需要登录小米帐号才可以，如果使用 4g 网络依旧无法连接，可以尝试切换到 wifi 网络。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h2 id="快捷使用">快捷使用&lt;/h2>
&lt;p>下面是一些常用的键盘快捷方式：&lt;br>
&lt;strong>注：&lt;/strong> Linux 下的 &lt;code>mod&lt;/code> 键为 &lt;code>视窗&lt;/code> 键，也就是那个 windows 图标键。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>作用&lt;/th>
&lt;th>快捷键&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>返回&lt;/td>
&lt;td>mod+B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>主界面&lt;/td>
&lt;td>mod+H&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>多任务界面&lt;/td>
&lt;td>mod+S&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关闭手机屏幕（电脑上的界面正常显示）&lt;/td>
&lt;td>mod+O&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>开启手机屏幕&lt;/td>
&lt;td>右键单击&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>展开通知栏&lt;/td>
&lt;td>mod+N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>折叠通知栏&lt;/td>
&lt;td>mod+Shift+N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果需要将电脑的文件传到手机，直接将文件拖拽到电脑上的手机界面即可，文件默认是会存放在用户的主目录下的，也就是手机上跟 Downloads 同级的目录下。&lt;/p>
&lt;p>虽然 scrcpy 也支持同步手机跟电脑的剪贴板，不过不是很好用。&lt;/p>
&lt;p>此外， scrcpy 还支持很多其他的参数，也还有很多其他的快捷键，上面仅列出了我经常使用的几个。&lt;/p>
&lt;p>如果你手机跟电脑上还安装了 &lt;code>kde-connect&lt;/code> 的话，可以通过它来同步手机的通知以及剪贴板，还可以用来管理手机文件。跟 scrcpy 搭配使用体验还是很不错的。&lt;/p>
&lt;p>在连接到电脑之后我们很多时候可能都希望手机息屏而 PC 端的镜像可以常亮，虽然可以通过 &lt;code>mod+O&lt;/code> 来实现，但这种方式实现的亮屏会在达到手机屏幕休眠时间之后自动黑屏，所以想要实现常亮的话需要在启动 scrcpy 的时候添加一个可以保持屏幕唤醒的参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ scrcpy --turn-screen-off --stay-awake
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果亮屏是刚需的话也可以将这个命令设置为 scrcpy 的别名，只需要在 &lt;code>~/.zshrc&lt;/code> 或者 &lt;code>~/.bashrc&lt;/code> 中添加如下内容，然后 &lt;code>source&lt;/code> 该文件即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>alias scrcpy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;scrcpy --turn-screen-off --stay-awake&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hugo 创建多级菜单</title><link>https://www.dianbanjiu.com/post/hugo-%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95/</link><pubDate>Sat, 21 Dec 2019 15:05:02 +0800</pubDate><guid>https://www.dianbanjiu.com/post/hugo-%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95/</guid><description>&lt;p>hugo 的多级多级菜单相较于单级菜单，仅仅是多了一个 &lt;code>parent&lt;/code> 参数。&lt;/p>
&lt;p>下面是一个单级菜单的样式配置：&lt;br>
&lt;em>注：我使用的是 toml 格式的配置文件，其他类型的根据自己需求修改就可以了。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;主页&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;标签&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;/tags/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这样可以创建一个最简单的单级菜单，显示效果就是我博客上现在显示的样子。&lt;/p>
&lt;p>下面是创建多级菜单的一个实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;多级菜单&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;多级菜单&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;菜单1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">menu&lt;/span>.&lt;span style="color:#a6e22e">main&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;多级菜单&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;菜单2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就可以创建一个两层菜单了，显示效果如下图所示。如果需要更多级，只需要在下面按照上面的规则继续添加即可。其中的 &lt;code>weight&lt;/code> 参数是可选的，它可以调整各个菜单在菜单栏中的相对顺序，数值越小的菜单越靠前。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I0y54MM.png" alt="多级菜单">&lt;/p>
&lt;p>需要注意的是，次级菜单的名称中必须有一些标识序号的选项，比如数字或者加减号。否则可能只会显示配置文件当中创建的最后一个次级菜单。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I0y54MM.png" alt="有数字标识1">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/bIUCMSr.png" alt="有数字标识2">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/x6hWT8q.png" alt="有加减号">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/05hBRKE.png" alt="无标识">&lt;/p></description></item><item><title>Golang 对指定关键词进行排序</title><link>https://www.dianbanjiu.com/post/golang-%E5%AF%B9%E6%8C%87%E5%AE%9A%E5%85%B3%E9%94%AE%E8%AF%8D%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</link><pubDate>Fri, 20 Dec 2019 16:14:03 +0800</pubDate><guid>https://www.dianbanjiu.com/post/golang-%E5%AF%B9%E6%8C%87%E5%AE%9A%E5%85%B3%E9%94%AE%E8%AF%8D%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</guid><description>&lt;p>之前在处理以结构体作为切片类型的问题里，如果可以对切片进行排序，则可以使问题简化许多。因为结构体有很多字段，既有字符字段又有数值字段，可以考虑通过实现 golang sort.Sort 的接口对结构体切片进行排序。&lt;/p>
&lt;p>假设结构体切片如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Weight&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Length&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">NodeSlice&lt;/span> []&lt;span style="color:#a6e22e">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#a6e22e">NodeSlice&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Weight&lt;/span>: &lt;span style="color:#ae81ff">12&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Length&lt;/span>: &lt;span style="color:#ae81ff">90&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Weight&lt;/span>: &lt;span style="color:#ae81ff">17&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Length&lt;/span>: &lt;span style="color:#ae81ff">26.2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;C&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Weight&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Length&lt;/span>: &lt;span style="color:#ae81ff">1.2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Weight&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Length&lt;/span>: &lt;span style="color:#ae81ff">22&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">node&lt;/span> = append(&lt;span style="color:#a6e22e">node&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在以 Weight 作为关键词来对 node 进行排序。&lt;/p>
&lt;p>首先需要导入 sort 包，并且需要以 NodeSlice 类型作为接收者 (reciver) 实现 &lt;code>Len()&lt;/code>，&lt;code>Swap(i, j int)&lt;/code>，&lt;code>Less(i,j int)&lt;/code> 三个方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ns&lt;/span> &lt;span style="color:#a6e22e">NodeSlice&lt;/span>) &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">ns&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ns&lt;/span> &lt;span style="color:#a6e22e">NodeSlice&lt;/span>) &lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ns&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">ns&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">ns&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>], &lt;span style="color:#a6e22e">ns&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ns&lt;/span> &lt;span style="color:#a6e22e">NodeSlice&lt;/span>) &lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ns&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Weight&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">ns&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>].&lt;span style="color:#a6e22e">Weight&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后你就可以调用 sort.Sort 来对该类型的切片进行排序了，默认是从小到大：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sort&lt;/span>.&lt;span style="color:#a6e22e">Sort&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>打印结果如下：&lt;/p>
&lt;blockquote>
&lt;p>[{A 12 90} {B 17 26.2} {C 5 1.2} {D 8 22}]&lt;br>
[{C 5 1.2} {D 8 22} {A 12 90} {B 17 26.2}]&lt;/p>&lt;/blockquote>
&lt;p>如果需要从大到小进行打印，只需要将 &lt;code>sort.Sort(node)&lt;/code> 替换为 &lt;code>sort.Sort(sort.Reverse(node))&lt;/code>。&lt;/p>
&lt;p>如果需要以其他参数作为关键词进行排序，只需要调整实现的 &lt;code>Less&lt;/code> 方法的关键词即可。&lt;/p></description></item><item><title>禁止 Android 版的 Firefox 自动跳转应用</title><link>https://www.dianbanjiu.com/post/%E7%A6%81%E6%AD%A2-android-%E7%89%88%E7%9A%84-firefox-%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 23 Nov 2019 21:48:35 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%A6%81%E6%AD%A2-android-%E7%89%88%E7%9A%84-firefox-%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%BA%94%E7%94%A8/</guid><description>&lt;p>Android 版的 Firefox 在打开像是知乎回答，bilibili 的视频，小米商城等的时候，会自动跳转至手机上对应的 app 里面去，可是如果你的手机上如果没有安装这些软件的话，Firefox 就会跳转至以 app 名为协议名的一个网址，类似 &lt;code>zhihu://...&lt;/code>，而这个网址一般是无法识别的，这时候就会出现下面的情况。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2019/11/23/oVcpgzalmKjAH34.jpg" alt="">&lt;/p>
&lt;p>要解决这个问题，可以按照下面的步骤：&lt;/p>
&lt;ol>
&lt;li>在 Firefox 的地址栏输入 &lt;code>about:config&lt;/code>，&lt;/li>
&lt;li>搜索 &lt;code>network.protocol-handler.external-default&lt;/code> 字段，&lt;/li>
&lt;li>将该项对应的值由 &lt;code>true&lt;/code> 改为 &lt;code>false&lt;/code> 即可。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>参考链接：&lt;br>
&lt;a href="https://www.mobibrw.com/2018/12856">https://www.mobibrw.com/2018/12856&lt;/a>&lt;/p></description></item><item><title>为 Android Studio 配置 Flutter</title><link>https://www.dianbanjiu.com/post/%E4%B8%BA-android-studio-%E9%85%8D%E7%BD%AE-flutter/</link><pubDate>Wed, 20 Nov 2019 09:17:07 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%B8%BA-android-studio-%E9%85%8D%E7%BD%AE-flutter/</guid><description>&lt;p>Android SDK 在国内是有官方镜像源的，可以直接下载就可以，如果在配置了代理之后再下载的话，反而很容易拖慢下载速度，甚至导致下载失败。&lt;/p>
&lt;p>Android Studio 现在可能都会直接默认附带了 Flutter 的插件，如果没有的话，先在 &lt;code>Plugins&lt;/code> 中安装 Flutter 插件，然后在 SDK manager 中下载 sdk，可以下载几个最新版本之前的 SDK，因为 Android 的各个版本是向后兼容的。下载好 SDK 之后在系统变量当中添加 &lt;code>ANDROID_HOME=/path/to/sdk&lt;/code>。&lt;/p>
&lt;p>最后可以再运行 &lt;code>flutter doctor&lt;/code> 查看是否还有哪些问题出现。&lt;/p>
&lt;p>如果在运行程序的时候，发生 &lt;code>Unable to locate a development device; please run 'flutter doctor' for information about installing additional components.&lt;/code> 的错误，可以修改 &lt;code>File -&amp;gt; Project struture&lt;/code> 中的 SDK 版本，确定项目的 SDK 版本小于或者等于 AVD 的 SDK 版本。&lt;/p></description></item><item><title>使用 Go 从键盘获取带有空格的字符串</title><link>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-go-%E4%BB%8E%E9%94%AE%E7%9B%98%E8%8E%B7%E5%8F%96%E5%B8%A6%E6%9C%89%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sun, 17 Nov 2019 21:09:05 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%BD%BF%E7%94%A8-go-%E4%BB%8E%E9%94%AE%E7%9B%98%E8%8E%B7%E5%8F%96%E5%B8%A6%E6%9C%89%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;p>最近在使用 golang 从键盘获取输入的时候，发现无论使用 &lt;code>fmt.Scan()&lt;/code>，&lt;code>fmt.Scanf()&lt;/code> 还是 &lt;code>fmt.Scanln()&lt;/code> 获取一个字符串的时候，只要字符串里含有空格，就只能获取到空格以前的数据。&lt;/p>
&lt;p>可以使用 bufio 包来解决这个问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdin&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">str&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样的话可以从键盘获取一些字符串，直到遇见换行符。也可以将 &lt;code>\n&lt;/code> 换为需要的终止符来定制自己的需求。&lt;/p></description></item><item><title>求关键路径</title><link>https://www.dianbanjiu.com/post/%E6%B1%82%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</link><pubDate>Tue, 12 Nov 2019 21:35:06 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E6%B1%82%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</guid><description>&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>AOE 网中，每个节点称为一个事件，其中有两个比较特殊的点&lt;/p>
&lt;ul>
&lt;li>一个入度为 0，称为&lt;code>源点&lt;/code>，&lt;/li>
&lt;li>一个出度为 0，称为&lt;code>汇点&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>各节点之间弧的权重 w 表示一个活动 ai 的持续时间，每个事件有&lt;code>最早开始时间 ve&lt;/code> 和&lt;code>最晚开始时间 vl&lt;/code>，每个活动也有&lt;code>最早开始时间 e&lt;/code> 和&lt;code>最晚开始时间 l&lt;/code>。其中 &lt;code>l=e&lt;/code> 的活动所组成的路径称为&lt;code>关键路径&lt;/code>。关键路径中包含的活动称为&lt;code>关键活动&lt;/code>&lt;/p>
&lt;h2 id="各个量的求法">各个量的求法：&lt;/h2>
&lt;p>&lt;strong>事件的最早开始时间 ve&lt;/strong>&lt;br>
从源点开始，源点的最早开始时间为 0，其后的事件依次为前一个节点的最早开始时间加上对应弧的权重。如果某一个节点有多个入度，则该事件的最早开始时间取各个入度计算结果中的最大值。&lt;/p>
&lt;p>&lt;strong>事件的最晚开始时间 vl&lt;/strong>&lt;br>
最晚开始时间需要从汇点开始推，汇点的最晚开始时间等于其最早开始时间，接下来依次向前推，每个顶点的最晚开始时间等于后一个顶点的最晚开始时间减去对应弧的权重。如果该点有多个出度，则该事件的最晚开始时间取各个出度计算结果中的最小值。&lt;/p>
&lt;p>&lt;strong>活动的最早开始时间 e&lt;/strong>&lt;br>
一个活动的最早开始时间等于该活动所对应的弧的弧尾的最早开始时间。&lt;/p>
&lt;p>&lt;strong>活动的最晚开始时间 l&lt;/strong>&lt;br>
活动的最晚开始时间等于该活动所对应弧的弧头的最晚开始时间减去该弧的权重。&lt;/p>
&lt;h2 id="举例">举例&lt;/h2>
&lt;p>下面是一个实际的例子：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/n7K5lXp.png" alt="Imgur">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>顶点&lt;/th>
&lt;th>ve&lt;/th>
&lt;th>vl&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>v1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v4&lt;/td>
&lt;td>6&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v5&lt;/td>
&lt;td>6&lt;/td>
&lt;td>7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v6&lt;/td>
&lt;td>8&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>事件对应的最早开始时间的推算&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>v1 为源点，故 v1 的最早开始时间是 0&lt;/li>
&lt;li>v2 的入度为 1，它的最早开始时间等于 v1 的最早开始时间加上连接它们之间弧的权重 a1，结果是 0+3=3&lt;/li>
&lt;li>v3 的入度为 1，它的最早开始时间等于 v1 的最早开始时间加上连接它们之间弧的权重 a2，结果是 0+2=2&lt;/li>
&lt;li>v4 的入度为 2，首先计算出对应的两个时间，
&lt;ol>
&lt;li>v2 的最早开始时间加上它们之间弧的权重 a3，结果是 3+2=5&lt;/li>
&lt;li>v3 的最早开始时间加上它们之间弧的权重 a5，结果是 2+4=6&lt;/li>
&lt;li>比较上面的两个结果 6&amp;gt;5，故 v4 的最早开始时间是 6&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>v5 的入度为 1，它的最早开始时间等于 v2 的最早开始时间加上连接它们之间弧的权重 a4,结果是 3+3=6&lt;/li>
&lt;li>v6 的入度为 3,首先计算出对应的三个时间：
&lt;ol>
&lt;li>v3 的最早开始时间加上它们之间弧的权重 a6，结果是 2+3=5&lt;/li>
&lt;li>v4 的最早开始时间加上它们之间弧的权重 a7，结果是 6+2=8&lt;/li>
&lt;li>v5 的最早开始时间加上它们之间弧的权重 a8，结果是 6+1=7&lt;/li>
&lt;li>比较三个结果 8&amp;gt;7&amp;gt;5，故 v6 的最早开始时间是 8&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>事件对应的最晚开始时间的推算&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>v6 为汇点，v6 的最晚开始时间等于其最早开始时间等于 8&lt;/li>
&lt;li>v5 的出度为 1, 它的最晚开始时间等于 v6 的最晚开始时间减去它们之间弧的权重 a8, 结果是 8-1=7&lt;/li>
&lt;li>v4 的出度为 1, 它的最晚开始时间等于 v6 的最晚开始时间减去它们之间弧的权重 a7, 结果是 8-2=6&lt;/li>
&lt;li>v3 的出度为 2,首先计算对应的两个时间：
&lt;ol>
&lt;li>v6 的最晚开始时间减去它们之间弧的权重 a6, 结果是 8-3=5&lt;/li>
&lt;li>v4 的最晚开始时间减去它们之间弧的权重 a5, 结果是 6-4=2&lt;/li>
&lt;li>比较上面的两个值 2&amp;lt;5，故 v3 的最晚开始时间是 2&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>v2 的出度为 2，首先计算对应的两个时间：
&lt;ol>
&lt;li>v5 的最晚开始时间减去它们之间弧的权重 a4, 结果是 7-3=4&lt;/li>
&lt;li>v4 的最晚开始时间减去它们之间弧的权重 a3, 结果是 6-2=4&lt;/li>
&lt;li>比较上面的两个结果 4=4,故 v3 的最晚开始时间为 4&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>v1 的出度为 2，首先计算对应的两个时间：
&lt;ol>
&lt;li>v2 的最晚开始时间减去它们之间弧的权重 a1, 结果是 4-3=1&lt;/li>
&lt;li>v3 的最晚开始时间减去它们之间弧的权重 a2, 结果是 2-2=0&lt;/li>
&lt;li>比较上面的两个结果 0&amp;lt;1,故 v3 的最晚开始时间为 0&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>活动&lt;/th>
&lt;th>e&lt;/th>
&lt;th>l&lt;/th>
&lt;th>l-e&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>a1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a2&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a3&lt;/td>
&lt;td>3&lt;/td>
&lt;td>4&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a4&lt;/td>
&lt;td>3&lt;/td>
&lt;td>4&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a5&lt;/td>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a6&lt;/td>
&lt;td>2&lt;/td>
&lt;td>5&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a7&lt;/td>
&lt;td>6&lt;/td>
&lt;td>6&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a8&lt;/td>
&lt;td>6&lt;/td>
&lt;td>7&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>活动对应的最早开始时间的推算&lt;/strong>&lt;/p>
&lt;p>活动所对应的最早开始时间等于活动所对应弧的弧尾的最早开始时间，所以&lt;/p>
&lt;ul>
&lt;li>e(a1)=ve(v1)=0&lt;/li>
&lt;li>e(a2)=ve(v1)=0&lt;/li>
&lt;li>e(a3)=ve(v2)=3&lt;/li>
&lt;li>e(a4)=ve(v2)=3&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>活动对应的最晚开始时间的推算&lt;/strong>&lt;/p>
&lt;p>活动所对应的最晚开始时间等于活动所对应弧的弧头的最晚开始时间减去活动的持续时间（即该弧的权重），所以：&lt;/p>
&lt;ul>
&lt;li>l(a1)=el(v2)-a1=4-3=1&lt;/li>
&lt;li>l(a2)=el(v3)-a2=2-2=0&lt;/li>
&lt;li>l(a3)=el(v4)-a3=6-2=4&lt;/li>
&lt;li>l(a4)=el(v5)-a4=7-3=4&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>关键路径的确定&lt;/strong>&lt;/p>
&lt;p>找出活动时间表当中 &lt;code>l=e&lt;/code> 的活动 a2,a5,a7 即是关键路径中对应的关键活动，由这些关键活动构成的关键路径如下图：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/MLkv6K2.png" alt="Imgur">&lt;/p></description></item><item><title>计算当前目录下所有以 .c 结尾的文件数量</title><link>https://www.dianbanjiu.com/post/%E8%AE%A1%E7%AE%97%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E4%BB%A5-.c-%E7%BB%93%E5%B0%BE%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E9%87%8F/</link><pubDate>Sat, 09 Nov 2019 23:48:37 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E8%AE%A1%E7%AE%97%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E4%BB%A5-.c-%E7%BB%93%E5%B0%BE%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E9%87%8F/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ls -l | grep &lt;span style="color:#e6db74">&amp;#34;.c&lt;/span>$&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | wc -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>ls -l&lt;/code> 是列出当前目录下所有的非隐藏文件，如果需要显示隐藏文件可以添加 &lt;code>-a&lt;/code> 选项；&lt;br>
将上一步得到的结果传输给 &lt;code>grep&lt;/code>，字符串加美元符 &lt;code>$&lt;/code> 在正则式中代表以该字符串结尾的所有内容；&lt;br>
上一步获取的内容都是以行为单位的，&lt;code>wc&lt;/code> 命令可以计算给定文件的行数、字符数以及字节数，&lt;code>-l&lt;/code> 选项可以输出换行符的个数。&lt;/p></description></item><item><title>Goalnd 基础配置</title><link>https://www.dianbanjiu.com/post/goalnd-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 30 Oct 2019 10:22:53 +0800</pubDate><guid>https://www.dianbanjiu.com/post/goalnd-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>首先先设置一下 goproxy 和 go module。在系统的环境变量当中添加以下两句（zsh 的配置环境在 ~/.zshrc，bash 的在 ~/.bashrc）:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>export GO111MODULE&lt;span style="color:#f92672">=&lt;/span>on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>$PATH:$HOME:/go/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 goland - settings - go - go modules，中，选中 &lt;code>Enable go Module&lt;/code>，并在 Proxy 中填入代理站点，如 &lt;code>https://goproxy.io&lt;/code> 或者 &lt;code>https://goproxy.cn&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/H2hB8nA.png" alt="">&lt;/p>
&lt;p>之前我在 goland 中开启了 go module 之后就再也不能自动补全包中的设置了，究其原因还是因为我虽然开启了 go module，但是每次创建新项目的时候都是手动创建文件夹，然后再手动创建 go 文件，所以我只是开启了 go module，但是并未实际使用。&lt;/p>
&lt;p>所以在之后使用 goland 创建新项目的时候，最好直接选择 vgo 来创建，在导入一个外部包之后，在这个包上使用 &lt;code>Alt+Enter&lt;/code> 组合键，然后选中 &lt;code>Sync packages of &amp;lt;Project name&amp;gt;&lt;/code>，goland 就会自动将依赖添加至 go.mod 文件当中，这时你再使用外部包中的相关函数的时候，就可以触发自动补全了。&lt;/p>
&lt;p>除此之外，goland 还为我们提供了一些其他的工具，需要手动开启。&lt;/p>
&lt;p>在 Settings - Tools - File Watchers 中，可以依次添加 &lt;code>go fmt&lt;/code>，&lt;code>goimports&lt;/code> 还有 &lt;code>golangci-lint&lt;/code>，全部使用默认配置即可。&lt;/p>
&lt;p>gofmt 一般在安装 go 的时候就已经预装了，goimports 在 golang.org/x/tools/cmd/goimports 当中，如果系统上之前没有装，现在就需要手动安装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ go get -u golang.org/x/tools/cmd/goimports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd ~/go/pkg/mod/golang.org/x/tools@2019xxxx/cmd/goimports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你添加了 archlinuxcn 的源，那你可以直接通过 pacman 来安装 golangci-lint，或者你也可以通过 aur 来安装，当然，你也可以从 golangci-lint 源码安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -S golangci-lint &lt;span style="color:#75715e"># Arch Linux 用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ yay golangci-lint &lt;span style="color:#75715e"># Arch Linux Aur&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b &lt;span style="color:#66d9ef">$(&lt;/span>go env GOPATH&lt;span style="color:#66d9ef">)&lt;/span>/bin v1.21.0 &lt;span style="color:#75715e"># 源码安装，将安装至 go/bin 下&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后是 &lt;code>golint&lt;/code>，在 Settings - Tools - File Watchers 中，复制 &lt;code>go fmt&lt;/code> 的内容，将 Name 修改为 &lt;code>golint&lt;/code>，Program 改为 &lt;code>golint&lt;/code>，在 Arguments 前添加 &lt;code>-set_exit_status&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/VCnfW2A.png" alt="">&lt;/p>
&lt;p>假如你的系统上之前没有安装 &lt;code>golint&lt;/code>，可以通过下面的方法来安装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ go get -u golang.org/x/tools/lint/golint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一般情况下，go 会自动安装 golint 到 go/bin 下。如果没有的话可以进入 golint 包，手动安装。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>参考文章：&lt;/strong> &lt;a href="https://goframe.org/prepare/gomodule">https://goframe.org/prepare/gomodule&lt;/a>&lt;/p></description></item><item><title>链表</title><link>https://www.dianbanjiu.com/post/%E9%93%BE%E8%A1%A8/</link><pubDate>Fri, 18 Oct 2019 03:38:42 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E9%93%BE%E8%A1%A8/</guid><description>&lt;p>链表通常是由大于等于零个具有相同属性的节点连接而成的一串数据，每个节点一般都会包含数据域跟指针域两部分。&lt;/p>
&lt;p>比较常用的链表有三种，分别是单(向)链表，双(向)链表和循环链表。&lt;/p>
&lt;h2 id="单链表">单链表&lt;/h2>
&lt;p>单链表的特点是其中的每个节点的指针域仅指向它的直接后继节点。&lt;/p>
&lt;p>所谓直接后继节点，也就是紧挨着当前节点的下一个节点；对应的还有一个直接前驱节点的概念，指的是该节点紧挨着的前一个节点。单链表的每个节点除头节点外，都有且仅有一个直接前驱，除最后一个节点外的所有节点都有且仅有一个直接后继。&lt;/p>
&lt;p>由单链表的结构可以知道，单链表的每个节点仅知道下一个节点的位置，却不知道上一个节点的情况。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/dymCnVC.png" alt="Imgur">&lt;/p>
&lt;p>单链表中 p 点之后添加新节点的操作：&lt;/p>
&lt;ol>
&lt;li>先遍历链表到 p 节点&lt;/li>
&lt;li>将 p 的指向直接后继存储到另一个变量 t 当中&lt;/li>
&lt;li>将 p.Next 指向新的节点，将新节点的 Next 指向 t&lt;/li>
&lt;/ol>
&lt;p>单链表删除索引为 i 的节点：&lt;/p>
&lt;ol>
&lt;li>遍历链表到 i-1 所在的节点 p&lt;/li>
&lt;li>将 p.Next 指向 p.Next.Next&lt;/li>
&lt;/ol>
&lt;p>下面来使用 go 创建一个简单的单链表：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">LList&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">InitList&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>)&lt;span style="color:#a6e22e">Append&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>() &amp;lt; &lt;span style="color:#a6e22e">index&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>: &lt;span style="color:#a6e22e">l&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">index&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>: &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>)&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)&lt;span style="color:#66d9ef">int&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>() &amp;lt; &lt;span style="color:#a6e22e">index&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span> = &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span> = &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">index&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LList&lt;/span>)&lt;span style="color:#a6e22e">Len&lt;/span>()&lt;span style="color:#66d9ef">int&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>go 会在声明一个变量的同时对其进行初始化，结构体的零值为 &lt;code>nil&lt;/code>。如果你在声明一个节点的时候使用的是 &lt;code>var p *LList&lt;/code>，那么在下面任何对 p 结构体内单个条目的操作都会引发空指针的引用错误。&lt;/p>
&lt;h2 id="双链表">双链表&lt;/h2>
&lt;p>双链表跟单链表的区别是，双链表比单链表的节点多了一个指针域，指向它的直接前驱。&lt;/p>
&lt;p>双链表的每个节点除头节点外，都有且仅有一个直接前驱，除最后一个节点外的所有节点都有且仅有一个直接后继。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AaYzcRX.png" alt="Imgur">&lt;/p>
&lt;p>双链表的节点结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">DList&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#a6e22e">ElemenType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Pre&lt;/span>, &lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为双链表相较单链表多了一个指针，所以在进行添加删除等操作时需要同时考虑到两个指针的变化。&lt;/p>
&lt;p>在双链表的 p 节点后添加新的节点操作：&lt;/p>
&lt;ol>
&lt;li>遍历链表到 p 节点&lt;/li>
&lt;li>先将新节点的 Pre 指针指向 p，并将新节点的 Next 指针指向 p 的直接后继&lt;/li>
&lt;li>将 p 直接后继的 Pre 指针指向新的节点，并将 p 的 Next 指针指向新的节点&lt;/li>
&lt;/ol>
&lt;p>删除索引为 i 的节点：&lt;/p>
&lt;ol>
&lt;li>遍历链表至 i-1&lt;/li>
&lt;li>将索引为 i+1 的节点的 Pre 指针指向 索引为 i-1 的节点&lt;/li>
&lt;li>将索引为 i-1 的节点的 Next 指针指向索引为 i+1 的节点&lt;/li>
&lt;/ol>
&lt;p>双向链表在 go 标准库的 container/list 包中已经实现，可以直接导入使用，此处就不重复说明：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#a6e22e">Next&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#a6e22e">Prev&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Back&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Front&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Init&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">InsertAfter&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">InsertBefore&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveAfter&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveBefore&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveToBack&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveToFront&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushBack&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushBackList&lt;/span>(&lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushFront&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushFrontList&lt;/span>(&lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Remove&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="循环链表">循环链表&lt;/h2>
&lt;p>循环链表又分为循环单链表或者循环双链表，它们与上面两种链表的区别在于：循环链表将头节点与最后一个节点以单双链表各自的形式形成了直接前驱后继的关系。&lt;/p>
&lt;p>所以在循环链表中的每个节点都有一个直接前驱与直接后继。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/vMXrmei.png" alt="Imgur">&lt;br>
&lt;img src="https://i.imgur.com/yErfKGJ.png" alt="Imgur">&lt;/p>
&lt;p>因为首尾相接的缘故，循环链表其实可以不必严格区分头节点跟尾节点，因为无论从哪个节点开始都可以遍历整个链表。&lt;/p>
&lt;p>除这些区别外，其他的操作与单双链表也基本相同。&lt;/p></description></item><item><title>压缩/解压缩</title><link>https://www.dianbanjiu.com/post/linux-%E4%B8%8B%E7%9A%84%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 06 Oct 2019 08:26:21 +0800</pubDate><guid>https://www.dianbanjiu.com/post/linux-%E4%B8%8B%E7%9A%84%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/</guid><description>&lt;p>在 Linux 下，除了最常用的 tar 归档命令之外，还有两个很好用的压缩/解压缩的工具，一个是 &lt;code>unarchiver&lt;/code>，另一个是 &lt;code>p7zip&lt;/code>。&lt;/p>
&lt;h2 id="unarchiver">Unarchiver&lt;/h2>
&lt;p>unarchiver 实际上是一个解压工具，其中包含了 &lt;code>unar&lt;/code> 和 &lt;code>lsar&lt;/code> 两个命令行程序。&lt;/p>
&lt;p>在 Arch Linux 下可以直接通过 pacman 命令安装 unarchiver 这个程序包，在其他的 Linux 发行版，如 Ubuntu 下，可以通过 apt 直接安装 unar 程序包。&lt;/p>
&lt;p>其中 &lt;code>lsar&lt;/code> 是用来列出压缩包中的文件，&lt;code>unar&lt;/code> 则负责把文件从压缩包中提取出来，两个命令的用法都很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ lsar &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ unar &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为 zip 压缩包并不会包含有关系统编码的信息，所以在 Linux（系统编码一般为 utf-8）下解压一些非 utf-8（如 gbk 之类）的 zip 压缩包的时候经常会出现乱码的情况。而 unarchiver 的强大之处就在于&lt;strong>即使该压缩包的编码格式不是 utf-8,在解压后也不会出现任何乱码的情况&lt;/strong>。&lt;/p>
&lt;h2 id="p7zip">p7zip&lt;/h2>
&lt;p>p7zip 其实就是 7zip 在 Linux 下的命令行版本。&lt;/p>
&lt;p>在 Linux 下其实有很多好用的压缩工具，但是随之而来的一个问题就是：工具多了，涉及的命令也多了。选择 p7zip 的原因还是它支持更多的压缩格式。&lt;/p>
&lt;p>p7zip 中一般会包含三个命令，分别是 &lt;code>7z&lt;/code>、&lt;code>7za&lt;/code>、&lt;code>7zr&lt;/code>，这三个命令的主要区别就是处理的范围：&lt;/p>
&lt;ul>
&lt;li>7z 支持 p7zip 范围内所有的压缩格式；&lt;/li>
&lt;li>7za 支持的格式略少于 7z；&lt;/li>
&lt;li>7zr 则只支持 7z 类型的压缩格式，且无法处理加密文件。&lt;/li>
&lt;/ul>
&lt;p>所以下面就只介绍 7z 相关的几个常用命令。&lt;/p>
&lt;p>创建压缩文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z a &amp;lt;archive name&amp;gt; &amp;lt;file name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建压缩包的同时加密，-p 选项用来指定密码。切勿在 -p 选项后直接跟随密码，上面这种格式回车之后会提示你设置密码的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z a &amp;lt;archive name&amp;gt; &amp;lt;file name&amp;gt; -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新压缩文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z u &amp;lt;archive name&amp;gt; &amp;lt;file name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>列出压缩文件中包含的文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z l &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接将压缩包中的内容提取到当前目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z e &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>全路径提取（不建议使用，可能会覆盖掉系统原有的一些文件）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z x &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>提取文件到一个新的目录当中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z x -o&amp;lt;floader name&amp;gt; &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查压缩包的完整性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ 7z t &amp;lt;archive name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Github 开启两步验证后，git 推送鉴权失败</title><link>https://www.dianbanjiu.com/post/github-%E5%BC%80%E5%90%AF%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81%E5%90%8Egit-%E6%8E%A8%E9%80%81%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</link><pubDate>Thu, 03 Oct 2019 11:05:02 +0800</pubDate><guid>https://www.dianbanjiu.com/post/github-%E5%BC%80%E5%90%AF%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81%E5%90%8Egit-%E6%8E%A8%E9%80%81%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</guid><description>&lt;p>最近开启了 Github 的两步验证，然后在桌面上使用 git 向 Github 推送文件的时候总是出现&lt;code>鉴权失败&lt;/code>的问题，在排除了密码错误的原因之后，觉得应该就是两步验证的锅了。&lt;/p>
&lt;p>下面是解决办法：&lt;/p>
&lt;ol>
&lt;li>打开 Github 的 「&lt;a href="https://github.com/settings/profile">Settings&lt;/a>」&lt;/li>
&lt;li>进入 「&lt;a href="https://github.com/settings/apps">Developer settings&lt;/a>」&lt;/li>
&lt;li>打开 「&lt;a href="https://github.com/settings/tokens">Personal access tokens&lt;/a>」&lt;/li>
&lt;li>点击 「Generate new token」，生成一个新的 token&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>生成 token 之后千万记得把 token 复制并保存好，因为 github 为了安全起见，这个 token 只会出现一次，也就是说如果你以后忘记了这个 token，只能重新创建一个。&lt;/strong>&lt;/p>
&lt;p>push 之前记得先要配置好用户名跟密码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global user.name &lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git config --global user.email &lt;span style="color:#e6db74">&amp;#34;email@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后再 push 的时候将密码替换为上面生成的 &lt;code>access token&lt;/code> 就可以了。&lt;/p>
&lt;hr>
&lt;p>你还可以创建一个 &lt;code>.git-credentials&lt;/code> 文件 (文件名可以任意，这里只是为了表义)，其中的内容（依规则替换掉其中的用户名和密码/access token）：&lt;/p>
&lt;pre tabindex="0">&lt;code>https://{username}:{password}@github.com
&lt;/code>&lt;/pre>&lt;p>在终端输入下面的命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global credential.helper store --file ~/.git-credentials
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>credential&lt;/code> 是用来配置 git 的凭证存储的参数。&lt;br>
&lt;code>--file&lt;/code> 后面指定的是凭证存放的位置。&lt;/p>
&lt;p>这种方式可以避免每次 push 的时候都需要输入密码，但是因为密码是&lt;code>明文&lt;/code>存储在本地，可能不是很安全。&lt;/p>
&lt;hr>
&lt;p>不过貌似这个文件并不是强制的，我在使用 access token push 完之后，直接执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config --global credential.helper store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在之后的推送中也不再需要输入用户名和密码了。&lt;/p></description></item><item><title>禁用笔记本的自带键盘</title><link>https://www.dianbanjiu.com/post/%E7%A6%81%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E8%87%AA%E5%B8%A6%E9%94%AE%E7%9B%98/</link><pubDate>Fri, 20 Sep 2019 13:05:56 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E7%A6%81%E7%94%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E8%87%AA%E5%B8%A6%E9%94%AE%E7%9B%98/</guid><description>&lt;p>最近半年笔记本的键盘已经慢慢地开始失灵，经常有些键按不出来，所以就另外买了一把键盘。&lt;/p>
&lt;p>不过有时候需要带笔记本出去，所以这样一来还需要带着键盘，为了在把键盘放在笔记本的自带键盘上不会误触到就决定禁用掉自带键盘。&lt;/p>
&lt;p>主要使用的工具是 &lt;strong>xinput&lt;/strong>。&lt;/p>
&lt;p>xinput 是 Linux 下用来管理输入设备的工具，该程序可以在 &lt;code>xorg-xinput&lt;/code> 包中找到。常用的一些指令，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ xinput list &lt;span style="color:#75715e">#列出当前所有的输入设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ xinput disable &amp;lt;device id&amp;gt;|&amp;lt;device name&amp;gt; &lt;span style="color:#75715e">#根据指定的 id 或者设备名禁用该设备&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ xinput enable &amp;lt;device id&amp;gt;|&amp;lt;device name&amp;gt; &lt;span style="color:#75715e">#根据指定的 id 或者设备名启用该设备&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ xinput list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ↳ AT Translated Set &lt;span style="color:#ae81ff">2&lt;/span> keyboard id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#f92672">[&lt;/span>slave keyboard &lt;span style="color:#f92672">(&lt;/span>3&lt;span style="color:#f92672">)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面是使用 &lt;code>list&lt;/code> 参数后的一部分片段，其中的 &lt;strong>AT Translated Set 2 keyboard&lt;/strong> 就是自带键盘的设备名，后面的 18 就是设备对应的 id。&lt;/p>
&lt;p>然后使用 &lt;code>disable&lt;/code> 参数以及 id 或者设备名关掉自带键盘就可以了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ xinput disable &lt;span style="color:#ae81ff">18&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>or
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ xinput disable &lt;span style="color:#e6db74">&amp;#34;AT Translated Set 2 keyboard&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过需要注意的是，在计算机重启之后，设备会被重新启用，为了方便起见，你可以把上面的那条命令写在一个开机脚本里，让它随着计算机启动一同被执行。&lt;/p>
&lt;p>下面以 &lt;strong>KDE Plasma&lt;/strong> 桌面说明，不同的桌面可能会有不同的方式：&lt;br>
首先在任意位置创建一个脚本文件，如 &lt;code>~/script/keyboard.sh&lt;/code>，其中包含以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>xinput disable &lt;span style="color:#e6db74">&amp;#34;AT Translated Set 2 keyboard&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在 &lt;code>~/.config/plasma-workspace/env&lt;/code> 下创建 &lt;code>keyboard.sh&lt;/code> 的软链接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd ~/.config/plasma-workspace/env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ln -s ~/script/keyboard.sh keyboard.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>~/.config/plasma-workspace/env&lt;/code> 下存放的脚本文件会在 Plasma 启动前执行。&lt;/p>
&lt;p>另外还有一点，&lt;strong>设备的 id 并不是固定的&lt;/strong>，所以在写开机脚本的时候务必使用设备名。&lt;/p>
&lt;hr>
&lt;p>如果在添加为开机脚本之后发现开机后键盘依旧可以正常使用，可以检查一下是否给脚本添加了&lt;code>可执行权限&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ chmod +x keyboard.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Linux 下蓝牙鼠标延迟严重</title><link>https://www.dianbanjiu.com/post/linux-%E4%B8%8B%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E5%BB%B6%E8%BF%9F%E4%B8%A5%E9%87%8D/</link><pubDate>Mon, 16 Sep 2019 13:30:06 +0800</pubDate><guid>https://www.dianbanjiu.com/post/linux-%E4%B8%8B%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87%E5%BB%B6%E8%BF%9F%E4%B8%A5%E9%87%8D/</guid><description>&lt;p>最近买了一个小米便携蓝牙鼠标，在 Arch Linux 下成功连接上鼠标之后，发现鼠标的延迟特别严重，但是鼠标连接到手机上却十分顺滑，由此基本断定是在 Arch Linux 上的某些配置导致的这些问题。&lt;/p>
&lt;h3 id="解决办法">解决办法&lt;/h3>
&lt;ul>
&lt;li>断开并重新连接鼠标。（无效）&lt;/li>
&lt;li>断开其他的外设，如无线键盘（使用 2.4GHZ 的无线接收器），断开 wifi（包括 2.4GHZ 和 5GHZ 的频段）。（无效）&lt;/li>
&lt;li>修改鼠标轮询率（Mouse polling rate ）。（丝般顺滑）&lt;/li>
&lt;/ul>
&lt;p>在系统的蓝牙设备管理器当中查看当前蓝牙鼠标的地址，地址字段类似于 &lt;code>D3:77:66:C8:FE:53&lt;/code>。然后在超级用户的状态下修改 &lt;code>/var/lib/bluetooth/&amp;lt;mac-of-your-adapter&amp;gt;/&amp;lt;mac-of-your-mouse&amp;gt;/info&lt;/code>，添加以下字段：&lt;/p>
&lt;blockquote>
&lt;p>一般情况，系统上只有一个蓝牙适配器，&lt;code>&amp;lt;mac-of-your-adapter&amp;gt;&lt;/code> 是可以直接使用 Tab 键来补全的，你只需要根据之前查看到的蓝牙鼠标地址替换掉 &lt;code>&amp;lt;mac-of-your-mouse&amp;gt;&lt;/code> 就可以了。&lt;/p>&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>[ConnectionParameters]
MinInterval=6
MaxInterval=9
Latency=44
Timeout=216
&lt;/code>&lt;/pre>&lt;p>通常 Linux 下的蓝牙设备是不会自动连接的，可以通过在 &lt;code>/etc/bluetooth/main.conf&lt;/code> 的 &lt;code>[Policy]&lt;/code> 下添加 &lt;code>AutoEnable=true&lt;/code> 将蓝牙设备设置为开机自动连接。&lt;/p>
&lt;h3 id="关于轮询率和轮询间隔">关于轮询率和轮询间隔&lt;/h3>
&lt;p>设备的轮询率（单位 Hz）取决于轮询间隔，轮询间隔以毫秒为单位进行测量，等于滞后时间。&lt;/p>
&lt;p>默认的轮询间隔一般为 10ms，但是 USB 控制器一般会向下取最近的 2 的整数次幂，所以 10ms 的轮询时间实际上是 8ms 的轮询时间。&lt;/p>
&lt;p>下面是几个常用轮询率与轮询间隔的对应表（速率 = 1000/轮询间隔）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>轮询率（Hz）&lt;/th>
&lt;th>1000&lt;/th>
&lt;th>500&lt;/th>
&lt;th>250&lt;/th>
&lt;th>125&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>轮询间隔（ms）&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>4&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果是进行一些精度较高的活动时，可以把轮询间隔尽可能地调得小一些，不过这么做同时也会加重 CPU 的负担。&lt;/p></description></item><item><title>为 Blogger 添加数字分页</title><link>https://www.dianbanjiu.com/post/%E4%B8%BA-blogger-%E6%B7%BB%E5%8A%A0%E6%95%B0%E5%AD%97%E5%88%86%E9%A1%B5/</link><pubDate>Tue, 03 Sep 2019 19:23:16 +0800</pubDate><guid>https://www.dianbanjiu.com/post/%E4%B8%BA-blogger-%E6%B7%BB%E5%8A%A0%E6%95%B0%E5%AD%97%E5%88%86%E9%A1%B5/</guid><description>&lt;p>Blogger 的默认主题一般都不包含数字分页的功能，如果我们浏览到后面几页的时候突然想看前面的某一页，就只能一步一步的倒退回去。&lt;/p>
&lt;p>不过好在 Blogger 可以通过编辑页面的原始代码，来让主题的效果达到自己的理想状态。下面就来看一下吧。&lt;/p>
&lt;p>文章原文是英文，我选择了其中重要的部分翻译转述过来，&lt;strong>&lt;a href="https://helplogger.blogspot.com/2014/04/how-to-add-numbered-page-navigation-widget-for-blogger.html">点击这里查看原文&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="添加-css">添加 CSS&lt;/h2>
&lt;p>登录你的 Blogger 页面，点击左侧 Tab 栏中的 &lt;strong>主题背景&lt;/strong>，选择 &lt;strong>修改 HTML&lt;/strong>。&lt;/p>
&lt;p>在源代码中搜索下面的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">]]&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#f92672">b&lt;/span>:&lt;span style="color:#a6e22e">skin&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导航到相应的位置后，在该行代码的上面根据你的喜好插入下面任意一种分页导航的主题代码。&lt;/p>
&lt;h4 id="灰色">灰色&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/ImwrlYQ.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;&lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#E9E9E9&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#888&lt;/span>;&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">#E9E9E9&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#CECECE&lt;/span>;&lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#000&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">showpage&lt;/span>&lt;span style="color:#f92672">,&lt;/span> #blog-pager .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-weight&lt;/span>:&lt;span style="color:#66d9ef">bold&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#888&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="黑橙">黑橙&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/EnJhawM.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;&lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#F4F4F4&lt;/span>; &lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#404042&lt;/span>;&lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#66d9ef">box-shadow&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> rgba(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">0.53&lt;/span>);&lt;span style="color:#66d9ef">-moz-&lt;/span>&lt;span style="color:#66d9ef">box-shadow&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> rgba(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">0.53&lt;/span>);&lt;span style="color:#66d9ef">box-shadow&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> rgba(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">0.53&lt;/span>);}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#EC8D04&lt;/span>;&lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">showpage&lt;/span>&lt;span style="color:#f92672">,&lt;/span> #blog-pager&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-weight&lt;/span>:&lt;span style="color:#66d9ef">bold&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#000&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#66d9ef">box-shadow&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> rgba(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">0.53&lt;/span>);&lt;span style="color:#66d9ef">-moz-&lt;/span>&lt;span style="color:#66d9ef">box-shadow&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> rgba(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">0.53&lt;/span>);&lt;span style="color:#66d9ef">box-shadow&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> rgba(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">0.53&lt;/span>);}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="黑蓝">黑蓝&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/SDSXAAu.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>;&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">11&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#a6e22e">gradient&lt;/span>(&lt;span style="color:#66d9ef">linear&lt;/span>,&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">bottom&lt;/span>,&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">top&lt;/span>,&lt;span style="color:#a6e22e">color-stop&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">#000000&lt;/span>),&lt;span style="color:#a6e22e">color-stop&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">#292929&lt;/span>));&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-o-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#292929&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-moz-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#292929&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-webkit-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#292929&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-ms-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#292929&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: linear-gradient(&lt;span style="color:#66d9ef">to&lt;/span> &lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#000000&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#292929&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>); &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">-moz-&lt;/span>&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#a6e22e">gradient&lt;/span>(&lt;span style="color:#66d9ef">linear&lt;/span>,&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">bottom&lt;/span>,&lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">top&lt;/span>,&lt;span style="color:#a6e22e">color-stop&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">#59A2CF&lt;/span>),&lt;span style="color:#a6e22e">color-stop&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">#D9EAFF&lt;/span>));&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-o-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#59A2CF&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#D9EAFF&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-moz-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#59A2CF&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#D9EAFF&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-webkit-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#59A2CF&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#D9EAFF&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: &lt;span style="color:#66d9ef">-ms-&lt;/span>linear-gradient(&lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#59A2CF&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#D9EAFF&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">background-image&lt;/span>: linear-gradient(&lt;span style="color:#66d9ef">to&lt;/span> &lt;span style="color:#66d9ef">top&lt;/span>, &lt;span style="color:#ae81ff">#59A2CF&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">#D9EAFF&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>);&lt;span style="color:#66d9ef">text-decoration&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#000&lt;/span>;&lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">-moz-&lt;/span>&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}.&lt;span style="color:#a6e22e">blog-pager-older-link&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">home-link&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">blog-pager-newer-link&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">transparent&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">a&lt;/span>.&lt;span style="color:#a6e22e">blog-pager-older-link&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">a&lt;/span>.&lt;span style="color:#a6e22e">home-link&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">a&lt;/span>.&lt;span style="color:#a6e22e">blog-pager-newer-link&lt;/span> {&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="灰蓝">灰蓝&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/QS3kQWQ.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;&lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">14&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#666&lt;/span>; &lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#eee&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#359BED&lt;/span>;&lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-weight&lt;/span>:&lt;span style="color:#66d9ef">bold&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#359BED&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="绿橙粉">绿橙粉&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/MzJG15W.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;&lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">13&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#3E5801&lt;/span>; &lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#E0EDC1&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#FEF6DF&lt;/span>;&lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#E16800&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-weight&lt;/span>:&lt;span style="color:#66d9ef">bold&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#D25E71&lt;/span>;&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#FFDEDF&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="橙红">橙红&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/iTbCvXL.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;&lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">13&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#AD0B00&lt;/span>; &lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#FAB001&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#DB4920&lt;/span>;&lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-weight&lt;/span>:&lt;span style="color:#66d9ef">bold&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#DB4920&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="灰红">灰红&lt;/h4>
&lt;p>&lt;img src="https://i.imgur.com/3AdJk71.png" alt="Imgur">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>#blog-pager{&lt;span style="color:#66d9ef">clear&lt;/span>:&lt;span style="color:#66d9ef">both&lt;/span>;&lt;span style="color:#66d9ef">margin&lt;/span>:&lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;&lt;span style="color:#66d9ef">text-align&lt;/span>:&lt;span style="color:#66d9ef">center&lt;/span>; &lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">blog-pager&lt;/span> {&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;&lt;span style="color:#66d9ef">margin-right&lt;/span>:&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>; &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#222&lt;/span>; &lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#eee&lt;/span>; &lt;span style="color:#66d9ef">border&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span> &lt;span style="color:#ae81ff">#EEEEEE&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">displaypageNum&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span>.&lt;span style="color:#a6e22e">showpage&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#E5E5E5&lt;/span>;&lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#222&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pagecurrent&lt;/span>{&lt;span style="color:#66d9ef">font-weight&lt;/span>:&lt;span style="color:#66d9ef">bold&lt;/span>;&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;&lt;span style="color:#66d9ef">background&lt;/span>:&lt;span style="color:#ae81ff">#DB4920&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">showpageOf&lt;/span>{&lt;span style="color:#66d9ef">display&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>&lt;span style="color:#75715e">!important&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#blog-pager .&lt;span style="color:#a6e22e">pages&lt;/span>{&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你想隐藏掉分页导航的 &lt;strong>First&lt;/strong> 和 &lt;strong>Last&lt;/strong> 的话，可以在上面的代码末添加下面这行代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">firstpage&lt;/span>&lt;span style="color:#f92672">,&lt;/span> .&lt;span style="color:#a6e22e">lastpage&lt;/span> {&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="添加-script">添加 script&lt;/h2>
&lt;p>在代码中搜索 &lt;code>&amp;lt;/body&amp;gt;&lt;/code> 标签，在这个标签上面插入下面的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">b:if&lt;/span> &lt;span style="color:#a6e22e">cond&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;data:blog.pageType != &amp;amp;quot;item&amp;amp;quot;&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">b:if&lt;/span> &lt;span style="color:#a6e22e">cond&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;data:blog.pageType != &amp;amp;quot;static_page&amp;amp;quot;&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;text/javascript&amp;#39;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*&amp;lt;![CDATA[*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">numPages&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">firstText&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;First&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">lastText&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Last&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">prevText&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;« Previous&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nextText&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Next »&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">urlactivepage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">href&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">firstText&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;undefined&amp;#34;&lt;/span>)&lt;span style="color:#a6e22e">firstText&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;First&amp;#34;&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">lastText&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;undefined&amp;#34;&lt;/span>)&lt;span style="color:#a6e22e">lastText&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Last&amp;#34;&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">noPage&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">currentPage&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">currentPageNo&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">postLabel&lt;/span>;&lt;span style="color:#a6e22e">pagecurrentg&lt;/span>();&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">looppagecurrentg&lt;/span>(&lt;span style="color:#a6e22e">pageInfo&lt;/span>){&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;&lt;span style="color:#a6e22e">pageNumber&lt;/span>&lt;span style="color:#f92672">=&lt;/span>parseInt(&lt;span style="color:#a6e22e">numPages&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageNumber&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#a6e22e">numPages&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">pageNumber&lt;/span>){&lt;span style="color:#a6e22e">numPages&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">pageNumber&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pageStart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">pageNumber&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageStart&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#a6e22e">pageStart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>parseInt(&lt;span style="color:#a6e22e">pageInfo&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">perPage&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#a6e22e">pageInfo&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">perPage&lt;/span>)&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#a6e22e">pageEnd&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">pageStart&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">numPages&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageEnd&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>)&lt;span style="color:#a6e22e">pageEnd&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>;&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;span class=&amp;#39;showpageOf&amp;#39;&amp;gt;Page &amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39; of &amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">prevNumber&lt;/span>&lt;span style="color:#f92672">=&lt;/span>parseInt(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;showpage firstpage&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">firstText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum firstpage&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/search/label/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?&amp;amp;max-results=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">firstText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;showpage&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">prevText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/search/label/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?&amp;amp;max-results=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">prevText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectpage(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">prevNumber&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">prevText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectlabel(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">prevNumber&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">prevText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageStart&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/search/label/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?&amp;amp;max-results=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageStart&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; ... &amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">pageStart&lt;/span>;&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">&amp;lt;=&lt;/span>&lt;span style="color:#a6e22e">pageEnd&lt;/span>;&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">++&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#a6e22e">jj&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;pagecurrent&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/search/label/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?&amp;amp;max-results=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectpage(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectlabel(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jj&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageEnd&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageEnd&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectpage(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectlabel(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nextnumber&lt;/span>&lt;span style="color:#f92672">=&lt;/span>parseInt(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>(&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectpage(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">nextnumber&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">nextText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectlabel(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">nextnumber&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">nextText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum lastpage&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectpage(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;span class=&amp;#34;displaypageNum lastpage&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34; onclick=&amp;#34;redirectlabel(&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastPageNo&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;);return false&amp;#34;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">lastText&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pageArea&lt;/span>&lt;span style="color:#f92672">=&lt;/span>document.&lt;span style="color:#a6e22e">getElementsByName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pageArea&amp;#34;&lt;/span>);&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">blogPager&lt;/span>&lt;span style="color:#f92672">=&lt;/span>document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;blog-pager&amp;#34;&lt;/span>);&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;&lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">pageArea&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>;&lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">++&lt;/span>){&lt;span style="color:#a6e22e">pageArea&lt;/span>[&lt;span style="color:#a6e22e">p&lt;/span>].&lt;span style="color:#a6e22e">innerHTML&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">html&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pageArea&lt;/span>&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pageArea&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>){&lt;span style="color:#a6e22e">html&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">blogPager&lt;/span>){&lt;span style="color:#a6e22e">blogPager&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">html&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">totalcountdata&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>){&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">feed&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">feed&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">totaldata&lt;/span>&lt;span style="color:#f92672">=&lt;/span>parseInt(&lt;span style="color:#a6e22e">feed&lt;/span>.&lt;span style="color:#a6e22e">openSearch$totalResults&lt;/span>.&lt;span style="color:#a6e22e">$t&lt;/span>,&lt;span style="color:#ae81ff">10&lt;/span>);&lt;span style="color:#a6e22e">looppagecurrentg&lt;/span>(&lt;span style="color:#a6e22e">totaldata&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">pagecurrentg&lt;/span>(){&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">thisUrl&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">urlactivepage&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/search/label/&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;?updated-max&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">substring&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/search/label/&amp;#34;&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>,&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;?updated-max&amp;#34;&lt;/span>))}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">substring&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/search/label/&amp;#34;&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>,&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;?&amp;amp;max&amp;#34;&lt;/span>))}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;?q=&amp;#34;&lt;/span>)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.html&amp;#34;&lt;/span>)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/search/label/&amp;#34;&lt;/span>)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#PageNo=&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">substring&lt;/span>(&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#PageNo=&amp;#34;&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>,&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>)}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;script src=\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;feeds/posts/summary?max-results=1&amp;amp;alt=json-in-script&amp;amp;callback=totalcountdata\&amp;#34;&amp;gt;&amp;lt;\/script&amp;gt;&amp;#34;&lt;/span>)}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;label&amp;#34;&lt;/span>;&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">thisUrl&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;amp;max-results=&amp;#34;&lt;/span>)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#PageNo=&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">substring&lt;/span>(&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;#PageNo=&amp;#34;&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>,&lt;span style="color:#a6e22e">urlactivepage&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>)}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#a6e22e">currentPageNo&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;&amp;lt;script src=&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;feeds/posts/summary/-/&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?alt=json-in-script&amp;amp;callback=totalcountdata&amp;amp;max-results=1&amp;#34; &amp;gt;&amp;lt;\/script&amp;gt;&amp;#39;&lt;/span>)}}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">redirectpage&lt;/span>(&lt;span style="color:#a6e22e">numberpage&lt;/span>){&lt;span style="color:#a6e22e">jsonstart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#a6e22e">numberpage&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>;&lt;span style="color:#a6e22e">noPage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">numberpage&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nameBody&lt;/span>&lt;span style="color:#f92672">=&lt;/span>document.&lt;span style="color:#a6e22e">getElementsByTagName&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;head&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>];&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">newInclude&lt;/span>&lt;span style="color:#f92672">=&lt;/span>document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;script&amp;#39;&lt;/span>);&lt;span style="color:#a6e22e">newInclude&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;text/javascript&amp;#39;&lt;/span>;&lt;span style="color:#a6e22e">newInclude&lt;/span>.&lt;span style="color:#a6e22e">setAttribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;feeds/posts/summary?start-index=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jsonstart&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;amp;max-results=1&amp;amp;alt=json-in-script&amp;amp;callback=finddatepost&amp;#34;&lt;/span>);&lt;span style="color:#a6e22e">nameBody&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">newInclude&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">redirectlabel&lt;/span>(&lt;span style="color:#a6e22e">numberpage&lt;/span>){&lt;span style="color:#a6e22e">jsonstart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#a6e22e">numberpage&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>;&lt;span style="color:#a6e22e">noPage&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">numberpage&lt;/span>;&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nameBody&lt;/span>&lt;span style="color:#f92672">=&lt;/span>document.&lt;span style="color:#a6e22e">getElementsByTagName&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;head&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>];&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">newInclude&lt;/span>&lt;span style="color:#f92672">=&lt;/span>document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;script&amp;#39;&lt;/span>);&lt;span style="color:#a6e22e">newInclude&lt;/span>.&lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;text/javascript&amp;#39;&lt;/span>;&lt;span style="color:#a6e22e">newInclude&lt;/span>.&lt;span style="color:#a6e22e">setAttribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">home_page&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;feeds/posts/summary/-/&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;?start-index=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">jsonstart&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;amp;max-results=1&amp;amp;alt=json-in-script&amp;amp;callback=finddatepost&amp;#34;&lt;/span>);&lt;span style="color:#a6e22e">nameBody&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">newInclude&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">finddatepost&lt;/span>(&lt;span style="color:#a6e22e">root&lt;/span>){&lt;span style="color:#a6e22e">post&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">feed&lt;/span>.&lt;span style="color:#a6e22e">entry&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>];&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">timestamp1&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">post&lt;/span>.&lt;span style="color:#a6e22e">published&lt;/span>.&lt;span style="color:#a6e22e">$t&lt;/span>.&lt;span style="color:#a6e22e">substring&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">19&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">post&lt;/span>.&lt;span style="color:#a6e22e">published&lt;/span>.&lt;span style="color:#a6e22e">$t&lt;/span>.&lt;span style="color:#a6e22e">substring&lt;/span>(&lt;span style="color:#ae81ff">23&lt;/span>,&lt;span style="color:#ae81ff">29&lt;/span>);&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">=&lt;/span>encodeURIComponent(&lt;span style="color:#a6e22e">timestamp1&lt;/span>);&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">currentPage&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;page&amp;#34;&lt;/span>){&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pAddress&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/search?updated-max=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;amp;max-results=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#PageNo=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">noPage&lt;/span>}&lt;span style="color:#66d9ef">else&lt;/span>{&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pAddress&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/search/label/&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">postLabel&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;?updated-max=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;amp;max-results=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">perPage&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#PageNo=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">noPage&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">pAddress&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*]]&amp;gt;*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">b:if&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">b:if&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过调整上面代码中的下面这些参数来调整底部数字导航栏的显示形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>perPage: 7,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numPages: 6,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var firstText =&amp;#39;First&amp;#39;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var lastText =&amp;#39;Last&amp;#39;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var prevText =&amp;#39;« Previous&amp;#39;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var nextText =&amp;#39;Next »&amp;#39;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>perPage&lt;/code> 每页显示的文章数量，建议与在 Blogger 设置中的每页显示文章数目一致。&lt;/li>
&lt;li>&lt;code>numPages&lt;/code> 显示的数字导航数。&lt;/li>
&lt;li>可以把 &lt;code>First&lt;/code>、&lt;code>Last&lt;/code>、&lt;code>« Previous&lt;/code>、&lt;code>Next »&lt;/code> 更换为自己想要的符号页面导航符号。&lt;/li>
&lt;/ul></description></item><item><title>Pandoc 使用及踩坑</title><link>https://www.dianbanjiu.com/post/pandoc-%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B8%A9%E5%9D%91/</link><pubDate>Sat, 31 Aug 2019 18:52:53 +0800</pubDate><guid>https://www.dianbanjiu.com/post/pandoc-%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B8%A9%E5%9D%91/</guid><description>&lt;p>我在转换文档方面的需求很简单，只要能把各种不同类型的文档转换成 PDF 文件就可以了。我的电脑系统是 Arch Linux，没有装 LibreOffice 或者 OpenOffice，因为这两个在格式方面的问题太多了，不如 PDF 来的痛快（关键是 Okular + PDF 真的很舒服），所以我大多数时候都是把 word 或者 markdown 之类的文件转换成 PDF 文件来看。鉴于我的这些需求，我想到了 &lt;a href="https://pandoc.org/">pandoc&lt;/a>。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>pandoc 在各个 Linux 发行版的仓库中都有，可以直接使用自己系统上的包管理进行安装即可。&lt;br>
除了 pandoc 之外，还需要安装 &lt;code>texlive&lt;/code> 的相关组件，用于把文档转换为 PDF 格式。基于 Arch Linux 的系统下叫做 &lt;code>texlive-core&lt;/code>，基于Debian 的系统下叫做 &lt;code>texlive-base&lt;/code>。&lt;/p>
&lt;p>Arch Linux&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -S pandoc texlive-core
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Debian/Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo apt install pandoc texlive-base
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="快速上手">快速上手&lt;/h2>
&lt;p>在 pandoc 的官方 Github 库的 &lt;a href="https://github.com/jgm/pandoc/blob/master/README.md">README&lt;/a> 列出了 pandoc 支持读取和转换成的各种类型。&lt;/p>
&lt;p>pandoc 的使用很简单&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pandoc test.md -o test.pdf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：如果文件转换成功，是不会在终端输出任何内容的&lt;/p>&lt;/blockquote>
&lt;p>这样就可以把 &lt;code>markdown&lt;/code> 转换成 &lt;code>pdf&lt;/code> 类型了，其中的 &lt;code>-o&lt;/code> 选项是指定转换后的文件名。&lt;/p>
&lt;p>pandoc 还支持许多其他的选项，如果你有兴趣的话，可以使用 &lt;code>man pandoc &lt;/code> 命令查看，或者可以参阅 pandoc 的在线 &lt;a href="https://pandoc.org/MANUAL.html">User Guide&lt;/a>，也可以下载 &lt;a href="https://pandoc.org/MANUAL.pdf">PDF 版&lt;/a>。&lt;/p>
&lt;p>不过上面说到的那个例子只有在你的源文件是纯英文的时候出问题的情况才会比较少，如果文件是非英文的，那就还需要进行一些额外的配置。&lt;/p>
&lt;p>首先使用 &lt;code>fc-list :lang=zh&lt;/code> 命令查看一下你自己系统上都安装了哪些中文字体：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ fc-list :lang&lt;span style="color:#f92672">=&lt;/span>zh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSerifCJK-Regular.ttc: Noto Serif CJK SC:style&lt;span style="color:#f92672">=&lt;/span>Regular
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSansCJK-DemiLight.ttc: Noto Sans CJK JP,Noto Sans CJK JP DemiLight:style&lt;span style="color:#f92672">=&lt;/span>DemiLight,Regular
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSansCJK-Black.ttc: Noto Sans CJK JP,Noto Sans CJK JP Black:style&lt;span style="color:#f92672">=&lt;/span>Black,Regular
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSerifCJK-Light.ttc: Noto Serif CJK KR,Noto Serif CJK KR Light:style&lt;span style="color:#f92672">=&lt;/span>Light,Regular
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSansCJK-Medium.ttc: Noto Sans CJK JP,Noto Sans CJK JP Medium:style&lt;span style="color:#f92672">=&lt;/span>Medium,Regular
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSansCJK-Bold.ttc: Noto Sans CJK TC:style&lt;span style="color:#f92672">=&lt;/span>Bold
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSerifCJK-ExtraLight.ttc: Noto Serif CJK SC,Noto Serif CJK SC ExtraLight:style&lt;span style="color:#f92672">=&lt;/span>ExtraLight,Regular
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSansCJK-Bold.ttc: Noto Sans CJK SC:style&lt;span style="color:#f92672">=&lt;/span>Bold
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/share/fonts/noto-cjk/NotoSansCJK-Medium.ttc: Noto Sans CJK TC,Noto Sans CJK TC Medium:style&lt;span style="color:#f92672">=&lt;/span>Medium,Regular
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>上面的是我系统上安装的一部分字体，注意每行&lt;strong>第一个冒号&lt;/strong>到其后&lt;strong>第一个逗号&lt;/strong>之间的内容&lt;/p>&lt;/blockquote>
&lt;p>在最初例子的基础上我们需要再加两个参数使 pandoc 可以正常识别并转换文档，这两个参数分别是 &lt;code>--pdf-engine=xelatex&lt;/code> 和 &lt;code>-V CJKmainfont='Noto Sans CJK SC&lt;/code>。其中 &lt;code>--pdf-engine&lt;/code> 是用来指定 pandoc 在转换过程中使用的模板，后者可以使 Pandoc 正常地识别源文档中的汉语等非英文语言，&lt;code>CJKmainfont&lt;/code> 用来指定你要使用的字体（也就是上面使用 &lt;code>fc-list&lt;/code> 命令列出的，每一行第一个&lt;strong>冒号&lt;/strong>到其后第一个&lt;strong>逗号&lt;/strong>之间的内容），比如我选择的是 &amp;lsquo;Noto Sans CJK SC&amp;rsquo;，这里的字体名称区分大小写，如果字体间有空白的话（就像 Noto Sans CJK SC)，一定要用引号把它们扩起来，单引号双引号都可以。&lt;/p>
&lt;p>好了，修改后的命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pandoc test.md -o test.pdf --pdf-engine&lt;span style="color:#f92672">=&lt;/span>xelatex -V CJKmainfont&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Noto Sans CJK SC&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这下就可以应付绝大多数需要将其他类型的文档转换成 PDF 格式的需求了。&lt;/p>
&lt;h2 id="一些坑">一些坑&lt;/h2>
&lt;p>最近在使用 pandoc 命令将 markdown 文件转换成 pdf 文件时，发生了一些之前没遇到的错误。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pandoc test.md -o test.pdf --pdf-engine&lt;span style="color:#f92672">=&lt;/span>xelatex -V CJKmainfont&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Noto Sans Mono CJK SC&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error producing PDF.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! LaTeX Error: File &lt;span style="color:#e6db74">`&lt;/span>environ.sty&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> not found.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type X to quit or &amp;lt;RETURN&amp;gt; to proceed,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>or enter new name. &lt;span style="color:#f92672">(&lt;/span>Default extension: sty&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter file name:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Emergency stop.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;read *&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l.42 &lt;span style="color:#ae81ff">\f&lt;/span>ile_if_exist:nT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的错误提示缺少了 environ.sty 这个文件，后来在 &lt;code>texlive-latexextra&lt;/code> 这个包中发现了 &lt;code>environ.sty&lt;/code> 这个文件。&lt;/p>
&lt;p>texlive-latexextra 包位于官方源中，可以直接使用 &lt;code>pacman&lt;/code> 命令安装。&lt;/p>
&lt;p>除此之外，这个包中还有很多额外的 .sty 文件。具体的文件列表可以在 &lt;a href="https://www.archlinux.org/packages/extra/any/texlive-latexextra/files/">此处&lt;/a> 查看&lt;/p></description></item><item><title>Linux 客户端代理配置</title><link>https://www.dianbanjiu.com/post/linux-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 30 Aug 2019 18:34:00 +0800</pubDate><guid>https://www.dianbanjiu.com/post/linux-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="购买服务">购买服务&lt;/h2>
&lt;p>最开始是自建的 shadowsocks 服务，使用的搬瓦工洛杉矶的服务器，但是速度不是很理想，而且还经常被封。后来迁移数据的时候，发现搬瓦工也有单独的 shadowsocks 服务出售，相对于自建来说成本更低，相较来说算是个不错的选择。&lt;/p>
&lt;p>费用如下图所示&lt;br>
&lt;img src="https://imgur.com/iJGqs6F.png" alt="Imgur">&lt;br>
这个是最便宜的那个套餐，每月 100G 的流量，因为我平时多的话也不过 50 左右，所以就选了这个，如果你嫌少，他们还有每月 500/1000G 的套餐，世界加钱可及。&lt;/p>
&lt;p>速度的话，YouTube 1080p 基本上可以全程无卡顿，至于 2k、4k 的话，也可以，不过会有偶尔的卡顿。&lt;/p>
&lt;p>如果你也想购买他们的服务，可以 &lt;a href="https://justmysocks.net/members/aff.php?aff=4151">点击此处直达&lt;/a>。&lt;/p>
&lt;p>&lt;strong>2022 年 7 月 15 号更新&lt;/strong>&lt;br>
弃用了 Qv2ray 和 shadowsocks-libev，统一使用 &lt;a href="https://github.com/Dreamacro/clash">clash&lt;/a> 配置代理&lt;/p>
&lt;p>clash 是一个用 go 写的多平台代理工具，我这里使用的是无图形界面的版本，你可以直接从包管理器里面安装，或者从项目的 release 下载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Arch Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo pacman -S clash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># windows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scoop install clash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完成之后需要先运行一次 clash 程序下载 &lt;code>Country.mmdb&lt;/code> 并且初始化 &lt;code>config.yaml&lt;/code>，这两个文件一般位于用户主目录下面的 &lt;code>.config/clash&lt;/code> 下面&lt;/p>
&lt;p>接着只需要修改 config.yaml 文件，并且添加自己的服务配置信息即可&lt;/p>
&lt;p>一些参数的基础配置可以参考 &lt;a href="https://github.com/dianbanjiu/just/tree/main/clash">此处&lt;/a>&lt;/p>
&lt;hr>
&lt;p>&lt;strong>2020 年 9 月 7 日更新&lt;/strong>&lt;br>
现在 justmysocks 默认的五个连接中的三个已经从 shadowsocks 修改为了 vmess 协议，虽然 shadowsocks-libev 可以安装 v2ray 插件来支持 vmess，但是总的来说配置还是不够直观，而 shadowsocks-qt 也并没有提供插件的计划，所以现在我已经改为使用 &lt;code>qv2ray&lt;/code> 来作为新的代理工具了。&lt;/p>
&lt;h2 id="qv2ray">Qv2ray&lt;/h2>
&lt;p>需要安装的软件：&lt;/p>
&lt;ul>
&lt;li>Qv2ray&lt;/li>
&lt;li>v2ray&lt;/li>
&lt;/ul>
&lt;p>安装完成之后，打开 Qv2ray，点击左上角的 &lt;code>首选项&lt;/code>，在 &lt;code>内核设置&lt;/code> 处确保 v2ray 核心选择正确。&lt;br>
&lt;img src="https://www.dianbanjiu.com/resources/_gen/images/qv2ray%E9%A6%96%E9%80%89%E9%A1%B9.png" alt="">&lt;/p>
&lt;p>在 &lt;code>入站设置&lt;/code> 中勾选设置 &lt;code>系统代理&lt;/code>，并启用 &lt;code>socks设置&lt;/code> 与 &lt;code>http设置&lt;/code>（Linux 在此处只需设置 系统代理，MacOS 三项都需开启）。&lt;/p>
&lt;p>在 &lt;code>连接设置&lt;/code> 中，启用 &lt;code>绕过中国大陆&lt;/code>。&lt;/p>
&lt;p>最后点击左下角的 &lt;code>新建&lt;/code> 按钮，选择 &lt;code>二维码&lt;/code>，在你的 justmysocks 界面截屏扫描对应的帐号二维码即可添加 socks 或者 v2ray 链接。&lt;/p>
&lt;p>Linux 下启用 &lt;code>系统代理&lt;/code> 后，浏览器无需设置任何代理工具就可以直接访问 google，而在 MacOS 下则仍需配置浏览器代理，所以 Linux 在第二步中只需设置 系统代理，而 MacOS 三项都需开启才能正常使用。&lt;/p>
&lt;hr>
&lt;h2 id="shadowsocks-配置">shadowsocks 配置&lt;/h2>
&lt;p>首先使用系统的包管理软件安装 shadowsocks-libev 这个软件包。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -S shadowsocks-libev &lt;span style="color:#75715e"># Arch Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo apt install shadowsocks-libev &lt;span style="color:#75715e"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 /etc/shadowsocks 下创建 config.json 文件。在其中写入以下内容，将其中的字段根据情况修改，主要是服务器的地址(server)、密码(password)、端口号(server_port)、加密方法(method)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;server&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;my_server_ip&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;server_port&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">8388&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;local_address&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;local_port&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1080&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;mypassword&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;timeout&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">300&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;aes-256-cfb&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;fast_open&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>shadowsocks-libev 添加 obfs 插件，在配置文件中还需要添加两行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;plugin&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;obfs-local&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;plugin_opts&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;obfs=tls&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置好文件后，使用下面的命令启动 shadowsocks 服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo systemctl start shadowsocks-libev@config.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想要开机自启动的话：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo systemctl enable shadowsocks-libev@config.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，你也可以选择使用带有前端界面的 &lt;code>shadowsocks-qt5&lt;/code> 程序，它在大多数的发行版中都可以找到。&lt;/p>
&lt;p>因为并不是所有的程序都支持 socks 服务，但是大多数的程序都支持 http 代理，下面就通过 privoxy 将 socks 转发为 http 代理。&lt;/p>
&lt;h2 id="privoxy-配置">privoxy 配置&lt;/h2>
&lt;p>首先下载 &lt;code>privoxy&lt;/code> 这个软件包。&lt;/p>
&lt;p>编辑 privoxy 的配置文件 &lt;code>/etc/privoxy/config&lt;/code>，在其中添加下面一行，转发 socks5：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>forward-socks5 / localhost:1080 .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意在最后有一个点&lt;/strong>&lt;/p>
&lt;p>使用下面的命令启动 privoxy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo systemctl start privoxy.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>建议将该服务设置为开机自启动。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo systemctl enable privoxy.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此为止，shadowsocks 就在 Linux 客户端设置完毕，也成功将 socks5 转发为 http，可以通过 chromium 来验证一下是否可用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ http_proxy&lt;span style="color:#f92672">=&lt;/span>http://127.0.0.1:8118 chromium
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果可以正常使用 google 就说明配置成功了。&lt;/p></description></item></channel></rss>